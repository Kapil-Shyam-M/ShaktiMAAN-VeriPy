//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Thu Jan 20 13:02:22 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// send_sram_req                  O    21
// RDY_send_sram_req              O     1
// RDY_recv_sram_resp             O     1
// RDY_subifc_put_storeparams_put  O     1
// subifc_send_store_finish_get   O     1 const
// RDY_subifc_send_store_finish_get  O     1
// master_AWVALID                 O     1 reg
// master_AWADDR                  O    32 reg
// master_AWPROT                  O     3 reg
// master_AWLEN                   O     8 reg
// master_AWSIZE                  O     3 reg
// master_AWBURST                 O     2 reg
// master_AWID                    O     4 reg
// master_WVALID                  O     1 reg
// master_WDATA                   O   128 reg
// master_WSTRB                   O    16 reg
// master_WLAST                   O     1 reg
// master_WID                     O     4 reg
// master_BREADY                  O     1 reg
// master_ARVALID                 O     1 reg
// master_ARADDR                  O    32 reg
// master_ARPROT                  O     3 reg
// master_ARLEN                   O     8 reg
// master_ARSIZE                  O     3 reg
// master_ARBURST                 O     2 reg
// master_ARID                    O     4 reg
// master_RREADY                  O     1 reg
// send_interrupt                 O     1 reg
// RDY_send_interrupt             O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// recv_sram_resp_response        I   128
// subifc_put_storeparams_put     I   120
// master_AWREADY                 I     1
// master_WREADY                  I     1
// master_BVALID                  I     1
// master_BRESP                   I     2 reg
// master_BID                     I     4 reg
// master_ARREADY                 I     1
// master_RVALID                  I     1
// master_RRESP                   I     2 reg
// master_RDATA                   I   128 reg
// master_RLAST                   I     1 reg
// master_RID                     I     4 reg
// EN_recv_sram_resp              I     1
// EN_subifc_put_storeparams_put  I     1
// EN_send_sram_req               I     1
// EN_subifc_send_store_finish_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstore(CLK,
	       RST_N,

	       EN_send_sram_req,
	       send_sram_req,
	       RDY_send_sram_req,

	       recv_sram_resp_response,
	       EN_recv_sram_resp,
	       RDY_recv_sram_resp,

	       subifc_put_storeparams_put,
	       EN_subifc_put_storeparams_put,
	       RDY_subifc_put_storeparams_put,

	       EN_subifc_send_store_finish_get,
	       subifc_send_store_finish_get,
	       RDY_subifc_send_store_finish_get,

	       master_AWVALID,

	       master_AWADDR,

	       master_AWPROT,

	       master_AWLEN,

	       master_AWSIZE,

	       master_AWBURST,

	       master_AWID,

	       master_AWREADY,

	       master_WVALID,

	       master_WDATA,

	       master_WSTRB,

	       master_WLAST,

	       master_WID,

	       master_WREADY,

	       master_BVALID,
	       master_BRESP,
	       master_BID,

	       master_BREADY,

	       master_ARVALID,

	       master_ARADDR,

	       master_ARPROT,

	       master_ARLEN,

	       master_ARSIZE,

	       master_ARBURST,

	       master_ARID,

	       master_ARREADY,

	       master_RVALID,
	       master_RRESP,
	       master_RDATA,
	       master_RLAST,
	       master_RID,

	       master_RREADY,

	       send_interrupt,
	       RDY_send_interrupt);
  input  CLK;
  input  RST_N;

  // actionvalue method send_sram_req
  input  EN_send_sram_req;
  output [20 : 0] send_sram_req;
  output RDY_send_sram_req;

  // action method recv_sram_resp
  input  [127 : 0] recv_sram_resp_response;
  input  EN_recv_sram_resp;
  output RDY_recv_sram_resp;

  // action method subifc_put_storeparams_put
  input  [119 : 0] subifc_put_storeparams_put;
  input  EN_subifc_put_storeparams_put;
  output RDY_subifc_put_storeparams_put;

  // actionvalue method subifc_send_store_finish_get
  input  EN_subifc_send_store_finish_get;
  output subifc_send_store_finish_get;
  output RDY_subifc_send_store_finish_get;

  // value method master_m_awvalid
  output master_AWVALID;

  // value method master_m_awaddr
  output [31 : 0] master_AWADDR;

  // value method master_m_awuser

  // value method master_m_awprot
  output [2 : 0] master_AWPROT;

  // value method master_m_awlen
  output [7 : 0] master_AWLEN;

  // value method master_m_awsize
  output [2 : 0] master_AWSIZE;

  // value method master_m_awburst
  output [1 : 0] master_AWBURST;

  // value method master_m_awid
  output [3 : 0] master_AWID;

  // action method master_m_awready
  input  master_AWREADY;

  // value method master_m_wvalid
  output master_WVALID;

  // value method master_m_wdata
  output [127 : 0] master_WDATA;

  // value method master_m_wstrb
  output [15 : 0] master_WSTRB;

  // value method master_m_wlast
  output master_WLAST;

  // value method master_m_wid
  output [3 : 0] master_WID;

  // action method master_m_wready
  input  master_WREADY;

  // action method master_m_bvalid
  input  master_BVALID;
  input  [1 : 0] master_BRESP;
  input  [3 : 0] master_BID;

  // value method master_m_bready
  output master_BREADY;

  // value method master_m_arvalid
  output master_ARVALID;

  // value method master_m_araddr
  output [31 : 0] master_ARADDR;

  // value method master_m_aruser

  // value method master_m_arprot
  output [2 : 0] master_ARPROT;

  // value method master_m_arlen
  output [7 : 0] master_ARLEN;

  // value method master_m_arsize
  output [2 : 0] master_ARSIZE;

  // value method master_m_arburst
  output [1 : 0] master_ARBURST;

  // value method master_m_arid
  output [3 : 0] master_ARID;

  // action method master_m_arready
  input  master_ARREADY;

  // action method master_m_rvalid
  input  master_RVALID;
  input  [1 : 0] master_RRESP;
  input  [127 : 0] master_RDATA;
  input  master_RLAST;
  input  [3 : 0] master_RID;

  // value method master_m_rready
  output master_RREADY;

  // value method send_interrupt
  output send_interrupt;
  output RDY_send_interrupt;

  // signals for module outputs
  wire [127 : 0] master_WDATA;
  wire [31 : 0] master_ARADDR, master_AWADDR;
  wire [20 : 0] send_sram_req;
  wire [15 : 0] master_WSTRB;
  wire [7 : 0] master_ARLEN, master_AWLEN;
  wire [3 : 0] master_ARID, master_AWID, master_WID;
  wire [2 : 0] master_ARPROT, master_ARSIZE, master_AWPROT, master_AWSIZE;
  wire [1 : 0] master_ARBURST, master_AWBURST;
  wire RDY_recv_sram_resp,
       RDY_send_interrupt,
       RDY_send_sram_req,
       RDY_subifc_put_storeparams_put,
       RDY_subifc_send_store_finish_get,
       master_ARVALID,
       master_AWVALID,
       master_BREADY,
       master_RREADY,
       master_WLAST,
       master_WVALID,
       send_interrupt,
       subifc_send_store_finish_get;

  // register rg_dram_address
  reg [31 : 0] rg_dram_address;
  wire [31 : 0] rg_dram_address$D_IN;
  wire rg_dram_address$EN;

  // register rg_finish_store
  reg rg_finish_store;
  wire rg_finish_store$D_IN, rg_finish_store$EN;

  // register rg_interrupt
  reg rg_interrupt;
  wire rg_interrupt$D_IN, rg_interrupt$EN;

  // register rg_params
  reg [120 : 0] rg_params;
  wire [120 : 0] rg_params$D_IN;
  wire rg_params$EN;

  // register rg_send_req
  reg rg_send_req;
  wire rg_send_req$D_IN, rg_send_req$EN;

  // register rg_sram_address
  reg [25 : 0] rg_sram_address;
  wire [25 : 0] rg_sram_address$D_IN;
  wire rg_sram_address$EN;

  // register rg_truncate_count
  reg [2 : 0] rg_truncate_count;
  wire [2 : 0] rg_truncate_count$D_IN;
  wire rg_truncate_count$EN;

  // register rg_truncated_ifmap_0
  reg [31 : 0] rg_truncated_ifmap_0;
  wire [31 : 0] rg_truncated_ifmap_0$D_IN;
  wire rg_truncated_ifmap_0$EN;

  // register rg_truncated_ifmap_1
  reg [31 : 0] rg_truncated_ifmap_1;
  wire [31 : 0] rg_truncated_ifmap_1$D_IN;
  wire rg_truncated_ifmap_1$EN;

  // register rg_truncated_ifmap_2
  reg [31 : 0] rg_truncated_ifmap_2;
  wire [31 : 0] rg_truncated_ifmap_2$D_IN;
  wire rg_truncated_ifmap_2$EN;

  // register rg_truncated_ifmap_3
  reg [31 : 0] rg_truncated_ifmap_3;
  wire [31 : 0] rg_truncated_ifmap_3$D_IN;
  wire rg_truncated_ifmap_3$EN;

  // register rg_wr_data_strb_0
  reg [3 : 0] rg_wr_data_strb_0;
  wire [3 : 0] rg_wr_data_strb_0$D_IN;
  wire rg_wr_data_strb_0$EN;

  // register rg_wr_data_strb_1
  reg [3 : 0] rg_wr_data_strb_1;
  wire [3 : 0] rg_wr_data_strb_1$D_IN;
  wire rg_wr_data_strb_1$EN;

  // register rg_wr_data_strb_2
  reg [3 : 0] rg_wr_data_strb_2;
  wire [3 : 0] rg_wr_data_strb_2$D_IN;
  wire rg_wr_data_strb_2$EN;

  // register rg_wr_data_strb_3
  reg [3 : 0] rg_wr_data_strb_3;
  wire [3 : 0] rg_wr_data_strb_3$D_IN;
  wire rg_wr_data_strb_3$EN;

  // register rg_x_cntr
  reg [7 : 0] rg_x_cntr;
  wire [7 : 0] rg_x_cntr$D_IN;
  wire rg_x_cntr$EN;

  // register rg_y_cntr
  reg [7 : 0] rg_y_cntr;
  wire [7 : 0] rg_y_cntr$D_IN;
  wire rg_y_cntr$EN;

  // register rg_z_cntr
  reg [7 : 0] rg_z_cntr;
  reg [7 : 0] rg_z_cntr$D_IN;
  wire rg_z_cntr$EN;

  // ports of submodule ff_beat_len
  wire [49 : 0] ff_beat_len$D_IN, ff_beat_len$D_OUT;
  wire ff_beat_len$CLR,
       ff_beat_len$DEQ,
       ff_beat_len$EMPTY_N,
       ff_beat_len$ENQ,
       ff_beat_len$FULL_N;

  // ports of submodule memory_xactor_f_rd_addr
  wire [51 : 0] memory_xactor_f_rd_addr$D_IN, memory_xactor_f_rd_addr$D_OUT;
  wire memory_xactor_f_rd_addr$CLR,
       memory_xactor_f_rd_addr$DEQ,
       memory_xactor_f_rd_addr$EMPTY_N,
       memory_xactor_f_rd_addr$ENQ;

  // ports of submodule memory_xactor_f_rd_data
  wire [134 : 0] memory_xactor_f_rd_data$D_IN;
  wire memory_xactor_f_rd_data$CLR,
       memory_xactor_f_rd_data$DEQ,
       memory_xactor_f_rd_data$ENQ,
       memory_xactor_f_rd_data$FULL_N;

  // ports of submodule memory_xactor_f_wr_addr
  wire [51 : 0] memory_xactor_f_wr_addr$D_IN, memory_xactor_f_wr_addr$D_OUT;
  wire memory_xactor_f_wr_addr$CLR,
       memory_xactor_f_wr_addr$DEQ,
       memory_xactor_f_wr_addr$EMPTY_N,
       memory_xactor_f_wr_addr$ENQ,
       memory_xactor_f_wr_addr$FULL_N;

  // ports of submodule memory_xactor_f_wr_data
  wire [148 : 0] memory_xactor_f_wr_data$D_IN, memory_xactor_f_wr_data$D_OUT;
  wire memory_xactor_f_wr_data$CLR,
       memory_xactor_f_wr_data$DEQ,
       memory_xactor_f_wr_data$EMPTY_N,
       memory_xactor_f_wr_data$ENQ,
       memory_xactor_f_wr_data$FULL_N;

  // ports of submodule memory_xactor_f_wr_resp
  wire [5 : 0] memory_xactor_f_wr_resp$D_IN, memory_xactor_f_wr_resp$D_OUT;
  wire memory_xactor_f_wr_resp$CLR,
       memory_xactor_f_wr_resp$DEQ,
       memory_xactor_f_wr_resp$EMPTY_N,
       memory_xactor_f_wr_resp$ENQ,
       memory_xactor_f_wr_resp$FULL_N;

  // inputs to muxes for submodule ports
  wire [120 : 0] MUX_rg_params$write_1__VAL_2;
  wire [31 : 0] MUX_rg_dram_address$write_1__VAL_1;
  wire [25 : 0] MUX_rg_sram_address$write_1__VAL_2;
  wire [7 : 0] MUX_rg_x_cntr$write_1__VAL_1,
	       MUX_rg_y_cntr$write_1__VAL_1,
	       MUX_rg_z_cntr$write_1__VAL_1;
  wire MUX_rg_dram_address$write_1__SEL_1,
       MUX_rg_send_req$write_1__SEL_1,
       MUX_rg_x_cntr$write_1__SEL_1,
       MUX_rg_z_cntr$write_1__SEL_1,
       MUX_rg_z_cntr$write_1__SEL_2;

  // remaining internal signals
  wire [127 : 0] lv_data___1__h5879;
  wire [63 : 0] IF_rg_truncate_count_9_EQ_3_5_THEN_recv_sram_r_ETC___d123;
  wire [31 : 0] IF_rg_params_9_BIT_20_8_THEN_0_ELSE_2___d39,
		n__h6116,
		x__h2151,
		x__h2199,
		x__h2312,
		x__h2333,
		y__h2186,
		y__h2332;
  wire [25 : 0] x__h2376, x__h2410, x__h2489;
  wire [15 : 0] write_data_wstrb__h5903;
  wire [10 : 0] lv_shift__h3385;
  wire [7 : 0] IF_rg_truncate_count_9_EQ_3_5_THEN_NOT_ff_beat_ETC___d150,
	       burst_len__h3387,
	       shift_op__h3386,
	       spliced_bits__h3837,
	       spliced_bits__h3872,
	       spliced_bits__h3907,
	       spliced_bits__h3942,
	       x__h2246,
	       x__h2455,
	       x__h3264;
  wire [3 : 0] lv_data_strobe__h3528;
  wire [2 : 0] x__h5372;
  wire _dfoo1,
       _dfoo3,
       _dfoo5,
       _dfoo7,
       lv_temp__h3831,
       lv_temp__h3866,
       lv_temp__h3901,
       lv_temp__h3936,
       rg_truncate_count_9_EQ_0_27_AND_rg_params_9_BI_ETC___d165,
       rg_truncate_count_9_EQ_1_24_AND_rg_params_9_BI_ETC___d166,
       rg_truncate_count_9_EQ_2_20_AND_rg_params_9_BI_ETC___d167,
       rg_truncate_count_9_EQ_3_5_AND_rg_params_9_BIT_ETC___d168,
       rg_truncate_count_9_ULT_4___d90,
       rg_z_cntr_5_ULE_4___d16;

  // actionvalue method send_sram_req
  assign send_sram_req =
	     { (rg_sram_address >= 26'h3000000 &&
		rg_sram_address <= 26'h37FFFFF) ?
		 2'd2 :
		 2'd3,
	       rg_sram_address[12:0],
	       x__h3264[5:0] } ;
  assign RDY_send_sram_req =
	     rg_params[120] && rg_send_req && ff_beat_len$FULL_N ;

  // action method recv_sram_resp
  assign RDY_recv_sram_resp =
	     rg_params[120] && ff_beat_len$EMPTY_N &&
	     memory_xactor_f_wr_addr$FULL_N &&
	     memory_xactor_f_wr_data$FULL_N ;

  // action method subifc_put_storeparams_put
  assign RDY_subifc_put_storeparams_put = !rg_params[120] ;

  // actionvalue method subifc_send_store_finish_get
  assign subifc_send_store_finish_get = 1'd1 ;
  assign RDY_subifc_send_store_finish_get =
	     rg_params[120] && rg_x_cntr == 8'd1 && rg_y_cntr == 8'd1 &&
	     rg_z_cntr == 8'd0 ;

  // value method master_m_awvalid
  assign master_AWVALID = memory_xactor_f_wr_addr$EMPTY_N ;

  // value method master_m_awaddr
  assign master_AWADDR = memory_xactor_f_wr_addr$D_OUT[51:20] ;

  // value method master_m_awprot
  assign master_AWPROT = memory_xactor_f_wr_addr$D_OUT[19:17] ;

  // value method master_m_awlen
  assign master_AWLEN = memory_xactor_f_wr_addr$D_OUT[16:9] ;

  // value method master_m_awsize
  assign master_AWSIZE = memory_xactor_f_wr_addr$D_OUT[8:6] ;

  // value method master_m_awburst
  assign master_AWBURST = memory_xactor_f_wr_addr$D_OUT[5:4] ;

  // value method master_m_awid
  assign master_AWID = memory_xactor_f_wr_addr$D_OUT[3:0] ;

  // value method master_m_wvalid
  assign master_WVALID = memory_xactor_f_wr_data$EMPTY_N ;

  // value method master_m_wdata
  assign master_WDATA = memory_xactor_f_wr_data$D_OUT[148:21] ;

  // value method master_m_wstrb
  assign master_WSTRB = memory_xactor_f_wr_data$D_OUT[20:5] ;

  // value method master_m_wlast
  assign master_WLAST = memory_xactor_f_wr_data$D_OUT[0] ;

  // value method master_m_wid
  assign master_WID = memory_xactor_f_wr_data$D_OUT[4:1] ;

  // value method master_m_bready
  assign master_BREADY = memory_xactor_f_wr_resp$FULL_N ;

  // value method master_m_arvalid
  assign master_ARVALID = memory_xactor_f_rd_addr$EMPTY_N ;

  // value method master_m_araddr
  assign master_ARADDR = memory_xactor_f_rd_addr$D_OUT[51:20] ;

  // value method master_m_arprot
  assign master_ARPROT = memory_xactor_f_rd_addr$D_OUT[19:17] ;

  // value method master_m_arlen
  assign master_ARLEN = memory_xactor_f_rd_addr$D_OUT[13:6] ;

  // value method master_m_arsize
  assign master_ARSIZE = memory_xactor_f_rd_addr$D_OUT[16:14] ;

  // value method master_m_arburst
  assign master_ARBURST = memory_xactor_f_rd_addr$D_OUT[5:4] ;

  // value method master_m_arid
  assign master_ARID = memory_xactor_f_rd_addr$D_OUT[3:0] ;

  // value method master_m_rready
  assign master_RREADY = memory_xactor_f_rd_data$FULL_N ;

  // value method send_interrupt
  assign send_interrupt = rg_interrupt ;
  assign RDY_send_interrupt = 1'd1 ;

  // submodule ff_beat_len
  FIFO2 #(.width(32'd50), .guarded(1'd1)) ff_beat_len(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(ff_beat_len$D_IN),
						      .ENQ(ff_beat_len$ENQ),
						      .DEQ(ff_beat_len$DEQ),
						      .CLR(ff_beat_len$CLR),
						      .D_OUT(ff_beat_len$D_OUT),
						      .FULL_N(ff_beat_len$FULL_N),
						      .EMPTY_N(ff_beat_len$EMPTY_N));

  // submodule memory_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) memory_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_rd_addr$D_IN),
								  .ENQ(memory_xactor_f_rd_addr$ENQ),
								  .DEQ(memory_xactor_f_rd_addr$DEQ),
								  .CLR(memory_xactor_f_rd_addr$CLR),
								  .D_OUT(memory_xactor_f_rd_addr$D_OUT),
								  .FULL_N(),
								  .EMPTY_N(memory_xactor_f_rd_addr$EMPTY_N));

  // submodule memory_xactor_f_rd_data
  FIFO2 #(.width(32'd135),
	  .guarded(1'd1)) memory_xactor_f_rd_data(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(memory_xactor_f_rd_data$D_IN),
						  .ENQ(memory_xactor_f_rd_data$ENQ),
						  .DEQ(memory_xactor_f_rd_data$DEQ),
						  .CLR(memory_xactor_f_rd_data$CLR),
						  .D_OUT(),
						  .FULL_N(memory_xactor_f_rd_data$FULL_N),
						  .EMPTY_N());

  // submodule memory_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) memory_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(memory_xactor_f_wr_addr$D_IN),
								  .ENQ(memory_xactor_f_wr_addr$ENQ),
								  .DEQ(memory_xactor_f_wr_addr$DEQ),
								  .CLR(memory_xactor_f_wr_addr$CLR),
								  .D_OUT(memory_xactor_f_wr_addr$D_OUT),
								  .FULL_N(memory_xactor_f_wr_addr$FULL_N),
								  .EMPTY_N(memory_xactor_f_wr_addr$EMPTY_N));

  // submodule memory_xactor_f_wr_data
  FIFO2 #(.width(32'd149),
	  .guarded(1'd1)) memory_xactor_f_wr_data(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(memory_xactor_f_wr_data$D_IN),
						  .ENQ(memory_xactor_f_wr_data$ENQ),
						  .DEQ(memory_xactor_f_wr_data$DEQ),
						  .CLR(memory_xactor_f_wr_data$CLR),
						  .D_OUT(memory_xactor_f_wr_data$D_OUT),
						  .FULL_N(memory_xactor_f_wr_data$FULL_N),
						  .EMPTY_N(memory_xactor_f_wr_data$EMPTY_N));

  // submodule memory_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) memory_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(memory_xactor_f_wr_resp$D_IN),
								 .ENQ(memory_xactor_f_wr_resp$ENQ),
								 .DEQ(memory_xactor_f_wr_resp$DEQ),
								 .CLR(memory_xactor_f_wr_resp$CLR),
								 .D_OUT(memory_xactor_f_wr_resp$D_OUT),
								 .FULL_N(memory_xactor_f_wr_resp$FULL_N),
								 .EMPTY_N(memory_xactor_f_wr_resp$EMPTY_N));

  // inputs to muxes for submodule ports
  assign MUX_rg_dram_address$write_1__SEL_1 =
	     EN_send_sram_req && rg_z_cntr_5_ULE_4___d16 &&
	     (rg_y_cntr != 8'd1 || rg_x_cntr != 8'd1) ;
  assign MUX_rg_send_req$write_1__SEL_1 =
	     EN_send_sram_req && rg_z_cntr_5_ULE_4___d16 &&
	     rg_y_cntr == 8'd1 &&
	     rg_x_cntr == 8'd1 ;
  assign MUX_rg_x_cntr$write_1__SEL_1 =
	     EN_send_sram_req && rg_z_cntr_5_ULE_4___d16 &&
	     rg_x_cntr != 8'd1 &&
	     rg_y_cntr == 8'd1 ;
  assign MUX_rg_z_cntr$write_1__SEL_1 =
	     EN_send_sram_req &&
	     (rg_y_cntr != 8'd1 || rg_x_cntr != 8'd1 ||
	      !rg_z_cntr_5_ULE_4___d16) ;
  assign MUX_rg_z_cntr$write_1__SEL_2 = EN_recv_sram_resp && !rg_send_req ;
  assign MUX_rg_dram_address$write_1__VAL_1 =
	     (rg_y_cntr == 8'd1) ? x__h2151 : x__h2312 ;
  assign MUX_rg_params$write_1__VAL_2 = { 1'd1, subifc_put_storeparams_put } ;
  assign MUX_rg_sram_address$write_1__VAL_2 =
	     rg_z_cntr_5_ULE_4___d16 ? x__h2376 : x__h2489 ;
  assign MUX_rg_x_cntr$write_1__VAL_1 = rg_x_cntr - 8'd1 ;
  assign MUX_rg_y_cntr$write_1__VAL_1 =
	     (rg_y_cntr == 8'd1) ? rg_params[53:46] : x__h2246 ;
  assign MUX_rg_z_cntr$write_1__VAL_1 =
	     rg_z_cntr_5_ULE_4___d16 ? rg_params[45:38] : x__h2455 ;

  // register rg_dram_address
  assign rg_dram_address$D_IN =
	     MUX_rg_dram_address$write_1__SEL_1 ?
	       MUX_rg_dram_address$write_1__VAL_1 :
	       subifc_put_storeparams_put[119:88] ;
  assign rg_dram_address$EN =
	     EN_send_sram_req && rg_z_cntr_5_ULE_4___d16 &&
	     (rg_y_cntr != 8'd1 || rg_x_cntr != 8'd1) ||
	     EN_subifc_put_storeparams_put ;

  // register rg_finish_store
  assign rg_finish_store$D_IN = 1'd0 ;
  assign rg_finish_store$EN = EN_subifc_put_storeparams_put ;

  // register rg_interrupt
  assign rg_interrupt$D_IN = 1'd1 ;
  assign rg_interrupt$EN =
	     memory_xactor_f_wr_resp$EMPTY_N &&
	     memory_xactor_f_wr_resp$D_OUT[3:0] == 4'd3 &&
	     memory_xactor_f_wr_resp$D_OUT[5:4] == 2'd2 ;

  // register rg_params
  assign rg_params$D_IN =
	     EN_subifc_send_store_finish_get ?
	       121'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_rg_params$write_1__VAL_2 ;
  assign rg_params$EN =
	     EN_subifc_send_store_finish_get ||
	     EN_subifc_put_storeparams_put ;

  // register rg_send_req
  assign rg_send_req$D_IN = !MUX_rg_send_req$write_1__SEL_1 ;
  assign rg_send_req$EN =
	     EN_send_sram_req && rg_z_cntr_5_ULE_4___d16 &&
	     rg_y_cntr == 8'd1 &&
	     rg_x_cntr == 8'd1 ||
	     EN_subifc_put_storeparams_put ;

  // register rg_sram_address
  assign rg_sram_address$D_IN =
	     EN_subifc_put_storeparams_put ?
	       subifc_put_storeparams_put[87:62] :
	       MUX_rg_sram_address$write_1__VAL_2 ;
  assign rg_sram_address$EN =
	     EN_subifc_put_storeparams_put || EN_send_sram_req ;

  // register rg_truncate_count
  assign rg_truncate_count$D_IN =
	     (rg_truncate_count_9_ULT_4___d90 && !ff_beat_len$D_OUT[16]) ?
	       x__h5372 :
	       3'd0 ;
  assign rg_truncate_count$EN = EN_recv_sram_resp && rg_params[20] ;

  // register rg_truncated_ifmap_0
  assign rg_truncated_ifmap_0$D_IN =
	     rg_truncate_count_9_EQ_0_27_AND_rg_params_9_BI_ETC___d165 ?
	       n__h6116 :
	       32'd0 ;
  assign rg_truncated_ifmap_0$EN = EN_recv_sram_resp && _dfoo7 ;

  // register rg_truncated_ifmap_1
  assign rg_truncated_ifmap_1$D_IN =
	     rg_truncate_count_9_EQ_1_24_AND_rg_params_9_BI_ETC___d166 ?
	       n__h6116 :
	       32'd0 ;
  assign rg_truncated_ifmap_1$EN = EN_recv_sram_resp && _dfoo5 ;

  // register rg_truncated_ifmap_2
  assign rg_truncated_ifmap_2$D_IN =
	     rg_truncate_count_9_EQ_2_20_AND_rg_params_9_BI_ETC___d167 ?
	       n__h6116 :
	       32'd0 ;
  assign rg_truncated_ifmap_2$EN = EN_recv_sram_resp && _dfoo3 ;

  // register rg_truncated_ifmap_3
  assign rg_truncated_ifmap_3$D_IN =
	     rg_truncate_count_9_EQ_3_5_AND_rg_params_9_BIT_ETC___d168 ?
	       n__h6116 :
	       32'd0 ;
  assign rg_truncated_ifmap_3$EN = EN_recv_sram_resp && _dfoo1 ;

  // register rg_wr_data_strb_0
  assign rg_wr_data_strb_0$D_IN =
	     rg_truncate_count_9_EQ_0_27_AND_rg_params_9_BI_ETC___d165 ?
	       lv_data_strobe__h3528 :
	       4'd0 ;
  assign rg_wr_data_strb_0$EN = EN_recv_sram_resp && _dfoo7 ;

  // register rg_wr_data_strb_1
  assign rg_wr_data_strb_1$D_IN =
	     rg_truncate_count_9_EQ_1_24_AND_rg_params_9_BI_ETC___d166 ?
	       lv_data_strobe__h3528 :
	       4'd0 ;
  assign rg_wr_data_strb_1$EN = EN_recv_sram_resp && _dfoo5 ;

  // register rg_wr_data_strb_2
  assign rg_wr_data_strb_2$D_IN =
	     rg_truncate_count_9_EQ_2_20_AND_rg_params_9_BI_ETC___d167 ?
	       lv_data_strobe__h3528 :
	       4'd0 ;
  assign rg_wr_data_strb_2$EN = EN_recv_sram_resp && _dfoo3 ;

  // register rg_wr_data_strb_3
  assign rg_wr_data_strb_3$D_IN =
	     rg_truncate_count_9_EQ_3_5_AND_rg_params_9_BIT_ETC___d168 ?
	       lv_data_strobe__h3528 :
	       4'd0 ;
  assign rg_wr_data_strb_3$EN = EN_recv_sram_resp && _dfoo1 ;

  // register rg_x_cntr
  assign rg_x_cntr$D_IN =
	     MUX_rg_x_cntr$write_1__SEL_1 ?
	       MUX_rg_x_cntr$write_1__VAL_1 :
	       subifc_put_storeparams_put[61:54] ;
  assign rg_x_cntr$EN =
	     EN_send_sram_req && rg_z_cntr_5_ULE_4___d16 &&
	     rg_x_cntr != 8'd1 &&
	     rg_y_cntr == 8'd1 ||
	     EN_subifc_put_storeparams_put ;

  // register rg_y_cntr
  assign rg_y_cntr$D_IN =
	     MUX_rg_dram_address$write_1__SEL_1 ?
	       MUX_rg_y_cntr$write_1__VAL_1 :
	       subifc_put_storeparams_put[53:46] ;
  assign rg_y_cntr$EN =
	     EN_send_sram_req && rg_z_cntr_5_ULE_4___d16 &&
	     (rg_y_cntr != 8'd1 || rg_x_cntr != 8'd1) ||
	     EN_subifc_put_storeparams_put ;

  // register rg_z_cntr
  always@(MUX_rg_z_cntr$write_1__SEL_1 or
	  MUX_rg_z_cntr$write_1__VAL_1 or
	  MUX_rg_z_cntr$write_1__SEL_2 or
	  EN_subifc_put_storeparams_put or subifc_put_storeparams_put)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_z_cntr$write_1__SEL_1:
	  rg_z_cntr$D_IN = MUX_rg_z_cntr$write_1__VAL_1;
      MUX_rg_z_cntr$write_1__SEL_2: rg_z_cntr$D_IN = 8'd0;
      EN_subifc_put_storeparams_put:
	  rg_z_cntr$D_IN = subifc_put_storeparams_put[45:38];
      default: rg_z_cntr$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign rg_z_cntr$EN =
	     EN_send_sram_req &&
	     (rg_y_cntr != 8'd1 || rg_x_cntr != 8'd1 ||
	      !rg_z_cntr_5_ULE_4___d16) ||
	     EN_recv_sram_resp && !rg_send_req ||
	     EN_subifc_put_storeparams_put ;

  // submodule ff_beat_len
  assign ff_beat_len$D_IN =
	     { rg_z_cntr == rg_params[45:38],
	       rg_dram_address,
	       rg_z_cntr_5_ULE_4___d16,
	       (rg_z_cntr <= 8'd3) ? 4'd0 : 4'd15,
	       (rg_z_cntr <= 8'd2) ? 4'd0 : 4'd15,
	       (rg_z_cntr <= 8'd1) ? 4'd0 : 4'd15,
	       (rg_z_cntr == 8'd0) ? 4'd0 : 4'd15 } ;
  assign ff_beat_len$ENQ = EN_send_sram_req ;
  assign ff_beat_len$DEQ = EN_recv_sram_resp ;
  assign ff_beat_len$CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_addr
  assign memory_xactor_f_rd_addr$D_IN = 52'h0 ;
  assign memory_xactor_f_rd_addr$ENQ = 1'b0 ;
  assign memory_xactor_f_rd_addr$DEQ =
	     memory_xactor_f_rd_addr$EMPTY_N && master_ARREADY ;
  assign memory_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule memory_xactor_f_rd_data
  assign memory_xactor_f_rd_data$D_IN =
	     { master_RRESP, master_RDATA, master_RLAST, master_RID } ;
  assign memory_xactor_f_rd_data$ENQ =
	     master_RVALID && memory_xactor_f_rd_data$FULL_N ;
  assign memory_xactor_f_rd_data$DEQ = 1'b0 ;
  assign memory_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_addr
  assign memory_xactor_f_wr_addr$D_IN =
	     { ff_beat_len$D_OUT[48:17], 3'h2, burst_len__h3387, 9'd275 } ;
  assign memory_xactor_f_wr_addr$ENQ =
	     EN_recv_sram_resp && ff_beat_len$D_OUT[49] ;
  assign memory_xactor_f_wr_addr$DEQ =
	     memory_xactor_f_wr_addr$EMPTY_N && master_AWREADY ;
  assign memory_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_data
  assign memory_xactor_f_wr_data$D_IN =
	     { rg_params[20] ? lv_data___1__h5879 : recv_sram_resp_response,
	       rg_params[20] ?
		 write_data_wstrb__h5903 :
		 ff_beat_len$D_OUT[15:0],
	       4'd3,
	       ff_beat_len$D_OUT[16] } ;
  assign memory_xactor_f_wr_data$ENQ =
	     EN_recv_sram_resp &&
	     (!rg_truncate_count_9_ULT_4___d90 || ff_beat_len$D_OUT[16] ||
	      !rg_params[20]) ;
  assign memory_xactor_f_wr_data$DEQ =
	     memory_xactor_f_wr_data$EMPTY_N && master_WREADY ;
  assign memory_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule memory_xactor_f_wr_resp
  assign memory_xactor_f_wr_resp$D_IN = { master_BRESP, master_BID } ;
  assign memory_xactor_f_wr_resp$ENQ =
	     master_BVALID && memory_xactor_f_wr_resp$FULL_N ;
  assign memory_xactor_f_wr_resp$DEQ =
	     memory_xactor_f_wr_resp$EMPTY_N &&
	     memory_xactor_f_wr_resp$D_OUT[3:0] == 4'd3 ;
  assign memory_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_rg_params_9_BIT_20_8_THEN_0_ELSE_2___d39 =
	     rg_params[20] ? 32'd0 : 32'd2 ;
  assign IF_rg_truncate_count_9_EQ_3_5_THEN_NOT_ff_beat_ETC___d150 =
	     { (rg_truncate_count == 3'd3) ?
		 lv_data_strobe__h3528 :
		 rg_wr_data_strb_3,
	       (rg_truncate_count == 3'd2) ?
		 lv_data_strobe__h3528 :
		 rg_wr_data_strb_2 } ;
  assign IF_rg_truncate_count_9_EQ_3_5_THEN_recv_sram_r_ETC___d123 =
	     { (rg_truncate_count == 3'd3) ? n__h6116 : rg_truncated_ifmap_3,
	       (rg_truncate_count == 3'd2) ?
		 n__h6116 :
		 rg_truncated_ifmap_2 } ;
  assign _dfoo1 =
	     rg_truncate_count_9_EQ_3_5_AND_rg_params_9_BIT_ETC___d168 ||
	     rg_params[20] &&
	     (!rg_truncate_count_9_ULT_4___d90 || ff_beat_len$D_OUT[16]) ;
  assign _dfoo3 =
	     rg_truncate_count_9_EQ_2_20_AND_rg_params_9_BI_ETC___d167 ||
	     rg_params[20] &&
	     (!rg_truncate_count_9_ULT_4___d90 || ff_beat_len$D_OUT[16]) ;
  assign _dfoo5 =
	     rg_truncate_count_9_EQ_1_24_AND_rg_params_9_BI_ETC___d166 ||
	     rg_params[20] &&
	     (!rg_truncate_count_9_ULT_4___d90 || ff_beat_len$D_OUT[16]) ;
  assign _dfoo7 =
	     rg_truncate_count_9_EQ_0_27_AND_rg_params_9_BI_ETC___d165 ||
	     rg_params[20] &&
	     (!rg_truncate_count_9_ULT_4___d90 || ff_beat_len$D_OUT[16]) ;
  assign burst_len__h3387 =
	     (lv_shift__h3385 < 11'd16) ? 8'd0 : shift_op__h3386 - 8'd1 ;
  assign lv_data___1__h5879 =
	     { IF_rg_truncate_count_9_EQ_3_5_THEN_recv_sram_r_ETC___d123,
	       (rg_truncate_count == 3'd1) ? n__h6116 : rg_truncated_ifmap_1,
	       (rg_truncate_count == 3'd0) ?
		 n__h6116 :
		 rg_truncated_ifmap_0 } ;
  assign lv_data_strobe__h3528 =
	     { lv_temp__h3831,
	       lv_temp__h3866,
	       lv_temp__h3901,
	       lv_temp__h3936 } ;
  assign lv_shift__h3385 =
	     { 3'd0, rg_params[45:38] } <<
	     IF_rg_params_9_BIT_20_8_THEN_0_ELSE_2___d39 ;
  assign lv_temp__h3831 = ff_beat_len$D_OUT[15:12] != 4'd0 ;
  assign lv_temp__h3866 = ff_beat_len$D_OUT[11:8] != 4'd0 ;
  assign lv_temp__h3901 = ff_beat_len$D_OUT[7:4] != 4'd0 ;
  assign lv_temp__h3936 = ff_beat_len$D_OUT[3:0] != 4'd0 ;
  assign n__h6116 =
	     { spliced_bits__h3837,
	       spliced_bits__h3872,
	       spliced_bits__h3907,
	       spliced_bits__h3942 } ;
  assign rg_truncate_count_9_EQ_0_27_AND_rg_params_9_BI_ETC___d165 =
	     rg_truncate_count == 3'd0 && rg_params[20] &&
	     rg_truncate_count_9_ULT_4___d90 &&
	     !ff_beat_len$D_OUT[16] ;
  assign rg_truncate_count_9_EQ_1_24_AND_rg_params_9_BI_ETC___d166 =
	     rg_truncate_count == 3'd1 && rg_params[20] &&
	     rg_truncate_count_9_ULT_4___d90 &&
	     !ff_beat_len$D_OUT[16] ;
  assign rg_truncate_count_9_EQ_2_20_AND_rg_params_9_BI_ETC___d167 =
	     rg_truncate_count == 3'd2 && rg_params[20] &&
	     rg_truncate_count_9_ULT_4___d90 &&
	     !ff_beat_len$D_OUT[16] ;
  assign rg_truncate_count_9_EQ_3_5_AND_rg_params_9_BIT_ETC___d168 =
	     rg_truncate_count == 3'd3 && rg_params[20] &&
	     rg_truncate_count_9_ULT_4___d90 &&
	     !ff_beat_len$D_OUT[16] ;
  assign rg_truncate_count_9_ULT_4___d90 = rg_truncate_count < 3'd4 ;
  assign rg_z_cntr_5_ULE_4___d16 = rg_z_cntr <= 8'd4 ;
  assign shift_op__h3386 = { 1'd0, lv_shift__h3385[10:4] } ;
  assign spliced_bits__h3837 =
	     { recv_sram_resp_response[103] | recv_sram_resp_response[127],
	       recv_sram_resp_response[102:96] } ;
  assign spliced_bits__h3872 =
	     { recv_sram_resp_response[71] | recv_sram_resp_response[95],
	       recv_sram_resp_response[70:64] } ;
  assign spliced_bits__h3907 =
	     { recv_sram_resp_response[39] | recv_sram_resp_response[63],
	       recv_sram_resp_response[38:32] } ;
  assign spliced_bits__h3942 =
	     { recv_sram_resp_response[7] | recv_sram_resp_response[31],
	       recv_sram_resp_response[6:0] } ;
  assign write_data_wstrb__h5903 =
	     { IF_rg_truncate_count_9_EQ_3_5_THEN_NOT_ff_beat_ETC___d150,
	       (rg_truncate_count == 3'd1) ?
		 lv_data_strobe__h3528 :
		 rg_wr_data_strb_1,
	       (rg_truncate_count == 3'd0) ?
		 lv_data_strobe__h3528 :
		 rg_wr_data_strb_0 } ;
  assign x__h2151 = rg_dram_address + y__h2186 ;
  assign x__h2199 = { 24'd0, rg_params[29:22] } ;
  assign x__h2246 = rg_y_cntr - 8'd1 ;
  assign x__h2312 = rg_dram_address + y__h2332 ;
  assign x__h2333 = { 24'd0, rg_params[37:30] } ;
  assign x__h2376 = x__h2410 + 26'd32 ;
  assign x__h2410 = { rg_sram_address[25:5], 5'd0 } ;
  assign x__h2455 = rg_z_cntr - 8'd4 ;
  assign x__h2489 = rg_sram_address + 26'd4 ;
  assign x__h3264 = (rg_z_cntr < 8'd4) ? rg_z_cntr : 8'd4 ;
  assign x__h5372 = rg_truncate_count + 3'd1 ;
  assign y__h2186 = x__h2199 << IF_rg_params_9_BIT_20_8_THEN_0_ELSE_2___d39 ;
  assign y__h2332 = x__h2333 << IF_rg_params_9_BIT_20_8_THEN_0_ELSE_2___d39 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_dram_address <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_finish_store <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_params <= `BSV_ASSIGNMENT_DELAY
	    121'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	rg_send_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sram_address <= `BSV_ASSIGNMENT_DELAY 26'd0;
	rg_truncate_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_truncated_ifmap_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_truncated_ifmap_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_truncated_ifmap_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_truncated_ifmap_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_wr_data_strb_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_wr_data_strb_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_wr_data_strb_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_wr_data_strb_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_x_cntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_y_cntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_z_cntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (rg_dram_address$EN)
	  rg_dram_address <= `BSV_ASSIGNMENT_DELAY rg_dram_address$D_IN;
	if (rg_finish_store$EN)
	  rg_finish_store <= `BSV_ASSIGNMENT_DELAY rg_finish_store$D_IN;
	if (rg_interrupt$EN)
	  rg_interrupt <= `BSV_ASSIGNMENT_DELAY rg_interrupt$D_IN;
	if (rg_params$EN) rg_params <= `BSV_ASSIGNMENT_DELAY rg_params$D_IN;
	if (rg_send_req$EN)
	  rg_send_req <= `BSV_ASSIGNMENT_DELAY rg_send_req$D_IN;
	if (rg_sram_address$EN)
	  rg_sram_address <= `BSV_ASSIGNMENT_DELAY rg_sram_address$D_IN;
	if (rg_truncate_count$EN)
	  rg_truncate_count <= `BSV_ASSIGNMENT_DELAY rg_truncate_count$D_IN;
	if (rg_truncated_ifmap_0$EN)
	  rg_truncated_ifmap_0 <= `BSV_ASSIGNMENT_DELAY
	      rg_truncated_ifmap_0$D_IN;
	if (rg_truncated_ifmap_1$EN)
	  rg_truncated_ifmap_1 <= `BSV_ASSIGNMENT_DELAY
	      rg_truncated_ifmap_1$D_IN;
	if (rg_truncated_ifmap_2$EN)
	  rg_truncated_ifmap_2 <= `BSV_ASSIGNMENT_DELAY
	      rg_truncated_ifmap_2$D_IN;
	if (rg_truncated_ifmap_3$EN)
	  rg_truncated_ifmap_3 <= `BSV_ASSIGNMENT_DELAY
	      rg_truncated_ifmap_3$D_IN;
	if (rg_wr_data_strb_0$EN)
	  rg_wr_data_strb_0 <= `BSV_ASSIGNMENT_DELAY rg_wr_data_strb_0$D_IN;
	if (rg_wr_data_strb_1$EN)
	  rg_wr_data_strb_1 <= `BSV_ASSIGNMENT_DELAY rg_wr_data_strb_1$D_IN;
	if (rg_wr_data_strb_2$EN)
	  rg_wr_data_strb_2 <= `BSV_ASSIGNMENT_DELAY rg_wr_data_strb_2$D_IN;
	if (rg_wr_data_strb_3$EN)
	  rg_wr_data_strb_3 <= `BSV_ASSIGNMENT_DELAY rg_wr_data_strb_3$D_IN;
	if (rg_x_cntr$EN) rg_x_cntr <= `BSV_ASSIGNMENT_DELAY rg_x_cntr$D_IN;
	if (rg_y_cntr$EN) rg_y_cntr <= `BSV_ASSIGNMENT_DELAY rg_y_cntr$D_IN;
	if (rg_z_cntr$EN) rg_z_cntr <= `BSV_ASSIGNMENT_DELAY rg_z_cntr$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_dram_address = 32'hAAAAAAAA;
    rg_finish_store = 1'h0;
    rg_interrupt = 1'h0;
    rg_params = 121'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_send_req = 1'h0;
    rg_sram_address = 26'h2AAAAAA;
    rg_truncate_count = 3'h2;
    rg_truncated_ifmap_0 = 32'hAAAAAAAA;
    rg_truncated_ifmap_1 = 32'hAAAAAAAA;
    rg_truncated_ifmap_2 = 32'hAAAAAAAA;
    rg_truncated_ifmap_3 = 32'hAAAAAAAA;
    rg_wr_data_strb_0 = 4'hA;
    rg_wr_data_strb_1 = 4'hA;
    rg_wr_data_strb_2 = 4'hA;
    rg_wr_data_strb_3 = 4'hA;
    rg_x_cntr = 8'hAA;
    rg_y_cntr = 8'hAA;
    rg_z_cntr = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkstore

