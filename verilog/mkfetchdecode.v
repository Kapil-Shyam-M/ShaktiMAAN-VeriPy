//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Thu Jan 20 13:01:15 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// slave_AWREADY                  O     1 reg
// slave_WREADY                   O     1 reg
// slave_BVALID                   O     1 reg
// slave_BRESP                    O     2 reg
// slave_BID                      O     4 reg
// slave_ARREADY                  O     1 reg
// slave_RVALID                   O     1 reg
// slave_RRESP                    O     2 reg
// slave_RDATA                    O   128 reg
// slave_RLAST                    O     1 reg
// slave_RID                      O     4 reg
// master_AWVALID                 O     1 reg
// master_AWADDR                  O    32 reg
// master_AWPROT                  O     3 reg
// master_AWLEN                   O     8 reg
// master_AWSIZE                  O     3 reg
// master_AWBURST                 O     2 reg
// master_AWID                    O     4 reg
// master_WVALID                  O     1 reg
// master_WDATA                   O   128 reg
// master_WSTRB                   O    16 reg
// master_WLAST                   O     1 reg
// master_WID                     O     4 reg
// master_BREADY                  O     1 reg
// master_ARVALID                 O     1 reg
// master_ARADDR                  O    32 reg
// master_ARPROT                  O     3 reg
// master_ARLEN                   O     8 reg
// master_ARSIZE                  O     3 reg
// master_ARBURST                 O     2 reg
// master_ARID                    O     4 reg
// master_RREADY                  O     1 reg
// ifc_get_load_params_get        O   124 reg
// RDY_ifc_get_load_params_get    O     1
// ifc_get_store_params_get       O   124 reg
// RDY_ifc_get_store_params_get   O     1
// ifc_get_compute_params_get     O   124 reg
// RDY_ifc_get_compute_params_get  O     1
// ifc_get_alu_params_get         O   124 reg
// RDY_ifc_get_alu_params_get     O     1
// is_complete                    O     1 const
// RDY_is_complete                O     1 reg
// send_interrupt                 O     1 const
// RDY_send_interrupt             O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_AWVALID                  I     1
// slave_AWADDR                   I    32 reg
// slave_AWSIZE                   I     3 reg
// slave_AWPROT                   I     3 reg
// slave_AWLEN                    I     8 reg
// slave_AWBURST                  I     2 reg
// slave_AWID                     I     4 reg
// slave_WVALID                   I     1
// slave_WDATA                    I   128 reg
// slave_WSTRB                    I    16 reg
// slave_WLAST                    I     1 reg
// slave_WID                      I     4 reg
// slave_BREADY                   I     1
// slave_ARVALID                  I     1
// slave_ARADDR                   I    32 reg
// slave_ARSIZE                   I     3 reg
// slave_ARPROT                   I     3 reg
// slave_ARLEN                    I     8 reg
// slave_ARBURST                  I     2 reg
// slave_ARID                     I     4 reg
// slave_RREADY                   I     1
// master_AWREADY                 I     1
// master_WREADY                  I     1
// master_BVALID                  I     1
// master_BRESP                   I     2 reg
// master_BID                     I     4 reg
// master_ARREADY                 I     1
// master_RVALID                  I     1
// master_RRESP                   I     2 reg
// master_RDATA                   I   128 reg
// master_RLAST                   I     1 reg
// master_RID                     I     4 reg
// EN_ifc_get_load_params_get     I     1 unused
// EN_ifc_get_store_params_get    I     1 unused
// EN_ifc_get_compute_params_get  I     1 unused
// EN_ifc_get_alu_params_get      I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfetchdecode(CLK,
		     RST_N,

		     slave_AWVALID,
		     slave_AWADDR,
		     slave_AWSIZE,
		     slave_AWPROT,
		     slave_AWLEN,
		     slave_AWBURST,
		     slave_AWID,

		     slave_AWREADY,

		     slave_WVALID,
		     slave_WDATA,
		     slave_WSTRB,
		     slave_WLAST,
		     slave_WID,

		     slave_WREADY,

		     slave_BVALID,

		     slave_BRESP,

		     slave_BID,

		     slave_BREADY,

		     slave_ARVALID,
		     slave_ARADDR,
		     slave_ARSIZE,
		     slave_ARPROT,
		     slave_ARLEN,
		     slave_ARBURST,
		     slave_ARID,

		     slave_ARREADY,

		     slave_RVALID,

		     slave_RRESP,

		     slave_RDATA,

		     slave_RLAST,

		     slave_RID,

		     slave_RREADY,

		     master_AWVALID,

		     master_AWADDR,

		     master_AWPROT,

		     master_AWLEN,

		     master_AWSIZE,

		     master_AWBURST,

		     master_AWID,

		     master_AWREADY,

		     master_WVALID,

		     master_WDATA,

		     master_WSTRB,

		     master_WLAST,

		     master_WID,

		     master_WREADY,

		     master_BVALID,
		     master_BRESP,
		     master_BID,

		     master_BREADY,

		     master_ARVALID,

		     master_ARADDR,

		     master_ARPROT,

		     master_ARLEN,

		     master_ARSIZE,

		     master_ARBURST,

		     master_ARID,

		     master_ARREADY,

		     master_RVALID,
		     master_RRESP,
		     master_RDATA,
		     master_RLAST,
		     master_RID,

		     master_RREADY,

		     EN_ifc_get_load_params_get,
		     ifc_get_load_params_get,
		     RDY_ifc_get_load_params_get,

		     EN_ifc_get_store_params_get,
		     ifc_get_store_params_get,
		     RDY_ifc_get_store_params_get,

		     EN_ifc_get_compute_params_get,
		     ifc_get_compute_params_get,
		     RDY_ifc_get_compute_params_get,

		     EN_ifc_get_alu_params_get,
		     ifc_get_alu_params_get,
		     RDY_ifc_get_alu_params_get,

		     is_complete,
		     RDY_is_complete,

		     send_interrupt,
		     RDY_send_interrupt);
  input  CLK;
  input  RST_N;

  // action method slave_m_awvalid
  input  slave_AWVALID;
  input  [31 : 0] slave_AWADDR;
  input  [2 : 0] slave_AWSIZE;
  input  [2 : 0] slave_AWPROT;
  input  [7 : 0] slave_AWLEN;
  input  [1 : 0] slave_AWBURST;
  input  [3 : 0] slave_AWID;

  // value method slave_m_awready
  output slave_AWREADY;

  // action method slave_m_wvalid
  input  slave_WVALID;
  input  [127 : 0] slave_WDATA;
  input  [15 : 0] slave_WSTRB;
  input  slave_WLAST;
  input  [3 : 0] slave_WID;

  // value method slave_m_wready
  output slave_WREADY;

  // value method slave_m_bvalid
  output slave_BVALID;

  // value method slave_m_bresp
  output [1 : 0] slave_BRESP;

  // value method slave_m_buser

  // value method slave_m_bid
  output [3 : 0] slave_BID;

  // action method slave_m_bready
  input  slave_BREADY;

  // action method slave_m_arvalid
  input  slave_ARVALID;
  input  [31 : 0] slave_ARADDR;
  input  [2 : 0] slave_ARSIZE;
  input  [2 : 0] slave_ARPROT;
  input  [7 : 0] slave_ARLEN;
  input  [1 : 0] slave_ARBURST;
  input  [3 : 0] slave_ARID;

  // value method slave_m_arready
  output slave_ARREADY;

  // value method slave_m_rvalid
  output slave_RVALID;

  // value method slave_m_rresp
  output [1 : 0] slave_RRESP;

  // value method slave_m_rdata
  output [127 : 0] slave_RDATA;

  // value method slave_m_rlast
  output slave_RLAST;

  // value method slave_m_ruser

  // value method slave_m_rid
  output [3 : 0] slave_RID;

  // action method slave_m_rready
  input  slave_RREADY;

  // value method master_m_awvalid
  output master_AWVALID;

  // value method master_m_awaddr
  output [31 : 0] master_AWADDR;

  // value method master_m_awuser

  // value method master_m_awprot
  output [2 : 0] master_AWPROT;

  // value method master_m_awlen
  output [7 : 0] master_AWLEN;

  // value method master_m_awsize
  output [2 : 0] master_AWSIZE;

  // value method master_m_awburst
  output [1 : 0] master_AWBURST;

  // value method master_m_awid
  output [3 : 0] master_AWID;

  // action method master_m_awready
  input  master_AWREADY;

  // value method master_m_wvalid
  output master_WVALID;

  // value method master_m_wdata
  output [127 : 0] master_WDATA;

  // value method master_m_wstrb
  output [15 : 0] master_WSTRB;

  // value method master_m_wlast
  output master_WLAST;

  // value method master_m_wid
  output [3 : 0] master_WID;

  // action method master_m_wready
  input  master_WREADY;

  // action method master_m_bvalid
  input  master_BVALID;
  input  [1 : 0] master_BRESP;
  input  [3 : 0] master_BID;

  // value method master_m_bready
  output master_BREADY;

  // value method master_m_arvalid
  output master_ARVALID;

  // value method master_m_araddr
  output [31 : 0] master_ARADDR;

  // value method master_m_aruser

  // value method master_m_arprot
  output [2 : 0] master_ARPROT;

  // value method master_m_arlen
  output [7 : 0] master_ARLEN;

  // value method master_m_arsize
  output [2 : 0] master_ARSIZE;

  // value method master_m_arburst
  output [1 : 0] master_ARBURST;

  // value method master_m_arid
  output [3 : 0] master_ARID;

  // action method master_m_arready
  input  master_ARREADY;

  // action method master_m_rvalid
  input  master_RVALID;
  input  [1 : 0] master_RRESP;
  input  [127 : 0] master_RDATA;
  input  master_RLAST;
  input  [3 : 0] master_RID;

  // value method master_m_rready
  output master_RREADY;

  // actionvalue method ifc_get_load_params_get
  input  EN_ifc_get_load_params_get;
  output [123 : 0] ifc_get_load_params_get;
  output RDY_ifc_get_load_params_get;

  // actionvalue method ifc_get_store_params_get
  input  EN_ifc_get_store_params_get;
  output [123 : 0] ifc_get_store_params_get;
  output RDY_ifc_get_store_params_get;

  // actionvalue method ifc_get_compute_params_get
  input  EN_ifc_get_compute_params_get;
  output [123 : 0] ifc_get_compute_params_get;
  output RDY_ifc_get_compute_params_get;

  // actionvalue method ifc_get_alu_params_get
  input  EN_ifc_get_alu_params_get;
  output [123 : 0] ifc_get_alu_params_get;
  output RDY_ifc_get_alu_params_get;

  // value method is_complete
  output is_complete;
  output RDY_is_complete;

  // value method send_interrupt
  output send_interrupt;
  output RDY_send_interrupt;

  // signals for module outputs
  wire [127 : 0] master_WDATA, slave_RDATA;
  wire [123 : 0] ifc_get_alu_params_get,
		 ifc_get_compute_params_get,
		 ifc_get_load_params_get,
		 ifc_get_store_params_get;
  wire [31 : 0] master_ARADDR, master_AWADDR;
  wire [15 : 0] master_WSTRB;
  wire [7 : 0] master_ARLEN, master_AWLEN;
  wire [3 : 0] master_ARID, master_AWID, master_WID, slave_BID, slave_RID;
  wire [2 : 0] master_ARPROT, master_ARSIZE, master_AWPROT, master_AWSIZE;
  wire [1 : 0] master_ARBURST, master_AWBURST, slave_BRESP, slave_RRESP;
  wire RDY_ifc_get_alu_params_get,
       RDY_ifc_get_compute_params_get,
       RDY_ifc_get_load_params_get,
       RDY_ifc_get_store_params_get,
       RDY_is_complete,
       RDY_send_interrupt,
       is_complete,
       master_ARVALID,
       master_AWVALID,
       master_BREADY,
       master_RREADY,
       master_WLAST,
       master_WVALID,
       send_interrupt,
       slave_ARREADY,
       slave_AWREADY,
       slave_BVALID,
       slave_RLAST,
       slave_RVALID,
       slave_WREADY;

  // inlined wires
  wire wr_alu$whas, wr_compute$whas, wr_load$whas, wr_store$whas;

  // register rg_complete
  reg rg_complete;
  wire rg_complete$D_IN, rg_complete$EN;

  // register rg_num_ins
  reg [15 : 0] rg_num_ins;
  wire [15 : 0] rg_num_ins$D_IN;
  wire rg_num_ins$EN;

  // register rg_pc
  reg [31 : 0] rg_pc;
  wire [31 : 0] rg_pc$D_IN;
  wire rg_pc$EN;

  // ports of submodule ff_fetch_data
  wire [127 : 0] ff_fetch_data$D_IN, ff_fetch_data$D_OUT;
  wire ff_fetch_data$CLR,
       ff_fetch_data$DEQ,
       ff_fetch_data$EMPTY_N,
       ff_fetch_data$ENQ,
       ff_fetch_data$FULL_N;

  // ports of submodule m_xactor_f_rd_addr
  wire [51 : 0] m_xactor_f_rd_addr$D_IN, m_xactor_f_rd_addr$D_OUT;
  wire m_xactor_f_rd_addr$CLR,
       m_xactor_f_rd_addr$DEQ,
       m_xactor_f_rd_addr$EMPTY_N,
       m_xactor_f_rd_addr$ENQ,
       m_xactor_f_rd_addr$FULL_N;

  // ports of submodule m_xactor_f_rd_data
  wire [134 : 0] m_xactor_f_rd_data$D_IN, m_xactor_f_rd_data$D_OUT;
  wire m_xactor_f_rd_data$CLR,
       m_xactor_f_rd_data$DEQ,
       m_xactor_f_rd_data$EMPTY_N,
       m_xactor_f_rd_data$ENQ,
       m_xactor_f_rd_data$FULL_N;

  // ports of submodule m_xactor_f_wr_addr
  wire [51 : 0] m_xactor_f_wr_addr$D_IN, m_xactor_f_wr_addr$D_OUT;
  wire m_xactor_f_wr_addr$CLR,
       m_xactor_f_wr_addr$DEQ,
       m_xactor_f_wr_addr$EMPTY_N,
       m_xactor_f_wr_addr$ENQ;

  // ports of submodule m_xactor_f_wr_data
  wire [148 : 0] m_xactor_f_wr_data$D_IN, m_xactor_f_wr_data$D_OUT;
  wire m_xactor_f_wr_data$CLR,
       m_xactor_f_wr_data$DEQ,
       m_xactor_f_wr_data$EMPTY_N,
       m_xactor_f_wr_data$ENQ;

  // ports of submodule m_xactor_f_wr_resp
  wire [5 : 0] m_xactor_f_wr_resp$D_IN;
  wire m_xactor_f_wr_resp$CLR,
       m_xactor_f_wr_resp$DEQ,
       m_xactor_f_wr_resp$ENQ,
       m_xactor_f_wr_resp$FULL_N;

  // ports of submodule s_xactor_f_rd_addr
  wire [51 : 0] s_xactor_f_rd_addr$D_IN;
  wire s_xactor_f_rd_addr$CLR,
       s_xactor_f_rd_addr$DEQ,
       s_xactor_f_rd_addr$ENQ,
       s_xactor_f_rd_addr$FULL_N;

  // ports of submodule s_xactor_f_rd_data
  wire [134 : 0] s_xactor_f_rd_data$D_IN, s_xactor_f_rd_data$D_OUT;
  wire s_xactor_f_rd_data$CLR,
       s_xactor_f_rd_data$DEQ,
       s_xactor_f_rd_data$EMPTY_N,
       s_xactor_f_rd_data$ENQ;

  // ports of submodule s_xactor_f_wr_addr
  wire [51 : 0] s_xactor_f_wr_addr$D_IN, s_xactor_f_wr_addr$D_OUT;
  wire s_xactor_f_wr_addr$CLR,
       s_xactor_f_wr_addr$DEQ,
       s_xactor_f_wr_addr$EMPTY_N,
       s_xactor_f_wr_addr$ENQ,
       s_xactor_f_wr_addr$FULL_N;

  // ports of submodule s_xactor_f_wr_data
  wire [148 : 0] s_xactor_f_wr_data$D_IN, s_xactor_f_wr_data$D_OUT;
  wire s_xactor_f_wr_data$CLR,
       s_xactor_f_wr_data$DEQ,
       s_xactor_f_wr_data$EMPTY_N,
       s_xactor_f_wr_data$ENQ,
       s_xactor_f_wr_data$FULL_N;

  // ports of submodule s_xactor_f_wr_resp
  wire [5 : 0] s_xactor_f_wr_resp$D_IN, s_xactor_f_wr_resp$D_OUT;
  wire s_xactor_f_wr_resp$CLR,
       s_xactor_f_wr_resp$DEQ,
       s_xactor_f_wr_resp$EMPTY_N,
       s_xactor_f_wr_resp$ENQ,
       s_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_rl_axi_set_config,
       WILL_FIRE_RL_rl_recv_data,
       WILL_FIRE_RL_rl_send_request;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_rg_pc$write_1__VAL_2;
  wire [15 : 0] MUX_rg_num_ins$write_1__VAL_2;
  wire MUX_rg_complete$write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h1960;
  reg [63 : 0] v__h2408;
  reg [63 : 0] v__h2217;
  reg [63 : 0] v__h2544;
  reg [63 : 0] v__h3376;
  reg [63 : 0] v__h3531;
  // synopsys translate_on

  // remaining internal signals
  wire [15 : 0] x__h2084, y__h2137, y__h2236;
  wire [11 : 0] lv_blen_shifted__h2047;
  wire [7 : 0] x__h2143, x__h2237;

  // value method slave_m_awready
  assign slave_AWREADY = s_xactor_f_wr_addr$FULL_N ;

  // value method slave_m_wready
  assign slave_WREADY = s_xactor_f_wr_data$FULL_N ;

  // value method slave_m_bvalid
  assign slave_BVALID = s_xactor_f_wr_resp$EMPTY_N ;

  // value method slave_m_bresp
  assign slave_BRESP = s_xactor_f_wr_resp$D_OUT[5:4] ;

  // value method slave_m_bid
  assign slave_BID = s_xactor_f_wr_resp$D_OUT[3:0] ;

  // value method slave_m_arready
  assign slave_ARREADY = s_xactor_f_rd_addr$FULL_N ;

  // value method slave_m_rvalid
  assign slave_RVALID = s_xactor_f_rd_data$EMPTY_N ;

  // value method slave_m_rresp
  assign slave_RRESP = s_xactor_f_rd_data$D_OUT[134:133] ;

  // value method slave_m_rdata
  assign slave_RDATA = s_xactor_f_rd_data$D_OUT[132:5] ;

  // value method slave_m_rlast
  assign slave_RLAST = s_xactor_f_rd_data$D_OUT[4] ;

  // value method slave_m_rid
  assign slave_RID = s_xactor_f_rd_data$D_OUT[3:0] ;

  // value method master_m_awvalid
  assign master_AWVALID = m_xactor_f_wr_addr$EMPTY_N ;

  // value method master_m_awaddr
  assign master_AWADDR = m_xactor_f_wr_addr$D_OUT[51:20] ;

  // value method master_m_awprot
  assign master_AWPROT = m_xactor_f_wr_addr$D_OUT[19:17] ;

  // value method master_m_awlen
  assign master_AWLEN = m_xactor_f_wr_addr$D_OUT[16:9] ;

  // value method master_m_awsize
  assign master_AWSIZE = m_xactor_f_wr_addr$D_OUT[8:6] ;

  // value method master_m_awburst
  assign master_AWBURST = m_xactor_f_wr_addr$D_OUT[5:4] ;

  // value method master_m_awid
  assign master_AWID = m_xactor_f_wr_addr$D_OUT[3:0] ;

  // value method master_m_wvalid
  assign master_WVALID = m_xactor_f_wr_data$EMPTY_N ;

  // value method master_m_wdata
  assign master_WDATA = m_xactor_f_wr_data$D_OUT[148:21] ;

  // value method master_m_wstrb
  assign master_WSTRB = m_xactor_f_wr_data$D_OUT[20:5] ;

  // value method master_m_wlast
  assign master_WLAST = m_xactor_f_wr_data$D_OUT[0] ;

  // value method master_m_wid
  assign master_WID = m_xactor_f_wr_data$D_OUT[4:1] ;

  // value method master_m_bready
  assign master_BREADY = m_xactor_f_wr_resp$FULL_N ;

  // value method master_m_arvalid
  assign master_ARVALID = m_xactor_f_rd_addr$EMPTY_N ;

  // value method master_m_araddr
  assign master_ARADDR = m_xactor_f_rd_addr$D_OUT[51:20] ;

  // value method master_m_arprot
  assign master_ARPROT = m_xactor_f_rd_addr$D_OUT[19:17] ;

  // value method master_m_arlen
  assign master_ARLEN = m_xactor_f_rd_addr$D_OUT[13:6] ;

  // value method master_m_arsize
  assign master_ARSIZE = m_xactor_f_rd_addr$D_OUT[16:14] ;

  // value method master_m_arburst
  assign master_ARBURST = m_xactor_f_rd_addr$D_OUT[5:4] ;

  // value method master_m_arid
  assign master_ARID = m_xactor_f_rd_addr$D_OUT[3:0] ;

  // value method master_m_rready
  assign master_RREADY = m_xactor_f_rd_data$FULL_N ;

  // actionvalue method ifc_get_load_params_get
  assign ifc_get_load_params_get = ff_fetch_data$D_OUT[123:0] ;
  assign RDY_ifc_get_load_params_get = ff_fetch_data$EMPTY_N && wr_load$whas ;

  // actionvalue method ifc_get_store_params_get
  assign ifc_get_store_params_get = ff_fetch_data$D_OUT[123:0] ;
  assign RDY_ifc_get_store_params_get =
	     ff_fetch_data$EMPTY_N && wr_store$whas ;

  // actionvalue method ifc_get_compute_params_get
  assign ifc_get_compute_params_get = ff_fetch_data$D_OUT[123:0] ;
  assign RDY_ifc_get_compute_params_get =
	     ff_fetch_data$EMPTY_N && wr_compute$whas ;

  // actionvalue method ifc_get_alu_params_get
  assign ifc_get_alu_params_get = ff_fetch_data$D_OUT[123:0] ;
  assign RDY_ifc_get_alu_params_get = ff_fetch_data$EMPTY_N && wr_alu$whas ;

  // value method is_complete
  assign is_complete = 1'd1 ;
  assign RDY_is_complete = rg_complete ;

  // value method send_interrupt
  assign send_interrupt = 1'd1 ;
  assign RDY_send_interrupt =
	     m_xactor_f_rd_data$EMPTY_N &&
	     m_xactor_f_rd_data$D_OUT[3:0] == 4'd1 &&
	     m_xactor_f_rd_data$D_OUT[134:133] == 2'd2 ;

  // submodule ff_fetch_data
  SizedFIFO #(.p1width(32'd128),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_fetch_data(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(ff_fetch_data$D_IN),
					    .ENQ(ff_fetch_data$ENQ),
					    .DEQ(ff_fetch_data$DEQ),
					    .CLR(ff_fetch_data$CLR),
					    .D_OUT(ff_fetch_data$D_OUT),
					    .FULL_N(ff_fetch_data$FULL_N),
					    .EMPTY_N(ff_fetch_data$EMPTY_N));

  // submodule m_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) m_xactor_f_rd_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(m_xactor_f_rd_addr$D_IN),
							     .ENQ(m_xactor_f_rd_addr$ENQ),
							     .DEQ(m_xactor_f_rd_addr$DEQ),
							     .CLR(m_xactor_f_rd_addr$CLR),
							     .D_OUT(m_xactor_f_rd_addr$D_OUT),
							     .FULL_N(m_xactor_f_rd_addr$FULL_N),
							     .EMPTY_N(m_xactor_f_rd_addr$EMPTY_N));

  // submodule m_xactor_f_rd_data
  FIFO2 #(.width(32'd135), .guarded(1'd1)) m_xactor_f_rd_data(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(m_xactor_f_rd_data$D_IN),
							      .ENQ(m_xactor_f_rd_data$ENQ),
							      .DEQ(m_xactor_f_rd_data$DEQ),
							      .CLR(m_xactor_f_rd_data$CLR),
							      .D_OUT(m_xactor_f_rd_data$D_OUT),
							      .FULL_N(m_xactor_f_rd_data$FULL_N),
							      .EMPTY_N(m_xactor_f_rd_data$EMPTY_N));

  // submodule m_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) m_xactor_f_wr_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(m_xactor_f_wr_addr$D_IN),
							     .ENQ(m_xactor_f_wr_addr$ENQ),
							     .DEQ(m_xactor_f_wr_addr$DEQ),
							     .CLR(m_xactor_f_wr_addr$CLR),
							     .D_OUT(m_xactor_f_wr_addr$D_OUT),
							     .FULL_N(),
							     .EMPTY_N(m_xactor_f_wr_addr$EMPTY_N));

  // submodule m_xactor_f_wr_data
  FIFO2 #(.width(32'd149), .guarded(1'd1)) m_xactor_f_wr_data(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(m_xactor_f_wr_data$D_IN),
							      .ENQ(m_xactor_f_wr_data$ENQ),
							      .DEQ(m_xactor_f_wr_data$DEQ),
							      .CLR(m_xactor_f_wr_data$CLR),
							      .D_OUT(m_xactor_f_wr_data$D_OUT),
							      .FULL_N(),
							      .EMPTY_N(m_xactor_f_wr_data$EMPTY_N));

  // submodule m_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) m_xactor_f_wr_resp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(m_xactor_f_wr_resp$D_IN),
							    .ENQ(m_xactor_f_wr_resp$ENQ),
							    .DEQ(m_xactor_f_wr_resp$DEQ),
							    .CLR(m_xactor_f_wr_resp$CLR),
							    .D_OUT(),
							    .FULL_N(m_xactor_f_wr_resp$FULL_N),
							    .EMPTY_N());

  // submodule s_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) s_xactor_f_rd_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_rd_addr$D_IN),
							     .ENQ(s_xactor_f_rd_addr$ENQ),
							     .DEQ(s_xactor_f_rd_addr$DEQ),
							     .CLR(s_xactor_f_rd_addr$CLR),
							     .D_OUT(),
							     .FULL_N(s_xactor_f_rd_addr$FULL_N),
							     .EMPTY_N());

  // submodule s_xactor_f_rd_data
  FIFO2 #(.width(32'd135), .guarded(1'd1)) s_xactor_f_rd_data(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(s_xactor_f_rd_data$D_IN),
							      .ENQ(s_xactor_f_rd_data$ENQ),
							      .DEQ(s_xactor_f_rd_data$DEQ),
							      .CLR(s_xactor_f_rd_data$CLR),
							      .D_OUT(s_xactor_f_rd_data$D_OUT),
							      .FULL_N(),
							      .EMPTY_N(s_xactor_f_rd_data$EMPTY_N));

  // submodule s_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) s_xactor_f_wr_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_wr_addr$D_IN),
							     .ENQ(s_xactor_f_wr_addr$ENQ),
							     .DEQ(s_xactor_f_wr_addr$DEQ),
							     .CLR(s_xactor_f_wr_addr$CLR),
							     .D_OUT(s_xactor_f_wr_addr$D_OUT),
							     .FULL_N(s_xactor_f_wr_addr$FULL_N),
							     .EMPTY_N(s_xactor_f_wr_addr$EMPTY_N));

  // submodule s_xactor_f_wr_data
  FIFO2 #(.width(32'd149), .guarded(1'd1)) s_xactor_f_wr_data(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(s_xactor_f_wr_data$D_IN),
							      .ENQ(s_xactor_f_wr_data$ENQ),
							      .DEQ(s_xactor_f_wr_data$DEQ),
							      .CLR(s_xactor_f_wr_data$CLR),
							      .D_OUT(s_xactor_f_wr_data$D_OUT),
							      .FULL_N(s_xactor_f_wr_data$FULL_N),
							      .EMPTY_N(s_xactor_f_wr_data$EMPTY_N));

  // submodule s_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) s_xactor_f_wr_resp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(s_xactor_f_wr_resp$D_IN),
							    .ENQ(s_xactor_f_wr_resp$ENQ),
							    .DEQ(s_xactor_f_wr_resp$DEQ),
							    .CLR(s_xactor_f_wr_resp$CLR),
							    .D_OUT(s_xactor_f_wr_resp$D_OUT),
							    .FULL_N(s_xactor_f_wr_resp$FULL_N),
							    .EMPTY_N(s_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_axi_set_config
  assign WILL_FIRE_RL_rl_axi_set_config =
	     s_xactor_f_wr_addr$EMPTY_N && s_xactor_f_wr_data$EMPTY_N &&
	     s_xactor_f_wr_resp$FULL_N ;

  // rule RL_rl_recv_data
  assign WILL_FIRE_RL_rl_recv_data =
	     m_xactor_f_rd_data$EMPTY_N && ff_fetch_data$FULL_N &&
	     m_xactor_f_rd_data$D_OUT[3:0] == 4'd1 &&
	     m_xactor_f_rd_data$D_OUT[134:133] == 2'd0 ;

  // rule RL_rl_send_request
  assign WILL_FIRE_RL_rl_send_request =
	     m_xactor_f_rd_addr$FULL_N && rg_num_ins != 16'd0 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_complete$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_axi_set_config &&
	     s_xactor_f_wr_addr$D_OUT[51:20] == 32'h00900000 ;
  assign MUX_rg_num_ins$write_1__VAL_2 = rg_num_ins - y__h2137 ;
  assign MUX_rg_pc$write_1__VAL_2 =
	     rg_pc + { 20'd0, lv_blen_shifted__h2047 } ;

  // inlined wires
  assign wr_load$whas =
	     ff_fetch_data$EMPTY_N && ff_fetch_data$D_OUT[127:124] == 4'd8 ;
  assign wr_store$whas =
	     ff_fetch_data$EMPTY_N && ff_fetch_data$D_OUT[127:124] == 4'd9 ;
  assign wr_compute$whas =
	     ff_fetch_data$EMPTY_N && ff_fetch_data$D_OUT[127:124] != 4'd8 &&
	     ff_fetch_data$D_OUT[127:124] != 4'd9 &&
	     ff_fetch_data$D_OUT[127:124] != 4'd11 ;
  assign wr_alu$whas =
	     ff_fetch_data$EMPTY_N && ff_fetch_data$D_OUT[127:124] == 4'd11 ;

  // register rg_complete
  assign rg_complete$D_IN = !MUX_rg_complete$write_1__SEL_1 ;
  assign rg_complete$EN =
	     WILL_FIRE_RL_rl_axi_set_config &&
	     s_xactor_f_wr_addr$D_OUT[51:20] == 32'h00900000 ||
	     WILL_FIRE_RL_rl_recv_data && m_xactor_f_rd_data$D_OUT[4] &&
	     rg_num_ins == 16'd0 ;

  // register rg_num_ins
  assign rg_num_ins$D_IN =
	     MUX_rg_complete$write_1__SEL_1 ?
	       s_xactor_f_wr_data$D_OUT[68:53] :
	       MUX_rg_num_ins$write_1__VAL_2 ;
  assign rg_num_ins$EN =
	     WILL_FIRE_RL_rl_axi_set_config &&
	     s_xactor_f_wr_addr$D_OUT[51:20] == 32'h00900000 ||
	     WILL_FIRE_RL_rl_send_request ;

  // register rg_pc
  assign rg_pc$D_IN =
	     MUX_rg_complete$write_1__SEL_1 ?
	       s_xactor_f_wr_data$D_OUT[52:21] :
	       MUX_rg_pc$write_1__VAL_2 ;
  assign rg_pc$EN =
	     WILL_FIRE_RL_rl_axi_set_config &&
	     s_xactor_f_wr_addr$D_OUT[51:20] == 32'h00900000 ||
	     WILL_FIRE_RL_rl_send_request ;

  // submodule ff_fetch_data
  assign ff_fetch_data$D_IN = m_xactor_f_rd_data$D_OUT[132:5] ;
  assign ff_fetch_data$ENQ = WILL_FIRE_RL_rl_recv_data ;
  assign ff_fetch_data$DEQ = ff_fetch_data$EMPTY_N ;
  assign ff_fetch_data$CLR = 1'b0 ;

  // submodule m_xactor_f_rd_addr
  assign m_xactor_f_rd_addr$D_IN = { rg_pc, 6'h14, x__h2084[7:0], 6'd17 } ;
  assign m_xactor_f_rd_addr$ENQ = WILL_FIRE_RL_rl_send_request ;
  assign m_xactor_f_rd_addr$DEQ =
	     m_xactor_f_rd_addr$EMPTY_N && master_ARREADY ;
  assign m_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule m_xactor_f_rd_data
  assign m_xactor_f_rd_data$D_IN =
	     { master_RRESP, master_RDATA, master_RLAST, master_RID } ;
  assign m_xactor_f_rd_data$ENQ = master_RVALID && m_xactor_f_rd_data$FULL_N ;
  assign m_xactor_f_rd_data$DEQ =
	     m_xactor_f_rd_data$EMPTY_N &&
	     m_xactor_f_rd_data$D_OUT[3:0] == 4'd1 &&
	     m_xactor_f_rd_data$D_OUT[134:133] == 2'd2 ||
	     WILL_FIRE_RL_rl_recv_data ;
  assign m_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule m_xactor_f_wr_addr
  assign m_xactor_f_wr_addr$D_IN = 52'h0 ;
  assign m_xactor_f_wr_addr$ENQ = 1'b0 ;
  assign m_xactor_f_wr_addr$DEQ =
	     m_xactor_f_wr_addr$EMPTY_N && master_AWREADY ;
  assign m_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule m_xactor_f_wr_data
  assign m_xactor_f_wr_data$D_IN = 149'h0 ;
  assign m_xactor_f_wr_data$ENQ = 1'b0 ;
  assign m_xactor_f_wr_data$DEQ =
	     m_xactor_f_wr_data$EMPTY_N && master_WREADY ;
  assign m_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule m_xactor_f_wr_resp
  assign m_xactor_f_wr_resp$D_IN = { master_BRESP, master_BID } ;
  assign m_xactor_f_wr_resp$ENQ = master_BVALID && m_xactor_f_wr_resp$FULL_N ;
  assign m_xactor_f_wr_resp$DEQ = 1'b0 ;
  assign m_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule s_xactor_f_rd_addr
  assign s_xactor_f_rd_addr$D_IN =
	     { slave_ARADDR,
	       slave_ARPROT,
	       slave_ARSIZE,
	       slave_ARLEN,
	       slave_ARBURST,
	       slave_ARID } ;
  assign s_xactor_f_rd_addr$ENQ = slave_ARVALID && s_xactor_f_rd_addr$FULL_N ;
  assign s_xactor_f_rd_addr$DEQ = 1'b0 ;
  assign s_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule s_xactor_f_rd_data
  assign s_xactor_f_rd_data$D_IN = 135'h0 ;
  assign s_xactor_f_rd_data$ENQ = 1'b0 ;
  assign s_xactor_f_rd_data$DEQ = slave_RREADY && s_xactor_f_rd_data$EMPTY_N ;
  assign s_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule s_xactor_f_wr_addr
  assign s_xactor_f_wr_addr$D_IN =
	     { slave_AWADDR,
	       slave_AWPROT,
	       slave_AWLEN,
	       slave_AWSIZE,
	       slave_AWBURST,
	       slave_AWID } ;
  assign s_xactor_f_wr_addr$ENQ = slave_AWVALID && s_xactor_f_wr_addr$FULL_N ;
  assign s_xactor_f_wr_addr$DEQ = WILL_FIRE_RL_rl_axi_set_config ;
  assign s_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule s_xactor_f_wr_data
  assign s_xactor_f_wr_data$D_IN =
	     { slave_WDATA, slave_WSTRB, slave_WID, slave_WLAST } ;
  assign s_xactor_f_wr_data$ENQ = slave_WVALID && s_xactor_f_wr_data$FULL_N ;
  assign s_xactor_f_wr_data$DEQ = WILL_FIRE_RL_rl_axi_set_config ;
  assign s_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule s_xactor_f_wr_resp
  assign s_xactor_f_wr_resp$D_IN = { 2'd0, s_xactor_f_wr_addr$D_OUT[3:0] } ;
  assign s_xactor_f_wr_resp$ENQ = WILL_FIRE_RL_rl_axi_set_config ;
  assign s_xactor_f_wr_resp$DEQ = slave_BREADY && s_xactor_f_wr_resp$EMPTY_N ;
  assign s_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign lv_blen_shifted__h2047 = { x__h2084[7:0], 4'd0 } ;
  assign x__h2084 = rg_num_ins - 16'd1 ;
  assign x__h2143 = x__h2084[7:0] + 8'd1 ;
  assign x__h2237 = x__h2084[7:0] - 8'd1 ;
  assign y__h2137 = { 8'd0, x__h2143 } ;
  assign y__h2236 = { 8'd0, x__h2237 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_complete <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_num_ins <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_pc <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
      end
    else
      begin
        if (rg_complete$EN)
	  rg_complete <= `BSV_ASSIGNMENT_DELAY rg_complete$D_IN;
	if (rg_num_ins$EN)
	  rg_num_ins <= `BSV_ASSIGNMENT_DELAY rg_num_ins$D_IN;
	if (rg_pc$EN) rg_pc <= `BSV_ASSIGNMENT_DELAY rg_pc$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_complete = 1'h0;
    rg_num_ins = 16'hAAAA;
    rg_pc = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_axi_set_config &&
	  s_xactor_f_wr_addr$D_OUT[51:20] == 32'h00900000)
	begin
	  v__h1960 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_axi_set_config &&
	  s_xactor_f_wr_addr$D_OUT[51:20] == 32'h00900000)
	$display(v__h1960,
		 "Setting systolic config: %x %x, data: %x",
		 s_xactor_f_wr_data$D_OUT[52:21],
		 s_xactor_f_wr_data$D_OUT[68:53],
		 s_xactor_f_wr_data$D_OUT[148:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_recv_data)
	begin
	  v__h2408 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_recv_data)
	$display(v__h2408,
		 "Received data: %x",
		 m_xactor_f_rd_data$D_OUT[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_request)
	begin
	  v__h2217 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_request)
	$display(v__h2217,
		 "Sending request for addr: %x, pending: %x",
		 rg_pc,
		 rg_num_ins - y__h2236);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_axi_set_config && WILL_FIRE_RL_rl_recv_data)
	$display("Error: \"src/frontend_module//fetch_decode.bsv\", line 80, column 39: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_axi_set_config] and\n  [RL_rl_recv_data] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_axi_set_config && WILL_FIRE_RL_rl_send_request)
	$display("Error: \"src/frontend_module//fetch_decode.bsv\", line 79, column 39: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_axi_set_config] and\n  [RL_rl_send_request] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_fetch_data$EMPTY_N)
	begin
	  v__h2544 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_fetch_data$EMPTY_N)
	$display(v__h2544,
		 "Decoding %x instruction: %x, %x, %x",
		 ff_fetch_data$D_OUT[127:124],
		 ff_fetch_data$D_OUT[119:0],
		 ff_fetch_data$D_OUT[31:0],
		 ff_fetch_data$D_OUT[123:120]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ifc_get_load_params_get)
	begin
	  v__h3376 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ifc_get_load_params_get)
	$display(v__h3376,
		 "Sending params to load module %x, %x",
		 ff_fetch_data$D_OUT[123:120],
		 ff_fetch_data$D_OUT[119:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ifc_get_compute_params_get)
	begin
	  v__h3531 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ifc_get_compute_params_get)
	$display(v__h3531,
		 "Sending params to compute module %x, %x",
		 ff_fetch_data$D_OUT[123:120],
		 ff_fetch_data$D_OUT[119:0]);
  end
  // synopsys translate_on
endmodule  // mkfetchdecode

