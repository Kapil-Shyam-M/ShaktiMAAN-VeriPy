//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Thu Jan 20 13:01:15 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_ifc_put_load_params_put    O     1
// RDY_ifc_put_store_params_put   O     1
// RDY_ifc_put_compute_params_put  O     1
// RDY_ifc_put_alu_params_put     O     1
// ifc_get_load_instruction_get   O   120 reg
// RDY_ifc_get_load_instruction_get  O     1
// ifc_get_store_instruction_get  O   120 reg
// RDY_ifc_get_store_instruction_get  O     1
// ifc_get_gemm_instruction_get   O   120 reg
// RDY_ifc_get_gemm_instruction_get  O     1
// ifc_get_alu_instruction_get    O   120 reg
// RDY_ifc_get_alu_instruction_get  O     1
// RDY_ifc_put_load_complete_put  O     1
// RDY_ifc_put_store_complete_put  O     1
// RDY_ifc_put_gemm_complete_put  O     1
// RDY_ifc_put_alu_complete_put   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ifc_put_load_params_put        I   124 reg
// ifc_put_store_params_put       I   124 reg
// ifc_put_compute_params_put     I   124 reg
// ifc_put_alu_params_put         I   124 reg
// ifc_put_load_complete_put      I     1 unused
// ifc_put_store_complete_put     I     1 unused
// ifc_put_gemm_complete_put      I     1 unused
// ifc_put_alu_complete_put       I     1 unused
// EN_ifc_put_load_params_put     I     1
// EN_ifc_put_store_params_put    I     1
// EN_ifc_put_compute_params_put  I     1
// EN_ifc_put_alu_params_put      I     1
// EN_ifc_put_load_complete_put   I     1
// EN_ifc_put_store_complete_put  I     1
// EN_ifc_put_gemm_complete_put   I     1
// EN_ifc_put_alu_complete_put    I     1
// EN_ifc_get_load_instruction_get  I     1
// EN_ifc_get_store_instruction_get  I     1
// EN_ifc_get_gemm_instruction_get  I     1
// EN_ifc_get_alu_instruction_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdepend_resolver(CLK,
			 RST_N,

			 ifc_put_load_params_put,
			 EN_ifc_put_load_params_put,
			 RDY_ifc_put_load_params_put,

			 ifc_put_store_params_put,
			 EN_ifc_put_store_params_put,
			 RDY_ifc_put_store_params_put,

			 ifc_put_compute_params_put,
			 EN_ifc_put_compute_params_put,
			 RDY_ifc_put_compute_params_put,

			 ifc_put_alu_params_put,
			 EN_ifc_put_alu_params_put,
			 RDY_ifc_put_alu_params_put,

			 EN_ifc_get_load_instruction_get,
			 ifc_get_load_instruction_get,
			 RDY_ifc_get_load_instruction_get,

			 EN_ifc_get_store_instruction_get,
			 ifc_get_store_instruction_get,
			 RDY_ifc_get_store_instruction_get,

			 EN_ifc_get_gemm_instruction_get,
			 ifc_get_gemm_instruction_get,
			 RDY_ifc_get_gemm_instruction_get,

			 EN_ifc_get_alu_instruction_get,
			 ifc_get_alu_instruction_get,
			 RDY_ifc_get_alu_instruction_get,

			 ifc_put_load_complete_put,
			 EN_ifc_put_load_complete_put,
			 RDY_ifc_put_load_complete_put,

			 ifc_put_store_complete_put,
			 EN_ifc_put_store_complete_put,
			 RDY_ifc_put_store_complete_put,

			 ifc_put_gemm_complete_put,
			 EN_ifc_put_gemm_complete_put,
			 RDY_ifc_put_gemm_complete_put,

			 ifc_put_alu_complete_put,
			 EN_ifc_put_alu_complete_put,
			 RDY_ifc_put_alu_complete_put);
  input  CLK;
  input  RST_N;

  // action method ifc_put_load_params_put
  input  [123 : 0] ifc_put_load_params_put;
  input  EN_ifc_put_load_params_put;
  output RDY_ifc_put_load_params_put;

  // action method ifc_put_store_params_put
  input  [123 : 0] ifc_put_store_params_put;
  input  EN_ifc_put_store_params_put;
  output RDY_ifc_put_store_params_put;

  // action method ifc_put_compute_params_put
  input  [123 : 0] ifc_put_compute_params_put;
  input  EN_ifc_put_compute_params_put;
  output RDY_ifc_put_compute_params_put;

  // action method ifc_put_alu_params_put
  input  [123 : 0] ifc_put_alu_params_put;
  input  EN_ifc_put_alu_params_put;
  output RDY_ifc_put_alu_params_put;

  // actionvalue method ifc_get_load_instruction_get
  input  EN_ifc_get_load_instruction_get;
  output [119 : 0] ifc_get_load_instruction_get;
  output RDY_ifc_get_load_instruction_get;

  // actionvalue method ifc_get_store_instruction_get
  input  EN_ifc_get_store_instruction_get;
  output [119 : 0] ifc_get_store_instruction_get;
  output RDY_ifc_get_store_instruction_get;

  // actionvalue method ifc_get_gemm_instruction_get
  input  EN_ifc_get_gemm_instruction_get;
  output [119 : 0] ifc_get_gemm_instruction_get;
  output RDY_ifc_get_gemm_instruction_get;

  // actionvalue method ifc_get_alu_instruction_get
  input  EN_ifc_get_alu_instruction_get;
  output [119 : 0] ifc_get_alu_instruction_get;
  output RDY_ifc_get_alu_instruction_get;

  // action method ifc_put_load_complete_put
  input  ifc_put_load_complete_put;
  input  EN_ifc_put_load_complete_put;
  output RDY_ifc_put_load_complete_put;

  // action method ifc_put_store_complete_put
  input  ifc_put_store_complete_put;
  input  EN_ifc_put_store_complete_put;
  output RDY_ifc_put_store_complete_put;

  // action method ifc_put_gemm_complete_put
  input  ifc_put_gemm_complete_put;
  input  EN_ifc_put_gemm_complete_put;
  output RDY_ifc_put_gemm_complete_put;

  // action method ifc_put_alu_complete_put
  input  ifc_put_alu_complete_put;
  input  EN_ifc_put_alu_complete_put;
  output RDY_ifc_put_alu_complete_put;

  // signals for module outputs
  wire [119 : 0] ifc_get_alu_instruction_get,
		 ifc_get_gemm_instruction_get,
		 ifc_get_load_instruction_get,
		 ifc_get_store_instruction_get;
  wire RDY_ifc_get_alu_instruction_get,
       RDY_ifc_get_gemm_instruction_get,
       RDY_ifc_get_load_instruction_get,
       RDY_ifc_get_store_instruction_get,
       RDY_ifc_put_alu_complete_put,
       RDY_ifc_put_alu_params_put,
       RDY_ifc_put_compute_params_put,
       RDY_ifc_put_gemm_complete_put,
       RDY_ifc_put_load_complete_put,
       RDY_ifc_put_load_params_put,
       RDY_ifc_put_store_complete_put,
       RDY_ifc_put_store_params_put;

  // ports of submodule ff_alu_params
  wire [119 : 0] ff_alu_params$D_IN, ff_alu_params$D_OUT;
  wire ff_alu_params$CLR,
       ff_alu_params$DEQ,
       ff_alu_params$EMPTY_N,
       ff_alu_params$ENQ,
       ff_alu_params$FULL_N;

  // ports of submodule ff_alu_queue
  wire [3 : 0] ff_alu_queue$D_IN, ff_alu_queue$D_OUT;
  wire ff_alu_queue$CLR,
       ff_alu_queue$DEQ,
       ff_alu_queue$EMPTY_N,
       ff_alu_queue$ENQ,
       ff_alu_queue$FULL_N;

  // ports of submodule ff_alu_to_gemm
  wire ff_alu_to_gemm$CLR,
       ff_alu_to_gemm$DEQ,
       ff_alu_to_gemm$D_IN,
       ff_alu_to_gemm$EMPTY_N,
       ff_alu_to_gemm$ENQ,
       ff_alu_to_gemm$FULL_N;

  // ports of submodule ff_alu_to_store
  wire ff_alu_to_store$CLR,
       ff_alu_to_store$DEQ,
       ff_alu_to_store$D_IN,
       ff_alu_to_store$EMPTY_N,
       ff_alu_to_store$ENQ,
       ff_alu_to_store$FULL_N;

  // ports of submodule ff_gemm_params
  wire [119 : 0] ff_gemm_params$D_IN, ff_gemm_params$D_OUT;
  wire ff_gemm_params$CLR,
       ff_gemm_params$DEQ,
       ff_gemm_params$EMPTY_N,
       ff_gemm_params$ENQ,
       ff_gemm_params$FULL_N;

  // ports of submodule ff_gemm_queue
  wire [3 : 0] ff_gemm_queue$D_IN, ff_gemm_queue$D_OUT;
  wire ff_gemm_queue$CLR,
       ff_gemm_queue$DEQ,
       ff_gemm_queue$EMPTY_N,
       ff_gemm_queue$ENQ,
       ff_gemm_queue$FULL_N;

  // ports of submodule ff_gemm_to_alu
  wire ff_gemm_to_alu$CLR,
       ff_gemm_to_alu$DEQ,
       ff_gemm_to_alu$D_IN,
       ff_gemm_to_alu$EMPTY_N,
       ff_gemm_to_alu$ENQ,
       ff_gemm_to_alu$FULL_N;

  // ports of submodule ff_gemm_to_load
  wire ff_gemm_to_load$CLR,
       ff_gemm_to_load$DEQ,
       ff_gemm_to_load$D_IN,
       ff_gemm_to_load$EMPTY_N,
       ff_gemm_to_load$ENQ,
       ff_gemm_to_load$FULL_N;

  // ports of submodule ff_load_params
  wire [119 : 0] ff_load_params$D_IN, ff_load_params$D_OUT;
  wire ff_load_params$CLR,
       ff_load_params$DEQ,
       ff_load_params$EMPTY_N,
       ff_load_params$ENQ,
       ff_load_params$FULL_N;

  // ports of submodule ff_load_queue
  wire [3 : 0] ff_load_queue$D_IN, ff_load_queue$D_OUT;
  wire ff_load_queue$CLR,
       ff_load_queue$DEQ,
       ff_load_queue$EMPTY_N,
       ff_load_queue$ENQ,
       ff_load_queue$FULL_N;

  // ports of submodule ff_load_to_gemm
  wire ff_load_to_gemm$CLR,
       ff_load_to_gemm$DEQ,
       ff_load_to_gemm$D_IN,
       ff_load_to_gemm$EMPTY_N,
       ff_load_to_gemm$ENQ,
       ff_load_to_gemm$FULL_N;

  // ports of submodule ff_store_params
  wire [119 : 0] ff_store_params$D_IN, ff_store_params$D_OUT;
  wire ff_store_params$CLR,
       ff_store_params$DEQ,
       ff_store_params$EMPTY_N,
       ff_store_params$ENQ,
       ff_store_params$FULL_N;

  // ports of submodule ff_store_queue
  wire [3 : 0] ff_store_queue$D_IN, ff_store_queue$D_OUT;
  wire ff_store_queue$CLR,
       ff_store_queue$DEQ,
       ff_store_queue$EMPTY_N,
       ff_store_queue$ENQ,
       ff_store_queue$FULL_N;

  // ports of submodule ff_store_to_alu
  wire ff_store_to_alu$CLR,
       ff_store_to_alu$DEQ,
       ff_store_to_alu$D_IN,
       ff_store_to_alu$EMPTY_N,
       ff_store_to_alu$ENQ,
       ff_store_to_alu$FULL_N;

  // action method ifc_put_load_params_put
  assign RDY_ifc_put_load_params_put =
	     ff_load_queue$FULL_N && ff_load_params$FULL_N ;

  // action method ifc_put_store_params_put
  assign RDY_ifc_put_store_params_put =
	     ff_store_queue$FULL_N && ff_store_params$FULL_N ;

  // action method ifc_put_compute_params_put
  assign RDY_ifc_put_compute_params_put =
	     ff_gemm_queue$FULL_N && ff_gemm_params$FULL_N ;

  // action method ifc_put_alu_params_put
  assign RDY_ifc_put_alu_params_put =
	     ff_alu_queue$FULL_N && ff_alu_params$FULL_N ;

  // actionvalue method ifc_get_load_instruction_get
  assign ifc_get_load_instruction_get = ff_load_params$D_OUT ;
  assign RDY_ifc_get_load_instruction_get =
	     ff_load_queue$EMPTY_N &&
	     (!ff_load_queue$D_OUT[1] || ff_gemm_to_load$EMPTY_N) &&
	     ff_load_params$EMPTY_N ;

  // actionvalue method ifc_get_store_instruction_get
  assign ifc_get_store_instruction_get = ff_store_params$D_OUT ;
  assign RDY_ifc_get_store_instruction_get =
	     ff_store_queue$EMPTY_N &&
	     (!ff_store_queue$D_OUT[3] || ff_alu_to_store$EMPTY_N) &&
	     ff_store_params$EMPTY_N ;

  // actionvalue method ifc_get_gemm_instruction_get
  assign ifc_get_gemm_instruction_get = ff_gemm_params$D_OUT ;
  assign RDY_ifc_get_gemm_instruction_get =
	     ff_gemm_queue$EMPTY_N &&
	     (!ff_gemm_queue$D_OUT[3] || ff_load_to_gemm$EMPTY_N) &&
	     (!ff_gemm_queue$D_OUT[1] || ff_alu_to_gemm$EMPTY_N) &&
	     ff_gemm_params$EMPTY_N ;

  // actionvalue method ifc_get_alu_instruction_get
  assign ifc_get_alu_instruction_get = ff_alu_params$D_OUT ;
  assign RDY_ifc_get_alu_instruction_get =
	     ff_alu_queue$EMPTY_N &&
	     (!ff_alu_queue$D_OUT[3] || ff_gemm_to_alu$EMPTY_N) &&
	     (!ff_alu_queue$D_OUT[1] || ff_store_to_alu$EMPTY_N) &&
	     ff_alu_params$EMPTY_N ;

  // action method ifc_put_load_complete_put
  assign RDY_ifc_put_load_complete_put =
	     ff_load_queue$EMPTY_N && ff_load_to_gemm$FULL_N ;

  // action method ifc_put_store_complete_put
  assign RDY_ifc_put_store_complete_put =
	     ff_store_queue$EMPTY_N && ff_store_to_alu$FULL_N ;

  // action method ifc_put_gemm_complete_put
  assign RDY_ifc_put_gemm_complete_put =
	     ff_gemm_queue$EMPTY_N && ff_gemm_to_load$FULL_N &&
	     ff_gemm_to_alu$FULL_N ;

  // action method ifc_put_alu_complete_put
  assign RDY_ifc_put_alu_complete_put =
	     ff_alu_queue$EMPTY_N && ff_alu_to_gemm$FULL_N &&
	     ff_alu_to_store$FULL_N ;

  // submodule ff_alu_params
  SizedFIFO #(.p1width(32'd120),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_alu_params(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(ff_alu_params$D_IN),
					    .ENQ(ff_alu_params$ENQ),
					    .DEQ(ff_alu_params$DEQ),
					    .CLR(ff_alu_params$CLR),
					    .D_OUT(ff_alu_params$D_OUT),
					    .FULL_N(ff_alu_params$FULL_N),
					    .EMPTY_N(ff_alu_params$EMPTY_N));

  // submodule ff_alu_queue
  SizedFIFO #(.p1width(32'd4),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_alu_queue(.RST(RST_N),
					   .CLK(CLK),
					   .D_IN(ff_alu_queue$D_IN),
					   .ENQ(ff_alu_queue$ENQ),
					   .DEQ(ff_alu_queue$DEQ),
					   .CLR(ff_alu_queue$CLR),
					   .D_OUT(ff_alu_queue$D_OUT),
					   .FULL_N(ff_alu_queue$FULL_N),
					   .EMPTY_N(ff_alu_queue$EMPTY_N));

  // submodule ff_alu_to_gemm
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) ff_alu_to_gemm(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_alu_to_gemm$D_IN),
					     .ENQ(ff_alu_to_gemm$ENQ),
					     .DEQ(ff_alu_to_gemm$DEQ),
					     .CLR(ff_alu_to_gemm$CLR),
					     .D_OUT(),
					     .FULL_N(ff_alu_to_gemm$FULL_N),
					     .EMPTY_N(ff_alu_to_gemm$EMPTY_N));

  // submodule ff_alu_to_store
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) ff_alu_to_store(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(ff_alu_to_store$D_IN),
					      .ENQ(ff_alu_to_store$ENQ),
					      .DEQ(ff_alu_to_store$DEQ),
					      .CLR(ff_alu_to_store$CLR),
					      .D_OUT(),
					      .FULL_N(ff_alu_to_store$FULL_N),
					      .EMPTY_N(ff_alu_to_store$EMPTY_N));

  // submodule ff_gemm_params
  SizedFIFO #(.p1width(32'd120),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_gemm_params(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_gemm_params$D_IN),
					     .ENQ(ff_gemm_params$ENQ),
					     .DEQ(ff_gemm_params$DEQ),
					     .CLR(ff_gemm_params$CLR),
					     .D_OUT(ff_gemm_params$D_OUT),
					     .FULL_N(ff_gemm_params$FULL_N),
					     .EMPTY_N(ff_gemm_params$EMPTY_N));

  // submodule ff_gemm_queue
  SizedFIFO #(.p1width(32'd4),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_gemm_queue(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(ff_gemm_queue$D_IN),
					    .ENQ(ff_gemm_queue$ENQ),
					    .DEQ(ff_gemm_queue$DEQ),
					    .CLR(ff_gemm_queue$CLR),
					    .D_OUT(ff_gemm_queue$D_OUT),
					    .FULL_N(ff_gemm_queue$FULL_N),
					    .EMPTY_N(ff_gemm_queue$EMPTY_N));

  // submodule ff_gemm_to_alu
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) ff_gemm_to_alu(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_gemm_to_alu$D_IN),
					     .ENQ(ff_gemm_to_alu$ENQ),
					     .DEQ(ff_gemm_to_alu$DEQ),
					     .CLR(ff_gemm_to_alu$CLR),
					     .D_OUT(),
					     .FULL_N(ff_gemm_to_alu$FULL_N),
					     .EMPTY_N(ff_gemm_to_alu$EMPTY_N));

  // submodule ff_gemm_to_load
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) ff_gemm_to_load(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(ff_gemm_to_load$D_IN),
					      .ENQ(ff_gemm_to_load$ENQ),
					      .DEQ(ff_gemm_to_load$DEQ),
					      .CLR(ff_gemm_to_load$CLR),
					      .D_OUT(),
					      .FULL_N(ff_gemm_to_load$FULL_N),
					      .EMPTY_N(ff_gemm_to_load$EMPTY_N));

  // submodule ff_load_params
  SizedFIFO #(.p1width(32'd120),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_load_params(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_load_params$D_IN),
					     .ENQ(ff_load_params$ENQ),
					     .DEQ(ff_load_params$DEQ),
					     .CLR(ff_load_params$CLR),
					     .D_OUT(ff_load_params$D_OUT),
					     .FULL_N(ff_load_params$FULL_N),
					     .EMPTY_N(ff_load_params$EMPTY_N));

  // submodule ff_load_queue
  SizedFIFO #(.p1width(32'd4),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_load_queue(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(ff_load_queue$D_IN),
					    .ENQ(ff_load_queue$ENQ),
					    .DEQ(ff_load_queue$DEQ),
					    .CLR(ff_load_queue$CLR),
					    .D_OUT(ff_load_queue$D_OUT),
					    .FULL_N(ff_load_queue$FULL_N),
					    .EMPTY_N(ff_load_queue$EMPTY_N));

  // submodule ff_load_to_gemm
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) ff_load_to_gemm(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(ff_load_to_gemm$D_IN),
					      .ENQ(ff_load_to_gemm$ENQ),
					      .DEQ(ff_load_to_gemm$DEQ),
					      .CLR(ff_load_to_gemm$CLR),
					      .D_OUT(),
					      .FULL_N(ff_load_to_gemm$FULL_N),
					      .EMPTY_N(ff_load_to_gemm$EMPTY_N));

  // submodule ff_store_params
  SizedFIFO #(.p1width(32'd120),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_store_params(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(ff_store_params$D_IN),
					      .ENQ(ff_store_params$ENQ),
					      .DEQ(ff_store_params$DEQ),
					      .CLR(ff_store_params$CLR),
					      .D_OUT(ff_store_params$D_OUT),
					      .FULL_N(ff_store_params$FULL_N),
					      .EMPTY_N(ff_store_params$EMPTY_N));

  // submodule ff_store_queue
  SizedFIFO #(.p1width(32'd4),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(1'd1)) ff_store_queue(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ff_store_queue$D_IN),
					     .ENQ(ff_store_queue$ENQ),
					     .DEQ(ff_store_queue$DEQ),
					     .CLR(ff_store_queue$CLR),
					     .D_OUT(ff_store_queue$D_OUT),
					     .FULL_N(ff_store_queue$FULL_N),
					     .EMPTY_N(ff_store_queue$EMPTY_N));

  // submodule ff_store_to_alu
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) ff_store_to_alu(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(ff_store_to_alu$D_IN),
					      .ENQ(ff_store_to_alu$ENQ),
					      .DEQ(ff_store_to_alu$DEQ),
					      .CLR(ff_store_to_alu$CLR),
					      .D_OUT(),
					      .FULL_N(ff_store_to_alu$FULL_N),
					      .EMPTY_N(ff_store_to_alu$EMPTY_N));

  // submodule ff_alu_params
  assign ff_alu_params$D_IN = ifc_put_alu_params_put[119:0] ;
  assign ff_alu_params$ENQ = EN_ifc_put_alu_params_put ;
  assign ff_alu_params$DEQ = EN_ifc_get_alu_instruction_get ;
  assign ff_alu_params$CLR = 1'b0 ;

  // submodule ff_alu_queue
  assign ff_alu_queue$D_IN = ifc_put_alu_params_put[123:120] ;
  assign ff_alu_queue$ENQ = EN_ifc_put_alu_params_put ;
  assign ff_alu_queue$DEQ = EN_ifc_put_alu_complete_put ;
  assign ff_alu_queue$CLR = 1'b0 ;

  // submodule ff_alu_to_gemm
  assign ff_alu_to_gemm$D_IN = 1'd1 ;
  assign ff_alu_to_gemm$ENQ =
	     EN_ifc_put_alu_complete_put && ff_alu_queue$D_OUT[2] ;
  assign ff_alu_to_gemm$DEQ =
	     EN_ifc_get_gemm_instruction_get && ff_alu_to_gemm$EMPTY_N &&
	     ff_gemm_queue$D_OUT[1] ;
  assign ff_alu_to_gemm$CLR = 1'b0 ;

  // submodule ff_alu_to_store
  assign ff_alu_to_store$D_IN = 1'd1 ;
  assign ff_alu_to_store$ENQ =
	     EN_ifc_put_alu_complete_put && ff_alu_queue$D_OUT[0] ;
  assign ff_alu_to_store$DEQ =
	     EN_ifc_get_store_instruction_get && ff_alu_to_store$EMPTY_N &&
	     ff_store_queue$D_OUT[3] ;
  assign ff_alu_to_store$CLR = 1'b0 ;

  // submodule ff_gemm_params
  assign ff_gemm_params$D_IN = ifc_put_compute_params_put[119:0] ;
  assign ff_gemm_params$ENQ = EN_ifc_put_compute_params_put ;
  assign ff_gemm_params$DEQ = EN_ifc_get_gemm_instruction_get ;
  assign ff_gemm_params$CLR = 1'b0 ;

  // submodule ff_gemm_queue
  assign ff_gemm_queue$D_IN = ifc_put_compute_params_put[123:120] ;
  assign ff_gemm_queue$ENQ = EN_ifc_put_compute_params_put ;
  assign ff_gemm_queue$DEQ = EN_ifc_put_gemm_complete_put ;
  assign ff_gemm_queue$CLR = 1'b0 ;

  // submodule ff_gemm_to_alu
  assign ff_gemm_to_alu$D_IN = 1'd1 ;
  assign ff_gemm_to_alu$ENQ =
	     EN_ifc_put_gemm_complete_put && ff_gemm_queue$D_OUT[0] ;
  assign ff_gemm_to_alu$DEQ =
	     EN_ifc_get_alu_instruction_get && ff_gemm_to_alu$EMPTY_N &&
	     ff_alu_queue$D_OUT[3] ;
  assign ff_gemm_to_alu$CLR = 1'b0 ;

  // submodule ff_gemm_to_load
  assign ff_gemm_to_load$D_IN = 1'd1 ;
  assign ff_gemm_to_load$ENQ =
	     EN_ifc_put_gemm_complete_put && ff_gemm_queue$D_OUT[2] ;
  assign ff_gemm_to_load$DEQ =
	     EN_ifc_get_load_instruction_get && ff_gemm_to_load$EMPTY_N &&
	     ff_load_queue$D_OUT[1] ;
  assign ff_gemm_to_load$CLR = 1'b0 ;

  // submodule ff_load_params
  assign ff_load_params$D_IN = ifc_put_load_params_put[119:0] ;
  assign ff_load_params$ENQ = EN_ifc_put_load_params_put ;
  assign ff_load_params$DEQ = EN_ifc_get_load_instruction_get ;
  assign ff_load_params$CLR = 1'b0 ;

  // submodule ff_load_queue
  assign ff_load_queue$D_IN = ifc_put_load_params_put[123:120] ;
  assign ff_load_queue$ENQ = EN_ifc_put_load_params_put ;
  assign ff_load_queue$DEQ = EN_ifc_put_load_complete_put ;
  assign ff_load_queue$CLR = 1'b0 ;

  // submodule ff_load_to_gemm
  assign ff_load_to_gemm$D_IN = 1'd1 ;
  assign ff_load_to_gemm$ENQ =
	     EN_ifc_put_load_complete_put && ff_load_queue$D_OUT[0] ;
  assign ff_load_to_gemm$DEQ =
	     EN_ifc_get_gemm_instruction_get && ff_load_to_gemm$EMPTY_N &&
	     ff_gemm_queue$D_OUT[3] ;
  assign ff_load_to_gemm$CLR = 1'b0 ;

  // submodule ff_store_params
  assign ff_store_params$D_IN = ifc_put_store_params_put[119:0] ;
  assign ff_store_params$ENQ = EN_ifc_put_store_params_put ;
  assign ff_store_params$DEQ = EN_ifc_get_store_instruction_get ;
  assign ff_store_params$CLR = 1'b0 ;

  // submodule ff_store_queue
  assign ff_store_queue$D_IN = ifc_put_store_params_put[123:120] ;
  assign ff_store_queue$ENQ = EN_ifc_put_store_params_put ;
  assign ff_store_queue$DEQ = EN_ifc_put_store_complete_put ;
  assign ff_store_queue$CLR = 1'b0 ;

  // submodule ff_store_to_alu
  assign ff_store_to_alu$D_IN = 1'd1 ;
  assign ff_store_to_alu$ENQ =
	     EN_ifc_put_store_complete_put && ff_store_queue$D_OUT[2] ;
  assign ff_store_to_alu$DEQ =
	     EN_ifc_get_alu_instruction_get && ff_store_to_alu$EMPTY_N &&
	     ff_alu_queue$D_OUT[1] ;
  assign ff_store_to_alu$CLR = 1'b0 ;
endmodule  // mkdepend_resolver

