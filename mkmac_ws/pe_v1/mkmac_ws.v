//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Fri Jan 21 13:19:07 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_subifc_put_wgt_put         O     1 const
// RDY_subifc_put_inp_put         O     1 reg
// RDY_subifc_put_acc_put         O     1 reg
// subifc_get_acc_get             O    32
// RDY_subifc_get_acc_get         O     1
// subifc_get_wgt_get             O    16 reg
// RDY_subifc_get_wgt_get         O     1
// subifc_get_inp_get             O     8 reg
// RDY_subifc_get_inp_get         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// subifc_put_wgt_put             I    16 reg
// subifc_put_inp_put             I     8 reg
// subifc_put_acc_put             I    32 reg
// EN_subifc_put_wgt_put          I     1
// EN_subifc_put_inp_put          I     1
// EN_subifc_put_acc_put          I     1
// EN_subifc_get_acc_get          I     1
// EN_subifc_get_wgt_get          I     1 unused
// EN_subifc_get_inp_get          I     1 unused
//
// Combinational paths from inputs to outputs:
//   EN_subifc_get_acc_get -> RDY_subifc_get_inp_get
//   EN_subifc_get_acc_get -> subifc_get_inp_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkmac_ws(CLK,
		RST_N,

		subifc_put_wgt_put,
		EN_subifc_put_wgt_put,
		RDY_subifc_put_wgt_put,

		subifc_put_inp_put,
		EN_subifc_put_inp_put,
		RDY_subifc_put_inp_put,

		subifc_put_acc_put,
		EN_subifc_put_acc_put,
		RDY_subifc_put_acc_put,

		EN_subifc_get_acc_get,
		subifc_get_acc_get,
		RDY_subifc_get_acc_get,

		EN_subifc_get_wgt_get,
		subifc_get_wgt_get,
		RDY_subifc_get_wgt_get,

		EN_subifc_get_inp_get,
		subifc_get_inp_get,
		RDY_subifc_get_inp_get);
  parameter [7 : 0] coordinate = 8'b0;
  input  CLK;
  input  RST_N;

  // action method subifc_put_wgt_put
  input  [15 : 0] subifc_put_wgt_put;
  input  EN_subifc_put_wgt_put;
  output RDY_subifc_put_wgt_put;

  // action method subifc_put_inp_put
  input  [7 : 0] subifc_put_inp_put;
  input  EN_subifc_put_inp_put;
  output RDY_subifc_put_inp_put;

  // action method subifc_put_acc_put
  input  [31 : 0] subifc_put_acc_put;
  input  EN_subifc_put_acc_put;
  output RDY_subifc_put_acc_put;

  // actionvalue method subifc_get_acc_get
  input  EN_subifc_get_acc_get;
  output [31 : 0] subifc_get_acc_get;
  output RDY_subifc_get_acc_get;

  // actionvalue method subifc_get_wgt_get
  input  EN_subifc_get_wgt_get;
  output [15 : 0] subifc_get_wgt_get;
  output RDY_subifc_get_wgt_get;

  // actionvalue method subifc_get_inp_get
  input  EN_subifc_get_inp_get;
  output [7 : 0] subifc_get_inp_get;
  output RDY_subifc_get_inp_get;

  // signals for module outputs
  wire [31 : 0] subifc_get_acc_get;
  wire [15 : 0] subifc_get_wgt_get;
  wire [7 : 0] subifc_get_inp_get;
  wire RDY_subifc_get_acc_get,
       RDY_subifc_get_inp_get,
       RDY_subifc_get_wgt_get,
       RDY_subifc_put_acc_put,
       RDY_subifc_put_inp_put,
       RDY_subifc_put_wgt_put;

  // inlined wires
  wire inst_acc_output$whas;

  // register inst_rg_coord
  reg [7 : 0] inst_rg_coord;
  wire [7 : 0] inst_rg_coord$D_IN;
  wire inst_rg_coord$EN;

  // register inst_rg_counter
  reg [7 : 0] inst_rg_counter;
  wire [7 : 0] inst_rg_counter$D_IN;
  wire inst_rg_counter$EN;

  // register inst_rg_north
  reg [7 : 0] inst_rg_north;
  wire [7 : 0] inst_rg_north$D_IN;
  wire inst_rg_north$EN;

  // ports of submodule inst_ff_input_acc
  wire [31 : 0] inst_ff_input_acc$D_IN, inst_ff_input_acc$D_OUT;
  wire inst_ff_input_acc$CLR,
       inst_ff_input_acc$DEQ,
       inst_ff_input_acc$EMPTY_N,
       inst_ff_input_acc$ENQ,
       inst_ff_input_acc$FULL_N;

  // ports of submodule inst_ff_west
  wire [7 : 0] inst_ff_west$D_IN, inst_ff_west$D_OUT;
  wire inst_ff_west$CLR,
       inst_ff_west$DEQ,
       inst_ff_west$EMPTY_N,
       inst_ff_west$ENQ,
       inst_ff_west$FULL_N;

  // remaining internal signals
  wire [63 : 0] SEXT_inst_rg_north_MUL_SEXT_inst_ff_west_first___d9;

  // action method subifc_put_wgt_put
  assign RDY_subifc_put_wgt_put = 1'd1 ;

  // action method subifc_put_inp_put
  assign RDY_subifc_put_inp_put = inst_ff_west$FULL_N ;

  // action method subifc_put_acc_put
  assign RDY_subifc_put_acc_put = inst_ff_input_acc$FULL_N ;

  // actionvalue method subifc_get_acc_get
  assign subifc_get_acc_get =
	     inst_ff_input_acc$D_OUT +
	     SEXT_inst_rg_north_MUL_SEXT_inst_ff_west_first___d9[31:0] ;
  assign RDY_subifc_get_acc_get =
	     inst_ff_input_acc$EMPTY_N && inst_ff_west$EMPTY_N &&
	     inst_acc_output$whas ;

  // actionvalue method subifc_get_wgt_get
  assign subifc_get_wgt_get = { inst_rg_north, inst_rg_counter } ;
  assign RDY_subifc_get_wgt_get = inst_rg_counter < inst_rg_coord ;

  // actionvalue method subifc_get_inp_get
  assign subifc_get_inp_get = inst_ff_west$D_OUT ;
  assign RDY_subifc_get_inp_get = EN_subifc_get_acc_get ;

  // submodule inst_ff_input_acc
  FIFO2 #(.width(32'd32), .guarded(1'd1)) inst_ff_input_acc(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(inst_ff_input_acc$D_IN),
							    .ENQ(inst_ff_input_acc$ENQ),
							    .DEQ(inst_ff_input_acc$DEQ),
							    .CLR(inst_ff_input_acc$CLR),
							    .D_OUT(inst_ff_input_acc$D_OUT),
							    .FULL_N(inst_ff_input_acc$FULL_N),
							    .EMPTY_N(inst_ff_input_acc$EMPTY_N));

  // submodule inst_ff_west
  FIFO2 #(.width(32'd8), .guarded(1'd1)) inst_ff_west(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(inst_ff_west$D_IN),
						      .ENQ(inst_ff_west$ENQ),
						      .DEQ(inst_ff_west$DEQ),
						      .CLR(inst_ff_west$CLR),
						      .D_OUT(inst_ff_west$D_OUT),
						      .FULL_N(inst_ff_west$FULL_N),
						      .EMPTY_N(inst_ff_west$EMPTY_N));

  // inlined wires
  assign inst_acc_output$whas =
	     inst_ff_input_acc$EMPTY_N && inst_ff_west$EMPTY_N ;

  // register inst_rg_coord
  assign inst_rg_coord$D_IN = 8'h0 ;
  assign inst_rg_coord$EN = 1'b0 ;

  // register inst_rg_counter
  assign inst_rg_counter$D_IN = subifc_put_wgt_put[7:0] ;
  assign inst_rg_counter$EN = EN_subifc_put_wgt_put ;

  // register inst_rg_north
  assign inst_rg_north$D_IN = subifc_put_wgt_put[15:8] ;
  assign inst_rg_north$EN = EN_subifc_put_wgt_put ;

  // submodule inst_ff_input_acc
  assign inst_ff_input_acc$D_IN = subifc_put_acc_put ;
  assign inst_ff_input_acc$ENQ = EN_subifc_put_acc_put ;
  assign inst_ff_input_acc$DEQ = EN_subifc_get_acc_get ;
  assign inst_ff_input_acc$CLR = 1'b0 ;

  // submodule inst_ff_west
  assign inst_ff_west$D_IN = subifc_put_inp_put ;
  assign inst_ff_west$ENQ = EN_subifc_put_inp_put ;
  assign inst_ff_west$DEQ = EN_subifc_get_acc_get ;
  assign inst_ff_west$CLR = 1'b0 ;

  // remaining internal signals
  assign SEXT_inst_rg_north_MUL_SEXT_inst_ff_west_first___d9 =
	     { {24{inst_rg_north[7]}}, inst_rg_north } *
	     { {24{inst_ff_west$D_OUT[7]}}, inst_ff_west$D_OUT } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_rg_coord <= `BSV_ASSIGNMENT_DELAY coordinate;
	inst_rg_counter <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst_rg_north <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (inst_rg_coord$EN)
	  inst_rg_coord <= `BSV_ASSIGNMENT_DELAY inst_rg_coord$D_IN;
	if (inst_rg_counter$EN)
	  inst_rg_counter <= `BSV_ASSIGNMENT_DELAY inst_rg_counter$D_IN;
	if (inst_rg_north$EN)
	  inst_rg_north <= `BSV_ASSIGNMENT_DELAY inst_rg_north$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_rg_coord = 8'hAA;
    inst_rg_counter = 8'hAA;
    inst_rg_north = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkmac_ws

