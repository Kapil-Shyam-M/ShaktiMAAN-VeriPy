//
// Generated by Bluespec Compiler (build 8d454e4)
//
// On Tue Aug  3 21:35:11 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_subifc_put_compute_params_put  O     1
// subifc_get_compute_finish_get  O     1 const
// RDY_subifc_get_compute_finish_get  O     1
// get_inp_addr_0_get             O    17
// RDY_get_inp_addr_0_get         O     1
// get_inp_addr_1_get             O    17
// RDY_get_inp_addr_1_get         O     1
// RDY_put_inp_resp_0_put         O     1 reg
// RDY_put_inp_resp_1_put         O     1 reg
// get_wt_addr                    O    23 reg
// RDY_get_wt_addr                O     1
// RDY_put_wt_resp                O     1
// get_old_out_addr_0_get         O    17
// RDY_get_old_out_addr_0_get     O     1
// get_old_out_addr_1_get         O    17 reg
// RDY_get_old_out_addr_1_get     O     1
// RDY_put_old_out_resp_0_put     O     1
// RDY_put_old_out_resp_1_put     O     1
// get_new_output_data_0_get      O    32
// RDY_get_new_output_data_0_get  O     1
// get_new_output_data_1_get      O    32
// RDY_get_new_output_data_1_get  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// subifc_put_compute_params_put  I   120
// put_inp_resp_0_put             I     8 reg
// put_inp_resp_1_put             I     8 reg
// put_wt_resp_weights            I    16 reg
// put_old_out_resp_0_put         I    16
// put_old_out_resp_1_put         I    16
// EN_subifc_put_compute_params_put  I     1
// EN_put_inp_resp_0_put          I     1
// EN_put_inp_resp_1_put          I     1
// EN_put_wt_resp                 I     1
// EN_put_old_out_resp_0_put      I     1
// EN_put_old_out_resp_1_put      I     1
// EN_subifc_get_compute_finish_get  I     1
// EN_get_inp_addr_0_get          I     1 unused
// EN_get_inp_addr_1_get          I     1 unused
// EN_get_wt_addr                 I     1
// EN_get_old_out_addr_0_get      I     1 unused
// EN_get_old_out_addr_1_get      I     1 unused
// EN_get_new_output_data_0_get   I     1
// EN_get_new_output_data_1_get   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkgemm_Tb(CLK,
		 RST_N,

		 subifc_put_compute_params_put,
		 EN_subifc_put_compute_params_put,
		 RDY_subifc_put_compute_params_put,

		 EN_subifc_get_compute_finish_get,
		 subifc_get_compute_finish_get,
		 RDY_subifc_get_compute_finish_get,

		 EN_get_inp_addr_0_get,
		 get_inp_addr_0_get,
		 RDY_get_inp_addr_0_get,

		 EN_get_inp_addr_1_get,
		 get_inp_addr_1_get,
		 RDY_get_inp_addr_1_get,

		 put_inp_resp_0_put,
		 EN_put_inp_resp_0_put,
		 RDY_put_inp_resp_0_put,

		 put_inp_resp_1_put,
		 EN_put_inp_resp_1_put,
		 RDY_put_inp_resp_1_put,

		 EN_get_wt_addr,
		 get_wt_addr,
		 RDY_get_wt_addr,

		 put_wt_resp_weights,
		 EN_put_wt_resp,
		 RDY_put_wt_resp,

		 EN_get_old_out_addr_0_get,
		 get_old_out_addr_0_get,
		 RDY_get_old_out_addr_0_get,

		 EN_get_old_out_addr_1_get,
		 get_old_out_addr_1_get,
		 RDY_get_old_out_addr_1_get,

		 put_old_out_resp_0_put,
		 EN_put_old_out_resp_0_put,
		 RDY_put_old_out_resp_0_put,

		 put_old_out_resp_1_put,
		 EN_put_old_out_resp_1_put,
		 RDY_put_old_out_resp_1_put,

		 EN_get_new_output_data_0_get,
		 get_new_output_data_0_get,
		 RDY_get_new_output_data_0_get,

		 EN_get_new_output_data_1_get,
		 get_new_output_data_1_get,
		 RDY_get_new_output_data_1_get);
  input  CLK;
  input  RST_N;

  // action method subifc_put_compute_params_put
  input  [119 : 0] subifc_put_compute_params_put;
  input  EN_subifc_put_compute_params_put;
  output RDY_subifc_put_compute_params_put;

  // actionvalue method subifc_get_compute_finish_get
  input  EN_subifc_get_compute_finish_get;
  output subifc_get_compute_finish_get;
  output RDY_subifc_get_compute_finish_get;

  // actionvalue method get_inp_addr_0_get
  input  EN_get_inp_addr_0_get;
  output [16 : 0] get_inp_addr_0_get;
  output RDY_get_inp_addr_0_get;

  // actionvalue method get_inp_addr_1_get
  input  EN_get_inp_addr_1_get;
  output [16 : 0] get_inp_addr_1_get;
  output RDY_get_inp_addr_1_get;

  // action method put_inp_resp_0_put
  input  [7 : 0] put_inp_resp_0_put;
  input  EN_put_inp_resp_0_put;
  output RDY_put_inp_resp_0_put;

  // action method put_inp_resp_1_put
  input  [7 : 0] put_inp_resp_1_put;
  input  EN_put_inp_resp_1_put;
  output RDY_put_inp_resp_1_put;

  // actionvalue method get_wt_addr
  input  EN_get_wt_addr;
  output [22 : 0] get_wt_addr;
  output RDY_get_wt_addr;

  // action method put_wt_resp
  input  [15 : 0] put_wt_resp_weights;
  input  EN_put_wt_resp;
  output RDY_put_wt_resp;

  // actionvalue method get_old_out_addr_0_get
  input  EN_get_old_out_addr_0_get;
  output [16 : 0] get_old_out_addr_0_get;
  output RDY_get_old_out_addr_0_get;

  // actionvalue method get_old_out_addr_1_get
  input  EN_get_old_out_addr_1_get;
  output [16 : 0] get_old_out_addr_1_get;
  output RDY_get_old_out_addr_1_get;

  // action method put_old_out_resp_0_put
  input  [15 : 0] put_old_out_resp_0_put;
  input  EN_put_old_out_resp_0_put;
  output RDY_put_old_out_resp_0_put;

  // action method put_old_out_resp_1_put
  input  [15 : 0] put_old_out_resp_1_put;
  input  EN_put_old_out_resp_1_put;
  output RDY_put_old_out_resp_1_put;

  // actionvalue method get_new_output_data_0_get
  input  EN_get_new_output_data_0_get;
  output [31 : 0] get_new_output_data_0_get;
  output RDY_get_new_output_data_0_get;

  // actionvalue method get_new_output_data_1_get
  input  EN_get_new_output_data_1_get;
  output [31 : 0] get_new_output_data_1_get;
  output RDY_get_new_output_data_1_get;

  // signals for module outputs
  wire [31 : 0] get_new_output_data_0_get, get_new_output_data_1_get;
  wire [22 : 0] get_wt_addr;
  wire [16 : 0] get_inp_addr_0_get,
		get_inp_addr_1_get,
		get_old_out_addr_0_get,
		get_old_out_addr_1_get;
  wire RDY_get_inp_addr_0_get,
       RDY_get_inp_addr_1_get,
       RDY_get_new_output_data_0_get,
       RDY_get_new_output_data_1_get,
       RDY_get_old_out_addr_0_get,
       RDY_get_old_out_addr_1_get,
       RDY_get_wt_addr,
       RDY_put_inp_resp_0_put,
       RDY_put_inp_resp_1_put,
       RDY_put_old_out_resp_0_put,
       RDY_put_old_out_resp_1_put,
       RDY_put_wt_resp,
       RDY_subifc_get_compute_finish_get,
       RDY_subifc_put_compute_params_put,
       subifc_get_compute_finish_get;

  // inlined wires
  wire [15 : 0] inst1_systolic_intArray_0_0_acc_output$wget,
		inst1_systolic_intArray_0_1_acc_output$wget,
		inst1_systolic_intArray_1_0_acc_output$wget,
		inst1_systolic_intArray_1_1_acc_output$wget;
  wire inst1_systolic_intArray_0_0_acc_output$whas,
       inst1_systolic_intArray_0_0_wr_west$whas,
       inst1_systolic_intArray_0_1_acc_output$whas,
       inst1_systolic_intArray_0_1_wr_west$whas,
       inst1_systolic_intArray_1_0_acc_output$whas,
       inst1_systolic_intArray_1_1_acc_output$whas,
       inst1_wr_wt_req$whas;

  // register inst1_rg_h_cntr
  reg [7 : 0] inst1_rg_h_cntr;
  wire [7 : 0] inst1_rg_h_cntr$D_IN;
  wire inst1_rg_h_cntr$EN;

  // register inst1_rg_inp_addr_0
  reg [16 : 0] inst1_rg_inp_addr_0;
  wire [16 : 0] inst1_rg_inp_addr_0$D_IN;
  wire inst1_rg_inp_addr_0$EN;

  // register inst1_rg_inp_addr_1
  reg [16 : 0] inst1_rg_inp_addr_1;
  wire [16 : 0] inst1_rg_inp_addr_1$D_IN;
  wire inst1_rg_inp_addr_1$EN;

  // register inst1_rg_inp_col_addr
  reg [14 : 0] inst1_rg_inp_col_addr;
  wire [14 : 0] inst1_rg_inp_col_addr$D_IN;
  wire inst1_rg_inp_col_addr$EN;

  // register inst1_rg_inp_row_addr
  reg [14 : 0] inst1_rg_inp_row_addr;
  wire [14 : 0] inst1_rg_inp_row_addr$D_IN;
  wire inst1_rg_inp_row_addr$EN;

  // register inst1_rg_inp_triangle
  reg inst1_rg_inp_triangle;
  wire inst1_rg_inp_triangle$D_IN, inst1_rg_inp_triangle$EN;

  // register inst1_rg_new_out_addr_0
  reg [14 : 0] inst1_rg_new_out_addr_0;
  wire [14 : 0] inst1_rg_new_out_addr_0$D_IN;
  wire inst1_rg_new_out_addr_0$EN;

  // register inst1_rg_new_out_addr_1
  reg [14 : 0] inst1_rg_new_out_addr_1;
  wire [14 : 0] inst1_rg_new_out_addr_1$D_IN;
  wire inst1_rg_new_out_addr_1$EN;

  // register inst1_rg_new_out_cntr
  reg [7 : 0] inst1_rg_new_out_cntr;
  reg [7 : 0] inst1_rg_new_out_cntr$D_IN;
  wire inst1_rg_new_out_cntr$EN;

  // register inst1_rg_old_out_addr
  reg [14 : 0] inst1_rg_old_out_addr;
  wire [14 : 0] inst1_rg_old_out_addr$D_IN;
  wire inst1_rg_old_out_addr$EN;

  // register inst1_rg_old_out_req_0
  reg [16 : 0] inst1_rg_old_out_req_0;
  wire [16 : 0] inst1_rg_old_out_req_0$D_IN;
  wire inst1_rg_old_out_req_0$EN;

  // register inst1_rg_old_out_req_1
  reg [16 : 0] inst1_rg_old_out_req_1;
  wire [16 : 0] inst1_rg_old_out_req_1$D_IN;
  wire inst1_rg_old_out_req_1$EN;

  // register inst1_rg_op_traingle_cntr
  reg [7 : 0] inst1_rg_op_traingle_cntr;
  wire [7 : 0] inst1_rg_op_traingle_cntr$D_IN;
  wire inst1_rg_op_traingle_cntr$EN;

  // register inst1_rg_op_triangle
  reg inst1_rg_op_triangle;
  wire inst1_rg_op_triangle$D_IN, inst1_rg_op_triangle$EN;

  // register inst1_rg_params
  reg [120 : 0] inst1_rg_params;
  wire [120 : 0] inst1_rg_params$D_IN;
  wire inst1_rg_params$EN;

  // register inst1_rg_row_cntr
  reg [7 : 0] inst1_rg_row_cntr;
  wire [7 : 0] inst1_rg_row_cntr$D_IN;
  wire inst1_rg_row_cntr$EN;

  // register inst1_rg_valid_col_0
  reg inst1_rg_valid_col_0;
  wire inst1_rg_valid_col_0$D_IN, inst1_rg_valid_col_0$EN;

  // register inst1_rg_valid_col_1
  reg inst1_rg_valid_col_1;
  wire inst1_rg_valid_col_1$D_IN, inst1_rg_valid_col_1$EN;

  // register inst1_rg_valid_row_0
  reg inst1_rg_valid_row_0;
  wire inst1_rg_valid_row_0$D_IN, inst1_rg_valid_row_0$EN;

  // register inst1_rg_valid_row_1
  reg inst1_rg_valid_row_1;
  wire inst1_rg_valid_row_1$D_IN, inst1_rg_valid_row_1$EN;

  // register inst1_rg_w_cntr
  reg [7 : 0] inst1_rg_w_cntr;
  wire [7 : 0] inst1_rg_w_cntr$D_IN;
  wire inst1_rg_w_cntr$EN;

  // register inst1_rg_weightload
  reg inst1_rg_weightload;
  wire inst1_rg_weightload$D_IN, inst1_rg_weightload$EN;

  // register inst1_rg_weightload_req
  reg inst1_rg_weightload_req;
  wire inst1_rg_weightload_req$D_IN, inst1_rg_weightload_req$EN;

  // register inst1_rg_which_buffer
  reg inst1_rg_which_buffer;
  wire inst1_rg_which_buffer$D_IN, inst1_rg_which_buffer$EN;

  // register inst1_rg_wt_addr
  reg [14 : 0] inst1_rg_wt_addr;
  wire [14 : 0] inst1_rg_wt_addr$D_IN;
  wire inst1_rg_wt_addr$EN;

  // register inst1_rg_wt_cntr
  reg [7 : 0] inst1_rg_wt_cntr;
  wire [7 : 0] inst1_rg_wt_cntr$D_IN;
  wire inst1_rg_wt_cntr$EN;

  // register inst1_rg_zero_cntr_0
  reg [7 : 0] inst1_rg_zero_cntr_0;
  wire [7 : 0] inst1_rg_zero_cntr_0$D_IN;
  wire inst1_rg_zero_cntr_0$EN;

  // register inst1_rg_zero_cntr_1
  reg [7 : 0] inst1_rg_zero_cntr_1;
  wire [7 : 0] inst1_rg_zero_cntr_1$D_IN;
  wire inst1_rg_zero_cntr_1$EN;

  // register inst1_systolic_intArray_0_0_rg_coord
  reg [7 : 0] inst1_systolic_intArray_0_0_rg_coord;
  wire [7 : 0] inst1_systolic_intArray_0_0_rg_coord$D_IN;
  wire inst1_systolic_intArray_0_0_rg_coord$EN;

  // register inst1_systolic_intArray_0_0_rg_counter
  reg [7 : 0] inst1_systolic_intArray_0_0_rg_counter;
  wire [7 : 0] inst1_systolic_intArray_0_0_rg_counter$D_IN;
  wire inst1_systolic_intArray_0_0_rg_counter$EN;

  // register inst1_systolic_intArray_0_0_rg_north
  reg [7 : 0] inst1_systolic_intArray_0_0_rg_north;
  wire [7 : 0] inst1_systolic_intArray_0_0_rg_north$D_IN;
  wire inst1_systolic_intArray_0_0_rg_north$EN;

  // register inst1_systolic_intArray_0_1_rg_coord
  reg [7 : 0] inst1_systolic_intArray_0_1_rg_coord;
  wire [7 : 0] inst1_systolic_intArray_0_1_rg_coord$D_IN;
  wire inst1_systolic_intArray_0_1_rg_coord$EN;

  // register inst1_systolic_intArray_0_1_rg_counter
  reg [7 : 0] inst1_systolic_intArray_0_1_rg_counter;
  wire [7 : 0] inst1_systolic_intArray_0_1_rg_counter$D_IN;
  wire inst1_systolic_intArray_0_1_rg_counter$EN;

  // register inst1_systolic_intArray_0_1_rg_north
  reg [7 : 0] inst1_systolic_intArray_0_1_rg_north;
  wire [7 : 0] inst1_systolic_intArray_0_1_rg_north$D_IN;
  wire inst1_systolic_intArray_0_1_rg_north$EN;

  // register inst1_systolic_intArray_1_0_rg_coord
  reg [7 : 0] inst1_systolic_intArray_1_0_rg_coord;
  wire [7 : 0] inst1_systolic_intArray_1_0_rg_coord$D_IN;
  wire inst1_systolic_intArray_1_0_rg_coord$EN;

  // register inst1_systolic_intArray_1_0_rg_counter
  reg [7 : 0] inst1_systolic_intArray_1_0_rg_counter;
  wire [7 : 0] inst1_systolic_intArray_1_0_rg_counter$D_IN;
  wire inst1_systolic_intArray_1_0_rg_counter$EN;

  // register inst1_systolic_intArray_1_0_rg_north
  reg [7 : 0] inst1_systolic_intArray_1_0_rg_north;
  wire [7 : 0] inst1_systolic_intArray_1_0_rg_north$D_IN;
  wire inst1_systolic_intArray_1_0_rg_north$EN;

  // register inst1_systolic_intArray_1_1_rg_coord
  reg [7 : 0] inst1_systolic_intArray_1_1_rg_coord;
  wire [7 : 0] inst1_systolic_intArray_1_1_rg_coord$D_IN;
  wire inst1_systolic_intArray_1_1_rg_coord$EN;

  // register inst1_systolic_intArray_1_1_rg_counter
  reg [7 : 0] inst1_systolic_intArray_1_1_rg_counter;
  wire [7 : 0] inst1_systolic_intArray_1_1_rg_counter$D_IN;
  wire inst1_systolic_intArray_1_1_rg_counter$EN;

  // register inst1_systolic_intArray_1_1_rg_north
  reg [7 : 0] inst1_systolic_intArray_1_1_rg_north;
  wire [7 : 0] inst1_systolic_intArray_1_1_rg_north$D_IN;
  wire inst1_systolic_intArray_1_1_rg_north$EN;

  // ports of submodule inst1_ff_inp_count
  wire [7 : 0] inst1_ff_inp_count$D_IN;
  wire inst1_ff_inp_count$CLR, inst1_ff_inp_count$DEQ, inst1_ff_inp_count$ENQ;

  // ports of submodule inst1_ff_wt_coord
  wire [7 : 0] inst1_ff_wt_coord$D_IN, inst1_ff_wt_coord$D_OUT;
  wire inst1_ff_wt_coord$CLR,
       inst1_ff_wt_coord$DEQ,
       inst1_ff_wt_coord$EMPTY_N,
       inst1_ff_wt_coord$ENQ,
       inst1_ff_wt_coord$FULL_N;

  // ports of submodule inst1_systolic_intArray_0_0_ff_input_acc
  wire [15 : 0] inst1_systolic_intArray_0_0_ff_input_acc$D_IN,
		inst1_systolic_intArray_0_0_ff_input_acc$D_OUT;
  wire inst1_systolic_intArray_0_0_ff_input_acc$CLR,
       inst1_systolic_intArray_0_0_ff_input_acc$DEQ,
       inst1_systolic_intArray_0_0_ff_input_acc$EMPTY_N,
       inst1_systolic_intArray_0_0_ff_input_acc$ENQ,
       inst1_systolic_intArray_0_0_ff_input_acc$FULL_N;

  // ports of submodule inst1_systolic_intArray_0_0_ff_west
  wire [7 : 0] inst1_systolic_intArray_0_0_ff_west$D_IN,
	       inst1_systolic_intArray_0_0_ff_west$D_OUT;
  wire inst1_systolic_intArray_0_0_ff_west$CLR,
       inst1_systolic_intArray_0_0_ff_west$DEQ,
       inst1_systolic_intArray_0_0_ff_west$EMPTY_N,
       inst1_systolic_intArray_0_0_ff_west$ENQ,
       inst1_systolic_intArray_0_0_ff_west$FULL_N;

  // ports of submodule inst1_systolic_intArray_0_1_ff_input_acc
  wire [15 : 0] inst1_systolic_intArray_0_1_ff_input_acc$D_IN,
		inst1_systolic_intArray_0_1_ff_input_acc$D_OUT;
  wire inst1_systolic_intArray_0_1_ff_input_acc$CLR,
       inst1_systolic_intArray_0_1_ff_input_acc$DEQ,
       inst1_systolic_intArray_0_1_ff_input_acc$EMPTY_N,
       inst1_systolic_intArray_0_1_ff_input_acc$ENQ,
       inst1_systolic_intArray_0_1_ff_input_acc$FULL_N;

  // ports of submodule inst1_systolic_intArray_0_1_ff_west
  wire [7 : 0] inst1_systolic_intArray_0_1_ff_west$D_IN,
	       inst1_systolic_intArray_0_1_ff_west$D_OUT;
  wire inst1_systolic_intArray_0_1_ff_west$CLR,
       inst1_systolic_intArray_0_1_ff_west$DEQ,
       inst1_systolic_intArray_0_1_ff_west$EMPTY_N,
       inst1_systolic_intArray_0_1_ff_west$ENQ,
       inst1_systolic_intArray_0_1_ff_west$FULL_N;

  // ports of submodule inst1_systolic_intArray_1_0_ff_input_acc
  wire [15 : 0] inst1_systolic_intArray_1_0_ff_input_acc$D_IN,
		inst1_systolic_intArray_1_0_ff_input_acc$D_OUT;
  wire inst1_systolic_intArray_1_0_ff_input_acc$CLR,
       inst1_systolic_intArray_1_0_ff_input_acc$DEQ,
       inst1_systolic_intArray_1_0_ff_input_acc$EMPTY_N,
       inst1_systolic_intArray_1_0_ff_input_acc$ENQ,
       inst1_systolic_intArray_1_0_ff_input_acc$FULL_N;

  // ports of submodule inst1_systolic_intArray_1_0_ff_west
  wire [7 : 0] inst1_systolic_intArray_1_0_ff_west$D_IN,
	       inst1_systolic_intArray_1_0_ff_west$D_OUT;
  wire inst1_systolic_intArray_1_0_ff_west$CLR,
       inst1_systolic_intArray_1_0_ff_west$DEQ,
       inst1_systolic_intArray_1_0_ff_west$EMPTY_N,
       inst1_systolic_intArray_1_0_ff_west$ENQ,
       inst1_systolic_intArray_1_0_ff_west$FULL_N;

  // ports of submodule inst1_systolic_intArray_1_1_ff_input_acc
  wire [15 : 0] inst1_systolic_intArray_1_1_ff_input_acc$D_IN,
		inst1_systolic_intArray_1_1_ff_input_acc$D_OUT;
  wire inst1_systolic_intArray_1_1_ff_input_acc$CLR,
       inst1_systolic_intArray_1_1_ff_input_acc$DEQ,
       inst1_systolic_intArray_1_1_ff_input_acc$EMPTY_N,
       inst1_systolic_intArray_1_1_ff_input_acc$ENQ,
       inst1_systolic_intArray_1_1_ff_input_acc$FULL_N;

  // ports of submodule inst1_systolic_intArray_1_1_ff_west
  wire [7 : 0] inst1_systolic_intArray_1_1_ff_west$D_IN,
	       inst1_systolic_intArray_1_1_ff_west$D_OUT;
  wire inst1_systolic_intArray_1_1_ff_west$CLR,
       inst1_systolic_intArray_1_1_ff_west$DEQ,
       inst1_systolic_intArray_1_1_ff_west$EMPTY_N,
       inst1_systolic_intArray_1_1_ff_west$ENQ,
       inst1_systolic_intArray_1_1_ff_west$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_inst1_rl_send_init_acc_zero,
       WILL_FIRE_RL_inst1_rl_send_init_acc_zero_1;

  // inputs to muxes for submodule ports
  wire [120 : 0] MUX_inst1_rg_params$write_1__VAL_2;
  wire [14 : 0] MUX_inst1_rg_inp_col_addr$write_1__VAL_1,
		MUX_inst1_rg_new_out_addr_0$write_1__VAL_2,
		MUX_inst1_rg_new_out_addr_1$write_1__VAL_2,
		MUX_inst1_rg_old_out_addr$write_1__VAL_2,
		MUX_inst1_rg_wt_addr$write_1__VAL_1,
		MUX_inst1_rg_wt_addr$write_1__VAL_2;
  wire [7 : 0] MUX_inst1_rg_h_cntr$write_1__VAL_1,
	       MUX_inst1_rg_new_out_cntr$write_1__VAL_2,
	       MUX_inst1_rg_row_cntr$write_1__VAL_1,
	       MUX_inst1_rg_w_cntr$write_1__VAL_1,
	       MUX_inst1_rg_wt_cntr$write_1__VAL_1,
	       MUX_inst1_rg_zero_cntr_0$write_1__VAL_2,
	       MUX_inst1_rg_zero_cntr_1$write_1__VAL_2;
  wire MUX_inst1_rg_h_cntr$write_1__SEL_1,
       MUX_inst1_rg_inp_col_addr$write_1__SEL_1,
       MUX_inst1_rg_inp_triangle$write_1__SEL_1,
       MUX_inst1_rg_new_out_cntr$write_1__SEL_2,
       MUX_inst1_rg_new_out_cntr$write_1__SEL_3,
       MUX_inst1_rg_weightload$write_1__SEL_1,
       MUX_inst1_rg_weightload_req$write_1__SEL_1,
       MUX_inst1_rg_zero_cntr_1$write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h9050;
  // synopsys translate_on

  // remaining internal signals
  wire [31 : 0] _0_CONCAT_inst1_systolic_intArray_0_0_rg_north__ETC___d8,
		_0_CONCAT_inst1_systolic_intArray_0_1_rg_north__ETC___d19,
		_0_CONCAT_inst1_systolic_intArray_1_0_rg_north__ETC___d30,
		_0_CONCAT_inst1_systolic_intArray_1_1_rg_north__ETC___d41;
  wire [15 : 0] subifc_put_compute_params_put_BITS_66_TO_59_89_ETC___d191;
  wire [14 : 0] lv_addr__h6749, x__h6855, x__h8120, y__h8123;
  wire [7 : 0] x__h10230,
	       x__h6830,
	       x__h7067,
	       x__h7084,
	       x__h7097,
	       x__h7099,
	       y__h6500,
	       y__h6561,
	       y__h7044,
	       y__h7061,
	       y__h7068,
	       y__h7098;
  wire NOT_inst1_rg_params_1_BITS_50_TO_43_06_ULE_1_17___d218,
       inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110,
       inst1_rg_h_cntr_07_ULT_0_CONCAT_inst1_rg_param_ETC___d147,
       inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114,
       inst1_rg_wt_cntr_99_EQ_inst1_rg_params_1_BITS__ETC___d204;

  // action method subifc_put_compute_params_put
  assign RDY_subifc_put_compute_params_put = !inst1_rg_params[120] ;

  // actionvalue method subifc_get_compute_finish_get
  assign subifc_get_compute_finish_get = 1'd1 ;
  assign RDY_subifc_get_compute_finish_get =
	     inst1_rg_params[120] && inst1_rg_new_out_cntr == 8'd0 ;

  // actionvalue method get_inp_addr_0_get
  assign get_inp_addr_0_get =
	     { inst1_rg_inp_col_addr,
	       inst1_rg_inp_triangle,
	       inst1_rg_h_cntr_07_ULT_0_CONCAT_inst1_rg_param_ETC___d147 ||
	       x__h7097 < y__h7098 } ;
  assign RDY_get_inp_addr_0_get = RDY_get_inp_addr_1_get ;

  // actionvalue method get_inp_addr_1_get
  assign get_inp_addr_1_get =
	     { inst1_rg_inp_addr_0[16:1],
	       inst1_rg_inp_addr_0[0] ||
	       inst1_rg_inp_addr_0[1] && inst1_rg_params[58:51] <= 8'd1 } ;
  assign RDY_get_inp_addr_1_get =
	     inst1_rg_params[120] && !inst1_rg_weightload &&
	     inst1_rg_row_cntr != 8'd0 ;

  // action method put_inp_resp_0_put
  assign RDY_put_inp_resp_0_put = inst1_systolic_intArray_0_0_ff_west$FULL_N ;

  // action method put_inp_resp_1_put
  assign RDY_put_inp_resp_1_put = inst1_systolic_intArray_1_0_ff_west$FULL_N ;

  // actionvalue method get_wt_addr
  assign get_wt_addr = { inst1_rg_wt_addr, inst1_rg_params[50:43] } ;
  assign RDY_get_wt_addr =
	     inst1_rg_params[120] &&
	     inst1_rg_wt_cntr < inst1_rg_params[58:51] &&
	     inst1_ff_wt_coord$FULL_N &&
	     inst1_wr_wt_req$whas ;

  // action method put_wt_resp
  assign RDY_put_wt_resp =
	     inst1_rg_params[120] && inst1_rg_weightload &&
	     inst1_ff_wt_coord$EMPTY_N ;

  // actionvalue method get_old_out_addr_0_get
  assign get_old_out_addr_0_get =
	     { inst1_rg_old_out_addr, inst1_rg_op_triangle, 1'h0 } ;
  assign RDY_get_old_out_addr_0_get =
	     inst1_rg_params[120] && inst1_rg_params[18] &&
	     inst1_rg_valid_col_0 &&
	     RDY_get_inp_addr_1_get ;

  // actionvalue method get_old_out_addr_1_get
  assign get_old_out_addr_1_get = inst1_rg_old_out_req_0 ;
  assign RDY_get_old_out_addr_1_get =
	     inst1_rg_params[120] && inst1_rg_params[18] &&
	     inst1_rg_valid_col_1 &&
	     RDY_get_inp_addr_1_get ;

  // action method put_old_out_resp_0_put
  assign RDY_put_old_out_resp_0_put =
	     inst1_rg_params[120] && inst1_rg_params[18] &&
	     inst1_systolic_intArray_0_0_ff_input_acc$FULL_N ;

  // action method put_old_out_resp_1_put
  assign RDY_put_old_out_resp_1_put =
	     inst1_rg_params[120] && inst1_rg_params[18] &&
	     inst1_systolic_intArray_0_1_ff_input_acc$FULL_N ;

  // actionvalue method get_new_output_data_0_get
  assign get_new_output_data_0_get =
	     { inst1_rg_new_out_addr_0,
	       inst1_systolic_intArray_1_0_acc_output$wget,
	       inst1_rg_which_buffer } ;
  assign RDY_get_new_output_data_0_get =
	     inst1_rg_valid_col_0 && inst1_rg_new_out_cntr != 8'd0 &&
	     inst1_systolic_intArray_1_0_ff_west$EMPTY_N &&
	     inst1_systolic_intArray_1_0_ff_input_acc$EMPTY_N &&
	     inst1_systolic_intArray_1_0_acc_output$whas ;

  // actionvalue method get_new_output_data_1_get
  assign get_new_output_data_1_get =
	     { inst1_rg_new_out_addr_1,
	       inst1_systolic_intArray_1_1_acc_output$wget,
	       inst1_rg_which_buffer } ;
  assign RDY_get_new_output_data_1_get =
	     inst1_rg_valid_col_1 && inst1_rg_new_out_cntr != 8'd0 &&
	     inst1_systolic_intArray_1_1_ff_west$EMPTY_N &&
	     inst1_systolic_intArray_1_1_ff_input_acc$EMPTY_N &&
	     inst1_systolic_intArray_1_1_acc_output$whas ;

  // submodule inst1_ff_inp_count
  FIFO2 #(.width(32'd8), .guarded(32'd1)) inst1_ff_inp_count(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(inst1_ff_inp_count$D_IN),
							     .ENQ(inst1_ff_inp_count$ENQ),
							     .DEQ(inst1_ff_inp_count$DEQ),
							     .CLR(inst1_ff_inp_count$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule inst1_ff_wt_coord
  FIFO2 #(.width(32'd8), .guarded(32'd1)) inst1_ff_wt_coord(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(inst1_ff_wt_coord$D_IN),
							    .ENQ(inst1_ff_wt_coord$ENQ),
							    .DEQ(inst1_ff_wt_coord$DEQ),
							    .CLR(inst1_ff_wt_coord$CLR),
							    .D_OUT(inst1_ff_wt_coord$D_OUT),
							    .FULL_N(inst1_ff_wt_coord$FULL_N),
							    .EMPTY_N(inst1_ff_wt_coord$EMPTY_N));

  // submodule inst1_systolic_intArray_0_0_ff_input_acc
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) inst1_systolic_intArray_0_0_ff_input_acc(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(inst1_systolic_intArray_0_0_ff_input_acc$D_IN),
								    .ENQ(inst1_systolic_intArray_0_0_ff_input_acc$ENQ),
								    .DEQ(inst1_systolic_intArray_0_0_ff_input_acc$DEQ),
								    .CLR(inst1_systolic_intArray_0_0_ff_input_acc$CLR),
								    .D_OUT(inst1_systolic_intArray_0_0_ff_input_acc$D_OUT),
								    .FULL_N(inst1_systolic_intArray_0_0_ff_input_acc$FULL_N),
								    .EMPTY_N(inst1_systolic_intArray_0_0_ff_input_acc$EMPTY_N));

  // submodule inst1_systolic_intArray_0_0_ff_west
  FIFO2 #(.width(32'd8),
	  .guarded(32'd1)) inst1_systolic_intArray_0_0_ff_west(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(inst1_systolic_intArray_0_0_ff_west$D_IN),
							       .ENQ(inst1_systolic_intArray_0_0_ff_west$ENQ),
							       .DEQ(inst1_systolic_intArray_0_0_ff_west$DEQ),
							       .CLR(inst1_systolic_intArray_0_0_ff_west$CLR),
							       .D_OUT(inst1_systolic_intArray_0_0_ff_west$D_OUT),
							       .FULL_N(inst1_systolic_intArray_0_0_ff_west$FULL_N),
							       .EMPTY_N(inst1_systolic_intArray_0_0_ff_west$EMPTY_N));

  // submodule inst1_systolic_intArray_0_1_ff_input_acc
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) inst1_systolic_intArray_0_1_ff_input_acc(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(inst1_systolic_intArray_0_1_ff_input_acc$D_IN),
								    .ENQ(inst1_systolic_intArray_0_1_ff_input_acc$ENQ),
								    .DEQ(inst1_systolic_intArray_0_1_ff_input_acc$DEQ),
								    .CLR(inst1_systolic_intArray_0_1_ff_input_acc$CLR),
								    .D_OUT(inst1_systolic_intArray_0_1_ff_input_acc$D_OUT),
								    .FULL_N(inst1_systolic_intArray_0_1_ff_input_acc$FULL_N),
								    .EMPTY_N(inst1_systolic_intArray_0_1_ff_input_acc$EMPTY_N));

  // submodule inst1_systolic_intArray_0_1_ff_west
  FIFO2 #(.width(32'd8),
	  .guarded(32'd1)) inst1_systolic_intArray_0_1_ff_west(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(inst1_systolic_intArray_0_1_ff_west$D_IN),
							       .ENQ(inst1_systolic_intArray_0_1_ff_west$ENQ),
							       .DEQ(inst1_systolic_intArray_0_1_ff_west$DEQ),
							       .CLR(inst1_systolic_intArray_0_1_ff_west$CLR),
							       .D_OUT(inst1_systolic_intArray_0_1_ff_west$D_OUT),
							       .FULL_N(inst1_systolic_intArray_0_1_ff_west$FULL_N),
							       .EMPTY_N(inst1_systolic_intArray_0_1_ff_west$EMPTY_N));

  // submodule inst1_systolic_intArray_1_0_ff_input_acc
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) inst1_systolic_intArray_1_0_ff_input_acc(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(inst1_systolic_intArray_1_0_ff_input_acc$D_IN),
								    .ENQ(inst1_systolic_intArray_1_0_ff_input_acc$ENQ),
								    .DEQ(inst1_systolic_intArray_1_0_ff_input_acc$DEQ),
								    .CLR(inst1_systolic_intArray_1_0_ff_input_acc$CLR),
								    .D_OUT(inst1_systolic_intArray_1_0_ff_input_acc$D_OUT),
								    .FULL_N(inst1_systolic_intArray_1_0_ff_input_acc$FULL_N),
								    .EMPTY_N(inst1_systolic_intArray_1_0_ff_input_acc$EMPTY_N));

  // submodule inst1_systolic_intArray_1_0_ff_west
  FIFO2 #(.width(32'd8),
	  .guarded(32'd1)) inst1_systolic_intArray_1_0_ff_west(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(inst1_systolic_intArray_1_0_ff_west$D_IN),
							       .ENQ(inst1_systolic_intArray_1_0_ff_west$ENQ),
							       .DEQ(inst1_systolic_intArray_1_0_ff_west$DEQ),
							       .CLR(inst1_systolic_intArray_1_0_ff_west$CLR),
							       .D_OUT(inst1_systolic_intArray_1_0_ff_west$D_OUT),
							       .FULL_N(inst1_systolic_intArray_1_0_ff_west$FULL_N),
							       .EMPTY_N(inst1_systolic_intArray_1_0_ff_west$EMPTY_N));

  // submodule inst1_systolic_intArray_1_1_ff_input_acc
  FIFO2 #(.width(32'd16),
	  .guarded(32'd1)) inst1_systolic_intArray_1_1_ff_input_acc(.RST(RST_N),
								    .CLK(CLK),
								    .D_IN(inst1_systolic_intArray_1_1_ff_input_acc$D_IN),
								    .ENQ(inst1_systolic_intArray_1_1_ff_input_acc$ENQ),
								    .DEQ(inst1_systolic_intArray_1_1_ff_input_acc$DEQ),
								    .CLR(inst1_systolic_intArray_1_1_ff_input_acc$CLR),
								    .D_OUT(inst1_systolic_intArray_1_1_ff_input_acc$D_OUT),
								    .FULL_N(inst1_systolic_intArray_1_1_ff_input_acc$FULL_N),
								    .EMPTY_N(inst1_systolic_intArray_1_1_ff_input_acc$EMPTY_N));

  // submodule inst1_systolic_intArray_1_1_ff_west
  FIFO2 #(.width(32'd8),
	  .guarded(32'd1)) inst1_systolic_intArray_1_1_ff_west(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(inst1_systolic_intArray_1_1_ff_west$D_IN),
							       .ENQ(inst1_systolic_intArray_1_1_ff_west$ENQ),
							       .DEQ(inst1_systolic_intArray_1_1_ff_west$DEQ),
							       .CLR(inst1_systolic_intArray_1_1_ff_west$CLR),
							       .D_OUT(inst1_systolic_intArray_1_1_ff_west$D_OUT),
							       .FULL_N(inst1_systolic_intArray_1_1_ff_west$FULL_N),
							       .EMPTY_N(inst1_systolic_intArray_1_1_ff_west$EMPTY_N));

  // rule RL_inst1_rl_send_init_acc_zero
  assign WILL_FIRE_RL_inst1_rl_send_init_acc_zero =
	     inst1_systolic_intArray_0_0_ff_input_acc$FULL_N &&
	     inst1_rg_params[120] &&
	     !inst1_rg_weightload &&
	     inst1_rg_zero_cntr_0 != 8'd0 &&
	     !inst1_rg_params[18] &&
	     inst1_rg_valid_col_0 ;

  // rule RL_inst1_rl_send_init_acc_zero_1
  assign WILL_FIRE_RL_inst1_rl_send_init_acc_zero_1 =
	     inst1_systolic_intArray_0_1_ff_input_acc$FULL_N &&
	     inst1_rg_params[120] &&
	     !inst1_rg_weightload &&
	     inst1_rg_zero_cntr_1 != 8'd0 &&
	     !inst1_rg_params[18] &&
	     inst1_rg_valid_col_1 ;

  // inputs to muxes for submodule ports
  assign MUX_inst1_rg_h_cntr$write_1__SEL_1 =
	     RDY_get_inp_addr_1_get &&
	     !inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 &&
	     inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 ;
  assign MUX_inst1_rg_inp_col_addr$write_1__SEL_1 =
	     RDY_get_inp_addr_1_get &&
	     (!inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 ||
	      !inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114) ;
  assign MUX_inst1_rg_inp_triangle$write_1__SEL_1 =
	     RDY_get_inp_addr_1_get &&
	     inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 &&
	     inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 ;
  assign MUX_inst1_rg_new_out_cntr$write_1__SEL_2 =
	     EN_get_new_output_data_1_get && inst1_rg_params[50:43] == 8'd2 ;
  assign MUX_inst1_rg_new_out_cntr$write_1__SEL_3 =
	     EN_get_new_output_data_0_get && inst1_rg_params[50:43] == 8'd1 ;
  assign MUX_inst1_rg_weightload$write_1__SEL_1 =
	     EN_put_wt_resp && inst1_ff_wt_coord$D_OUT == 8'd1 ;
  assign MUX_inst1_rg_weightload_req$write_1__SEL_1 =
	     EN_get_wt_addr &&
	     inst1_rg_wt_cntr_99_EQ_inst1_rg_params_1_BITS__ETC___d204 ;
  assign MUX_inst1_rg_zero_cntr_1$write_1__SEL_1 =
	     EN_subifc_put_compute_params_put &&
	     !subifc_put_compute_params_put[18] ;
  assign MUX_inst1_rg_h_cntr$write_1__VAL_1 = inst1_rg_h_cntr + 8'd1 ;
  assign MUX_inst1_rg_inp_col_addr$write_1__VAL_1 =
	     inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 ?
	       lv_addr__h6749 :
	       x__h6855 ;
  assign MUX_inst1_rg_new_out_addr_0$write_1__VAL_2 =
	     inst1_rg_new_out_addr_0 + 15'd1 ;
  assign MUX_inst1_rg_new_out_addr_1$write_1__VAL_2 =
	     inst1_rg_new_out_addr_1 + 15'd1 ;
  assign MUX_inst1_rg_new_out_cntr$write_1__VAL_2 =
	     inst1_rg_new_out_cntr - 8'd1 ;
  assign MUX_inst1_rg_old_out_addr$write_1__VAL_2 =
	     inst1_rg_old_out_addr + 15'd1 ;
  assign MUX_inst1_rg_params$write_1__VAL_2 =
	     { 1'd1, subifc_put_compute_params_put } ;
  assign MUX_inst1_rg_row_cntr$write_1__VAL_1 =
	     (inst1_rg_row_cntr == 8'd0) ?
	       inst1_rg_row_cntr :
	       inst1_rg_row_cntr - 8'd1 ;
  assign MUX_inst1_rg_w_cntr$write_1__VAL_1 =
	     inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 ?
	       8'd0 :
	       x__h6830 ;
  assign MUX_inst1_rg_wt_addr$write_1__VAL_1 = x__h8120 - 15'd1 ;
  assign MUX_inst1_rg_wt_addr$write_1__VAL_2 = inst1_rg_wt_addr - 15'd1 ;
  assign MUX_inst1_rg_wt_cntr$write_1__VAL_1 = inst1_rg_wt_cntr + 8'd1 ;
  assign MUX_inst1_rg_zero_cntr_0$write_1__VAL_2 =
	     inst1_rg_zero_cntr_0 - 8'd1 ;
  assign MUX_inst1_rg_zero_cntr_1$write_1__VAL_2 =
	     inst1_rg_zero_cntr_1 - 8'd1 ;

  // inlined wires
  assign inst1_wr_wt_req$whas =
	     inst1_rg_params[120] && inst1_rg_weightload_req ;
  assign inst1_systolic_intArray_0_0_wr_west$whas =
	     inst1_systolic_intArray_0_0_ff_west$EMPTY_N &&
	     inst1_systolic_intArray_0_0_ff_input_acc$EMPTY_N &&
	     inst1_systolic_intArray_0_0_acc_output$whas &&
	     inst1_systolic_intArray_1_0_ff_input_acc$FULL_N ;
  assign inst1_systolic_intArray_0_0_acc_output$wget =
	     _0_CONCAT_inst1_systolic_intArray_0_0_rg_north__ETC___d8[15:0] +
	     inst1_systolic_intArray_0_0_ff_input_acc$D_OUT ;
  assign inst1_systolic_intArray_0_0_acc_output$whas =
	     inst1_systolic_intArray_0_0_ff_west$EMPTY_N &&
	     inst1_systolic_intArray_0_0_ff_input_acc$EMPTY_N ;
  assign inst1_systolic_intArray_0_1_wr_west$whas =
	     inst1_systolic_intArray_0_1_ff_west$EMPTY_N &&
	     inst1_systolic_intArray_0_1_ff_input_acc$EMPTY_N &&
	     inst1_systolic_intArray_0_1_acc_output$whas &&
	     inst1_systolic_intArray_1_1_ff_input_acc$FULL_N ;
  assign inst1_systolic_intArray_0_1_acc_output$wget =
	     _0_CONCAT_inst1_systolic_intArray_0_1_rg_north__ETC___d19[15:0] +
	     inst1_systolic_intArray_0_1_ff_input_acc$D_OUT ;
  assign inst1_systolic_intArray_0_1_acc_output$whas =
	     inst1_systolic_intArray_0_1_ff_west$EMPTY_N &&
	     inst1_systolic_intArray_0_1_ff_input_acc$EMPTY_N ;
  assign inst1_systolic_intArray_1_0_acc_output$wget =
	     _0_CONCAT_inst1_systolic_intArray_1_0_rg_north__ETC___d30[15:0] +
	     inst1_systolic_intArray_1_0_ff_input_acc$D_OUT ;
  assign inst1_systolic_intArray_1_0_acc_output$whas =
	     inst1_systolic_intArray_1_0_ff_west$EMPTY_N &&
	     inst1_systolic_intArray_1_0_ff_input_acc$EMPTY_N ;
  assign inst1_systolic_intArray_1_1_acc_output$wget =
	     _0_CONCAT_inst1_systolic_intArray_1_1_rg_north__ETC___d41[15:0] +
	     inst1_systolic_intArray_1_1_ff_input_acc$D_OUT ;
  assign inst1_systolic_intArray_1_1_acc_output$whas =
	     inst1_systolic_intArray_1_1_ff_west$EMPTY_N &&
	     inst1_systolic_intArray_1_1_ff_input_acc$EMPTY_N ;

  // register inst1_rg_h_cntr
  assign inst1_rg_h_cntr$D_IN =
	     MUX_inst1_rg_h_cntr$write_1__SEL_1 ?
	       MUX_inst1_rg_h_cntr$write_1__VAL_1 :
	       8'd0 ;
  assign inst1_rg_h_cntr$EN =
	     RDY_get_inp_addr_1_get &&
	     !inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 &&
	     inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_inp_addr_0
  assign inst1_rg_inp_addr_0$D_IN =
	     EN_subifc_put_compute_params_put ?
	       17'h0AAA8 :
	       get_inp_addr_0_get ;
  assign inst1_rg_inp_addr_0$EN =
	     EN_subifc_put_compute_params_put || RDY_get_inp_addr_1_get ;

  // register inst1_rg_inp_addr_1
  assign inst1_rg_inp_addr_1$D_IN =
	     EN_subifc_put_compute_params_put ?
	       17'h0AAA8 :
	       get_inp_addr_1_get ;
  assign inst1_rg_inp_addr_1$EN =
	     EN_subifc_put_compute_params_put || RDY_get_inp_addr_1_get ;

  // register inst1_rg_inp_col_addr
  assign inst1_rg_inp_col_addr$D_IN =
	     MUX_inst1_rg_inp_col_addr$write_1__SEL_1 ?
	       MUX_inst1_rg_inp_col_addr$write_1__VAL_1 :
	       subifc_put_compute_params_put[119:105] ;
  assign inst1_rg_inp_col_addr$EN =
	     RDY_get_inp_addr_1_get &&
	     (!inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 ||
	      !inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114) ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_inp_row_addr
  assign inst1_rg_inp_row_addr$D_IN =
	     MUX_inst1_rg_h_cntr$write_1__SEL_1 ?
	       lv_addr__h6749 :
	       subifc_put_compute_params_put[119:105] ;
  assign inst1_rg_inp_row_addr$EN =
	     RDY_get_inp_addr_1_get &&
	     !inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 &&
	     inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_inp_triangle
  assign inst1_rg_inp_triangle$D_IN =
	     !MUX_inst1_rg_inp_triangle$write_1__SEL_1 ;
  assign inst1_rg_inp_triangle$EN =
	     RDY_get_inp_addr_1_get &&
	     inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 &&
	     inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_new_out_addr_0
  assign inst1_rg_new_out_addr_0$D_IN =
	     EN_subifc_put_compute_params_put ?
	       subifc_put_compute_params_put[104:90] :
	       MUX_inst1_rg_new_out_addr_0$write_1__VAL_2 ;
  assign inst1_rg_new_out_addr_0$EN =
	     EN_subifc_put_compute_params_put ||
	     EN_get_new_output_data_0_get ;

  // register inst1_rg_new_out_addr_1
  assign inst1_rg_new_out_addr_1$D_IN =
	     EN_subifc_put_compute_params_put ?
	       subifc_put_compute_params_put[104:90] :
	       MUX_inst1_rg_new_out_addr_1$write_1__VAL_2 ;
  assign inst1_rg_new_out_addr_1$EN =
	     EN_subifc_put_compute_params_put ||
	     EN_get_new_output_data_1_get ;

  // register inst1_rg_new_out_cntr
  always@(EN_subifc_put_compute_params_put or
	  subifc_put_compute_params_put_BITS_66_TO_59_89_ETC___d191 or
	  MUX_inst1_rg_new_out_cntr$write_1__SEL_2 or
	  MUX_inst1_rg_new_out_cntr$write_1__VAL_2 or
	  MUX_inst1_rg_new_out_cntr$write_1__SEL_3)
  case (1'b1)
    EN_subifc_put_compute_params_put:
	inst1_rg_new_out_cntr$D_IN =
	    subifc_put_compute_params_put_BITS_66_TO_59_89_ETC___d191[7:0];
    MUX_inst1_rg_new_out_cntr$write_1__SEL_2:
	inst1_rg_new_out_cntr$D_IN = MUX_inst1_rg_new_out_cntr$write_1__VAL_2;
    MUX_inst1_rg_new_out_cntr$write_1__SEL_3:
	inst1_rg_new_out_cntr$D_IN = MUX_inst1_rg_new_out_cntr$write_1__VAL_2;
    default: inst1_rg_new_out_cntr$D_IN =
		 8'b10101010 /* unspecified value */ ;
  endcase
  assign inst1_rg_new_out_cntr$EN =
	     EN_get_new_output_data_0_get && inst1_rg_params[50:43] == 8'd1 ||
	     EN_get_new_output_data_1_get && inst1_rg_params[50:43] == 8'd2 ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_old_out_addr
  assign inst1_rg_old_out_addr$D_IN =
	     EN_subifc_put_compute_params_put ?
	       subifc_put_compute_params_put[104:90] :
	       MUX_inst1_rg_old_out_addr$write_1__VAL_2 ;
  assign inst1_rg_old_out_addr$EN =
	     EN_subifc_put_compute_params_put || RDY_get_inp_addr_1_get ;

  // register inst1_rg_old_out_req_0
  assign inst1_rg_old_out_req_0$D_IN =
	     EN_subifc_put_compute_params_put ?
	       17'h0AAA8 :
	       get_old_out_addr_0_get ;
  assign inst1_rg_old_out_req_0$EN =
	     EN_subifc_put_compute_params_put || RDY_get_inp_addr_1_get ;

  // register inst1_rg_old_out_req_1
  assign inst1_rg_old_out_req_1$D_IN =
	     EN_subifc_put_compute_params_put ?
	       17'h0AAA8 :
	       inst1_rg_old_out_req_0 ;
  assign inst1_rg_old_out_req_1$EN =
	     EN_subifc_put_compute_params_put || RDY_get_inp_addr_1_get ;

  // register inst1_rg_op_traingle_cntr
  assign inst1_rg_op_traingle_cntr$D_IN = 8'h0 ;
  assign inst1_rg_op_traingle_cntr$EN = 1'b0 ;

  // register inst1_rg_op_triangle
  assign inst1_rg_op_triangle$D_IN =
	     !MUX_inst1_rg_inp_triangle$write_1__SEL_1 ;
  assign inst1_rg_op_triangle$EN =
	     RDY_get_inp_addr_1_get &&
	     inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 &&
	     inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_params
  assign inst1_rg_params$D_IN =
	     EN_subifc_get_compute_finish_get ?
	       121'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_inst1_rg_params$write_1__VAL_2 ;
  assign inst1_rg_params$EN =
	     EN_subifc_get_compute_finish_get ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_row_cntr
  assign inst1_rg_row_cntr$D_IN =
	     MUX_inst1_rg_inp_triangle$write_1__SEL_1 ?
	       MUX_inst1_rg_row_cntr$write_1__VAL_1 :
	       8'd2 ;
  assign inst1_rg_row_cntr$EN =
	     RDY_get_inp_addr_1_get &&
	     inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 &&
	     inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_valid_col_0
  assign inst1_rg_valid_col_0$D_IN =
	     subifc_put_compute_params_put[50:43] != 8'd0 ;
  assign inst1_rg_valid_col_0$EN = EN_subifc_put_compute_params_put ;

  // register inst1_rg_valid_col_1
  assign inst1_rg_valid_col_1$D_IN =
	     subifc_put_compute_params_put[50:43] > 8'd1 ;
  assign inst1_rg_valid_col_1$EN = EN_subifc_put_compute_params_put ;

  // register inst1_rg_valid_row_0
  assign inst1_rg_valid_row_0$D_IN =
	     subifc_put_compute_params_put[58:51] != 8'd0 ;
  assign inst1_rg_valid_row_0$EN = EN_subifc_put_compute_params_put ;

  // register inst1_rg_valid_row_1
  assign inst1_rg_valid_row_1$D_IN =
	     subifc_put_compute_params_put[58:51] > 8'd1 ;
  assign inst1_rg_valid_row_1$EN = EN_subifc_put_compute_params_put ;

  // register inst1_rg_w_cntr
  assign inst1_rg_w_cntr$D_IN =
	     MUX_inst1_rg_inp_col_addr$write_1__SEL_1 ?
	       MUX_inst1_rg_w_cntr$write_1__VAL_1 :
	       8'd0 ;
  assign inst1_rg_w_cntr$EN =
	     RDY_get_inp_addr_1_get &&
	     (!inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 ||
	      !inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114) ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_weightload
  assign inst1_rg_weightload$D_IN = !MUX_inst1_rg_weightload$write_1__SEL_1 ;
  assign inst1_rg_weightload$EN =
	     EN_put_wt_resp && inst1_ff_wt_coord$D_OUT == 8'd1 ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_weightload_req
  assign inst1_rg_weightload_req$D_IN =
	     !MUX_inst1_rg_weightload_req$write_1__SEL_1 ;
  assign inst1_rg_weightload_req$EN =
	     EN_get_wt_addr &&
	     inst1_rg_wt_cntr_99_EQ_inst1_rg_params_1_BITS__ETC___d204 ||
	     EN_subifc_put_compute_params_put ;

  // register inst1_rg_which_buffer
  assign inst1_rg_which_buffer$D_IN = subifc_put_compute_params_put[104] ;
  assign inst1_rg_which_buffer$EN = EN_subifc_put_compute_params_put ;

  // register inst1_rg_wt_addr
  assign inst1_rg_wt_addr$D_IN =
	     EN_subifc_put_compute_params_put ?
	       MUX_inst1_rg_wt_addr$write_1__VAL_1 :
	       MUX_inst1_rg_wt_addr$write_1__VAL_2 ;
  assign inst1_rg_wt_addr$EN =
	     EN_subifc_put_compute_params_put || EN_get_wt_addr ;

  // register inst1_rg_wt_cntr
  assign inst1_rg_wt_cntr$D_IN =
	     EN_get_wt_addr ? MUX_inst1_rg_wt_cntr$write_1__VAL_1 : 8'd0 ;
  assign inst1_rg_wt_cntr$EN =
	     EN_get_wt_addr || EN_subifc_put_compute_params_put ;

  // register inst1_rg_zero_cntr_0
  assign inst1_rg_zero_cntr_0$D_IN =
	     MUX_inst1_rg_zero_cntr_1$write_1__SEL_1 ?
	       subifc_put_compute_params_put_BITS_66_TO_59_89_ETC___d191[7:0] :
	       MUX_inst1_rg_zero_cntr_0$write_1__VAL_2 ;
  assign inst1_rg_zero_cntr_0$EN =
	     EN_subifc_put_compute_params_put &&
	     !subifc_put_compute_params_put[18] ||
	     WILL_FIRE_RL_inst1_rl_send_init_acc_zero ;

  // register inst1_rg_zero_cntr_1
  assign inst1_rg_zero_cntr_1$D_IN =
	     MUX_inst1_rg_zero_cntr_1$write_1__SEL_1 ?
	       subifc_put_compute_params_put_BITS_66_TO_59_89_ETC___d191[7:0] :
	       MUX_inst1_rg_zero_cntr_1$write_1__VAL_2 ;
  assign inst1_rg_zero_cntr_1$EN =
	     EN_subifc_put_compute_params_put &&
	     !subifc_put_compute_params_put[18] ||
	     WILL_FIRE_RL_inst1_rl_send_init_acc_zero_1 ;

  // register inst1_systolic_intArray_0_0_rg_coord
  assign inst1_systolic_intArray_0_0_rg_coord$D_IN = 8'h0 ;
  assign inst1_systolic_intArray_0_0_rg_coord$EN = 1'b0 ;

  // register inst1_systolic_intArray_0_0_rg_counter
  assign inst1_systolic_intArray_0_0_rg_counter$D_IN =
	     inst1_ff_wt_coord$D_OUT + 8'd1 ;
  assign inst1_systolic_intArray_0_0_rg_counter$EN =
	     EN_put_wt_resp && inst1_rg_params[50:43] != 8'd0 ;

  // register inst1_systolic_intArray_0_0_rg_north
  assign inst1_systolic_intArray_0_0_rg_north$D_IN =
	     put_wt_resp_weights[7:0] ;
  assign inst1_systolic_intArray_0_0_rg_north$EN =
	     EN_put_wt_resp && inst1_rg_params[50:43] != 8'd0 ;

  // register inst1_systolic_intArray_0_1_rg_coord
  assign inst1_systolic_intArray_0_1_rg_coord$D_IN = 8'h0 ;
  assign inst1_systolic_intArray_0_1_rg_coord$EN = 1'b0 ;

  // register inst1_systolic_intArray_0_1_rg_counter
  assign inst1_systolic_intArray_0_1_rg_counter$D_IN =
	     inst1_ff_wt_coord$D_OUT + 8'd1 ;
  assign inst1_systolic_intArray_0_1_rg_counter$EN =
	     EN_put_wt_resp &&
	     NOT_inst1_rg_params_1_BITS_50_TO_43_06_ULE_1_17___d218 ;

  // register inst1_systolic_intArray_0_1_rg_north
  assign inst1_systolic_intArray_0_1_rg_north$D_IN =
	     put_wt_resp_weights[15:8] ;
  assign inst1_systolic_intArray_0_1_rg_north$EN =
	     EN_put_wt_resp &&
	     NOT_inst1_rg_params_1_BITS_50_TO_43_06_ULE_1_17___d218 ;

  // register inst1_systolic_intArray_1_0_rg_coord
  assign inst1_systolic_intArray_1_0_rg_coord$D_IN = 8'h0 ;
  assign inst1_systolic_intArray_1_0_rg_coord$EN = 1'b0 ;

  // register inst1_systolic_intArray_1_0_rg_counter
  assign inst1_systolic_intArray_1_0_rg_counter$D_IN =
	     inst1_systolic_intArray_0_0_rg_counter ;
  assign inst1_systolic_intArray_1_0_rg_counter$EN =
	     inst1_systolic_intArray_0_0_rg_counter <
	     inst1_systolic_intArray_0_0_rg_coord ;

  // register inst1_systolic_intArray_1_0_rg_north
  assign inst1_systolic_intArray_1_0_rg_north$D_IN =
	     inst1_systolic_intArray_0_0_rg_north ;
  assign inst1_systolic_intArray_1_0_rg_north$EN =
	     inst1_systolic_intArray_0_0_rg_counter <
	     inst1_systolic_intArray_0_0_rg_coord ;

  // register inst1_systolic_intArray_1_1_rg_coord
  assign inst1_systolic_intArray_1_1_rg_coord$D_IN = 8'h0 ;
  assign inst1_systolic_intArray_1_1_rg_coord$EN = 1'b0 ;

  // register inst1_systolic_intArray_1_1_rg_counter
  assign inst1_systolic_intArray_1_1_rg_counter$D_IN =
	     inst1_systolic_intArray_0_1_rg_counter ;
  assign inst1_systolic_intArray_1_1_rg_counter$EN =
	     inst1_systolic_intArray_0_1_rg_counter <
	     inst1_systolic_intArray_0_1_rg_coord ;

  // register inst1_systolic_intArray_1_1_rg_north
  assign inst1_systolic_intArray_1_1_rg_north$D_IN =
	     inst1_systolic_intArray_0_1_rg_north ;
  assign inst1_systolic_intArray_1_1_rg_north$EN =
	     inst1_systolic_intArray_0_1_rg_counter <
	     inst1_systolic_intArray_0_1_rg_coord ;

  // submodule inst1_ff_inp_count
  assign inst1_ff_inp_count$D_IN = 8'h0 ;
  assign inst1_ff_inp_count$ENQ = 1'b0 ;
  assign inst1_ff_inp_count$DEQ = 1'b0 ;
  assign inst1_ff_inp_count$CLR = 1'b0 ;

  // submodule inst1_ff_wt_coord
  assign inst1_ff_wt_coord$D_IN = x__h10230 + inst1_rg_wt_cntr ;
  assign inst1_ff_wt_coord$ENQ = EN_get_wt_addr ;
  assign inst1_ff_wt_coord$DEQ = EN_put_wt_resp ;
  assign inst1_ff_wt_coord$CLR = 1'b0 ;

  // submodule inst1_systolic_intArray_0_0_ff_input_acc
  assign inst1_systolic_intArray_0_0_ff_input_acc$D_IN =
	     EN_put_old_out_resp_0_put ? put_old_out_resp_0_put : 16'd0 ;
  assign inst1_systolic_intArray_0_0_ff_input_acc$ENQ =
	     EN_put_old_out_resp_0_put ||
	     WILL_FIRE_RL_inst1_rl_send_init_acc_zero ;
  assign inst1_systolic_intArray_0_0_ff_input_acc$DEQ =
	     inst1_systolic_intArray_0_0_wr_west$whas ;
  assign inst1_systolic_intArray_0_0_ff_input_acc$CLR = 1'b0 ;

  // submodule inst1_systolic_intArray_0_0_ff_west
  assign inst1_systolic_intArray_0_0_ff_west$D_IN = put_inp_resp_0_put ;
  assign inst1_systolic_intArray_0_0_ff_west$ENQ = EN_put_inp_resp_0_put ;
  assign inst1_systolic_intArray_0_0_ff_west$DEQ =
	     inst1_systolic_intArray_0_0_wr_west$whas ;
  assign inst1_systolic_intArray_0_0_ff_west$CLR = 1'b0 ;

  // submodule inst1_systolic_intArray_0_1_ff_input_acc
  assign inst1_systolic_intArray_0_1_ff_input_acc$D_IN =
	     EN_put_old_out_resp_1_put ? put_old_out_resp_1_put : 16'd0 ;
  assign inst1_systolic_intArray_0_1_ff_input_acc$ENQ =
	     EN_put_old_out_resp_1_put ||
	     WILL_FIRE_RL_inst1_rl_send_init_acc_zero_1 ;
  assign inst1_systolic_intArray_0_1_ff_input_acc$DEQ =
	     inst1_systolic_intArray_0_1_wr_west$whas ;
  assign inst1_systolic_intArray_0_1_ff_input_acc$CLR = 1'b0 ;

  // submodule inst1_systolic_intArray_0_1_ff_west
  assign inst1_systolic_intArray_0_1_ff_west$D_IN =
	     inst1_systolic_intArray_0_0_ff_west$D_OUT ;
  assign inst1_systolic_intArray_0_1_ff_west$ENQ =
	     inst1_systolic_intArray_0_0_wr_west$whas &&
	     inst1_systolic_intArray_0_1_ff_west$FULL_N ;
  assign inst1_systolic_intArray_0_1_ff_west$DEQ =
	     inst1_systolic_intArray_0_1_wr_west$whas ;
  assign inst1_systolic_intArray_0_1_ff_west$CLR = 1'b0 ;

  // submodule inst1_systolic_intArray_1_0_ff_input_acc
  assign inst1_systolic_intArray_1_0_ff_input_acc$D_IN =
	     inst1_systolic_intArray_0_0_acc_output$wget ;
  assign inst1_systolic_intArray_1_0_ff_input_acc$ENQ =
	     inst1_systolic_intArray_0_0_wr_west$whas ;
  assign inst1_systolic_intArray_1_0_ff_input_acc$DEQ =
	     EN_get_new_output_data_0_get ;
  assign inst1_systolic_intArray_1_0_ff_input_acc$CLR = 1'b0 ;

  // submodule inst1_systolic_intArray_1_0_ff_west
  assign inst1_systolic_intArray_1_0_ff_west$D_IN = put_inp_resp_1_put ;
  assign inst1_systolic_intArray_1_0_ff_west$ENQ = EN_put_inp_resp_1_put ;
  assign inst1_systolic_intArray_1_0_ff_west$DEQ =
	     EN_get_new_output_data_0_get ;
  assign inst1_systolic_intArray_1_0_ff_west$CLR = 1'b0 ;

  // submodule inst1_systolic_intArray_1_1_ff_input_acc
  assign inst1_systolic_intArray_1_1_ff_input_acc$D_IN =
	     inst1_systolic_intArray_0_1_acc_output$wget ;
  assign inst1_systolic_intArray_1_1_ff_input_acc$ENQ =
	     inst1_systolic_intArray_0_1_wr_west$whas ;
  assign inst1_systolic_intArray_1_1_ff_input_acc$DEQ =
	     EN_get_new_output_data_1_get ;
  assign inst1_systolic_intArray_1_1_ff_input_acc$CLR = 1'b0 ;

  // submodule inst1_systolic_intArray_1_1_ff_west
  assign inst1_systolic_intArray_1_1_ff_west$D_IN =
	     inst1_systolic_intArray_1_0_ff_west$D_OUT ;
  assign inst1_systolic_intArray_1_1_ff_west$ENQ =
	     EN_get_new_output_data_0_get &&
	     inst1_systolic_intArray_1_1_ff_west$FULL_N ;
  assign inst1_systolic_intArray_1_1_ff_west$DEQ =
	     EN_get_new_output_data_1_get ;
  assign inst1_systolic_intArray_1_1_ff_west$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_inst1_rg_params_1_BITS_50_TO_43_06_ULE_1_17___d218 =
	     inst1_rg_params[50:43] > 8'd1 ;
  assign _0_CONCAT_inst1_systolic_intArray_0_0_rg_north__ETC___d8 =
	     { 8'd0, inst1_systolic_intArray_0_0_rg_north } *
	     { 8'd0, inst1_systolic_intArray_0_0_ff_west$D_OUT } ;
  assign _0_CONCAT_inst1_systolic_intArray_0_1_rg_north__ETC___d19 =
	     { 8'd0, inst1_systolic_intArray_0_1_rg_north } *
	     { 8'd0, inst1_systolic_intArray_0_1_ff_west$D_OUT } ;
  assign _0_CONCAT_inst1_systolic_intArray_1_0_rg_north__ETC___d30 =
	     { 8'd0, inst1_systolic_intArray_1_0_rg_north } *
	     { 8'd0, inst1_systolic_intArray_1_0_ff_west$D_OUT } ;
  assign _0_CONCAT_inst1_systolic_intArray_1_1_rg_north__ETC___d41 =
	     { 8'd0, inst1_systolic_intArray_1_1_rg_north } *
	     { 8'd0, inst1_systolic_intArray_1_1_ff_west$D_OUT } ;
  assign inst1_rg_h_cntr_07_EQ_inst1_rg_params_1_BITS_7_ETC___d110 =
	     inst1_rg_h_cntr == y__h6500 ;
  assign inst1_rg_h_cntr_07_ULT_0_CONCAT_inst1_rg_param_ETC___d147 =
	     inst1_rg_h_cntr < y__h7044 || inst1_rg_w_cntr < y__h7061 ||
	     x__h7067 < y__h7068 ;
  assign inst1_rg_w_cntr_11_EQ_inst1_rg_params_1_BITS_6_ETC___d114 =
	     inst1_rg_w_cntr == y__h6561 ;
  assign inst1_rg_wt_cntr_99_EQ_inst1_rg_params_1_BITS__ETC___d204 =
	     inst1_rg_wt_cntr == inst1_rg_params[58:51] - 8'd1 ;
  assign lv_addr__h6749 =
	     inst1_rg_inp_row_addr + { 11'd0, inst1_rg_params[42:39] } ;
  assign subifc_put_compute_params_put_BITS_66_TO_59_89_ETC___d191 =
	     subifc_put_compute_params_put[66:59] *
	     subifc_put_compute_params_put[74:67] ;
  assign x__h10230 = 8'd2 - inst1_rg_params[58:51] ;
  assign x__h6830 = inst1_rg_w_cntr + 8'd1 ;
  assign x__h6855 =
	     inst1_rg_inp_col_addr + { 11'd0, inst1_rg_params[38:35] } ;
  assign x__h7067 = x__h7084 - 8'd1 ;
  assign x__h7084 = inst1_rg_params[74:67] - inst1_rg_h_cntr ;
  assign x__h7097 = x__h7099 - 8'd1 ;
  assign x__h7099 = inst1_rg_params[66:59] - inst1_rg_w_cntr ;
  assign x__h8120 = subifc_put_compute_params_put[89:75] + y__h8123 ;
  assign y__h6500 = inst1_rg_params[74:67] - 8'd1 ;
  assign y__h6561 = inst1_rg_params[66:59] - 8'd1 ;
  assign y__h7044 = { 4'd0, inst1_rg_params[26:23] } ;
  assign y__h7061 = { 4'd0, inst1_rg_params[34:31] } ;
  assign y__h7068 = { 4'd0, inst1_rg_params[22:19] } ;
  assign y__h7098 = { 4'd0, inst1_rg_params[30:27] } ;
  assign y__h8123 = { 7'd0, subifc_put_compute_params_put[58:51] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst1_rg_h_cntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_inp_addr_0 <= `BSV_ASSIGNMENT_DELAY 17'h0AAAA;
	inst1_rg_inp_addr_1 <= `BSV_ASSIGNMENT_DELAY 17'h0AAAA;
	inst1_rg_inp_col_addr <= `BSV_ASSIGNMENT_DELAY 15'h2AAA;
	inst1_rg_inp_row_addr <= `BSV_ASSIGNMENT_DELAY 15'h2AAA;
	inst1_rg_inp_triangle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_new_out_addr_0 <= `BSV_ASSIGNMENT_DELAY 15'h2AAA;
	inst1_rg_new_out_addr_1 <= `BSV_ASSIGNMENT_DELAY 15'h2AAA;
	inst1_rg_new_out_cntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_old_out_addr <= `BSV_ASSIGNMENT_DELAY 15'h2AAA;
	inst1_rg_old_out_req_0 <= `BSV_ASSIGNMENT_DELAY 17'h0AAAA;
	inst1_rg_old_out_req_1 <= `BSV_ASSIGNMENT_DELAY 17'h0AAAA;
	inst1_rg_op_traingle_cntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_op_triangle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_params <= `BSV_ASSIGNMENT_DELAY
	    121'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	inst1_rg_row_cntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_valid_col_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_valid_col_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_valid_row_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_valid_row_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_w_cntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_weightload <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_weightload_req <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_which_buffer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_wt_addr <= `BSV_ASSIGNMENT_DELAY 15'h2AAA;
	inst1_rg_wt_cntr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_zero_cntr_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_zero_cntr_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_systolic_intArray_0_0_rg_coord <= `BSV_ASSIGNMENT_DELAY 8'd2;
	inst1_systolic_intArray_0_0_rg_counter <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_systolic_intArray_0_0_rg_north <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_systolic_intArray_0_1_rg_coord <= `BSV_ASSIGNMENT_DELAY 8'd2;
	inst1_systolic_intArray_0_1_rg_counter <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_systolic_intArray_0_1_rg_north <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_systolic_intArray_1_0_rg_coord <= `BSV_ASSIGNMENT_DELAY 8'd1;
	inst1_systolic_intArray_1_0_rg_counter <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_systolic_intArray_1_0_rg_north <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_systolic_intArray_1_1_rg_coord <= `BSV_ASSIGNMENT_DELAY 8'd1;
	inst1_systolic_intArray_1_1_rg_counter <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_systolic_intArray_1_1_rg_north <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (inst1_rg_h_cntr$EN)
	  inst1_rg_h_cntr <= `BSV_ASSIGNMENT_DELAY inst1_rg_h_cntr$D_IN;
	if (inst1_rg_inp_addr_0$EN)
	  inst1_rg_inp_addr_0 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_inp_addr_0$D_IN;
	if (inst1_rg_inp_addr_1$EN)
	  inst1_rg_inp_addr_1 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_inp_addr_1$D_IN;
	if (inst1_rg_inp_col_addr$EN)
	  inst1_rg_inp_col_addr <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_inp_col_addr$D_IN;
	if (inst1_rg_inp_row_addr$EN)
	  inst1_rg_inp_row_addr <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_inp_row_addr$D_IN;
	if (inst1_rg_inp_triangle$EN)
	  inst1_rg_inp_triangle <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_inp_triangle$D_IN;
	if (inst1_rg_new_out_addr_0$EN)
	  inst1_rg_new_out_addr_0 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_new_out_addr_0$D_IN;
	if (inst1_rg_new_out_addr_1$EN)
	  inst1_rg_new_out_addr_1 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_new_out_addr_1$D_IN;
	if (inst1_rg_new_out_cntr$EN)
	  inst1_rg_new_out_cntr <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_new_out_cntr$D_IN;
	if (inst1_rg_old_out_addr$EN)
	  inst1_rg_old_out_addr <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_old_out_addr$D_IN;
	if (inst1_rg_old_out_req_0$EN)
	  inst1_rg_old_out_req_0 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_old_out_req_0$D_IN;
	if (inst1_rg_old_out_req_1$EN)
	  inst1_rg_old_out_req_1 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_old_out_req_1$D_IN;
	if (inst1_rg_op_traingle_cntr$EN)
	  inst1_rg_op_traingle_cntr <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_op_traingle_cntr$D_IN;
	if (inst1_rg_op_triangle$EN)
	  inst1_rg_op_triangle <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_op_triangle$D_IN;
	if (inst1_rg_params$EN)
	  inst1_rg_params <= `BSV_ASSIGNMENT_DELAY inst1_rg_params$D_IN;
	if (inst1_rg_row_cntr$EN)
	  inst1_rg_row_cntr <= `BSV_ASSIGNMENT_DELAY inst1_rg_row_cntr$D_IN;
	if (inst1_rg_valid_col_0$EN)
	  inst1_rg_valid_col_0 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_valid_col_0$D_IN;
	if (inst1_rg_valid_col_1$EN)
	  inst1_rg_valid_col_1 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_valid_col_1$D_IN;
	if (inst1_rg_valid_row_0$EN)
	  inst1_rg_valid_row_0 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_valid_row_0$D_IN;
	if (inst1_rg_valid_row_1$EN)
	  inst1_rg_valid_row_1 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_valid_row_1$D_IN;
	if (inst1_rg_w_cntr$EN)
	  inst1_rg_w_cntr <= `BSV_ASSIGNMENT_DELAY inst1_rg_w_cntr$D_IN;
	if (inst1_rg_weightload$EN)
	  inst1_rg_weightload <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_weightload$D_IN;
	if (inst1_rg_weightload_req$EN)
	  inst1_rg_weightload_req <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_weightload_req$D_IN;
	if (inst1_rg_which_buffer$EN)
	  inst1_rg_which_buffer <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_which_buffer$D_IN;
	if (inst1_rg_wt_addr$EN)
	  inst1_rg_wt_addr <= `BSV_ASSIGNMENT_DELAY inst1_rg_wt_addr$D_IN;
	if (inst1_rg_wt_cntr$EN)
	  inst1_rg_wt_cntr <= `BSV_ASSIGNMENT_DELAY inst1_rg_wt_cntr$D_IN;
	if (inst1_rg_zero_cntr_0$EN)
	  inst1_rg_zero_cntr_0 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_zero_cntr_0$D_IN;
	if (inst1_rg_zero_cntr_1$EN)
	  inst1_rg_zero_cntr_1 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_zero_cntr_1$D_IN;
	if (inst1_systolic_intArray_0_0_rg_coord$EN)
	  inst1_systolic_intArray_0_0_rg_coord <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_0_0_rg_coord$D_IN;
	if (inst1_systolic_intArray_0_0_rg_counter$EN)
	  inst1_systolic_intArray_0_0_rg_counter <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_0_0_rg_counter$D_IN;
	if (inst1_systolic_intArray_0_0_rg_north$EN)
	  inst1_systolic_intArray_0_0_rg_north <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_0_0_rg_north$D_IN;
	if (inst1_systolic_intArray_0_1_rg_coord$EN)
	  inst1_systolic_intArray_0_1_rg_coord <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_0_1_rg_coord$D_IN;
	if (inst1_systolic_intArray_0_1_rg_counter$EN)
	  inst1_systolic_intArray_0_1_rg_counter <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_0_1_rg_counter$D_IN;
	if (inst1_systolic_intArray_0_1_rg_north$EN)
	  inst1_systolic_intArray_0_1_rg_north <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_0_1_rg_north$D_IN;
	if (inst1_systolic_intArray_1_0_rg_coord$EN)
	  inst1_systolic_intArray_1_0_rg_coord <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_1_0_rg_coord$D_IN;
	if (inst1_systolic_intArray_1_0_rg_counter$EN)
	  inst1_systolic_intArray_1_0_rg_counter <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_1_0_rg_counter$D_IN;
	if (inst1_systolic_intArray_1_0_rg_north$EN)
	  inst1_systolic_intArray_1_0_rg_north <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_1_0_rg_north$D_IN;
	if (inst1_systolic_intArray_1_1_rg_coord$EN)
	  inst1_systolic_intArray_1_1_rg_coord <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_1_1_rg_coord$D_IN;
	if (inst1_systolic_intArray_1_1_rg_counter$EN)
	  inst1_systolic_intArray_1_1_rg_counter <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_1_1_rg_counter$D_IN;
	if (inst1_systolic_intArray_1_1_rg_north$EN)
	  inst1_systolic_intArray_1_1_rg_north <= `BSV_ASSIGNMENT_DELAY
	      inst1_systolic_intArray_1_1_rg_north$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst1_rg_h_cntr = 8'hAA;
    inst1_rg_inp_addr_0 = 17'h0AAAA;
    inst1_rg_inp_addr_1 = 17'h0AAAA;
    inst1_rg_inp_col_addr = 15'h2AAA;
    inst1_rg_inp_row_addr = 15'h2AAA;
    inst1_rg_inp_triangle = 1'h0;
    inst1_rg_new_out_addr_0 = 15'h2AAA;
    inst1_rg_new_out_addr_1 = 15'h2AAA;
    inst1_rg_new_out_cntr = 8'hAA;
    inst1_rg_old_out_addr = 15'h2AAA;
    inst1_rg_old_out_req_0 = 17'h0AAAA;
    inst1_rg_old_out_req_1 = 17'h0AAAA;
    inst1_rg_op_traingle_cntr = 8'hAA;
    inst1_rg_op_triangle = 1'h0;
    inst1_rg_params = 121'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst1_rg_row_cntr = 8'hAA;
    inst1_rg_valid_col_0 = 1'h0;
    inst1_rg_valid_col_1 = 1'h0;
    inst1_rg_valid_row_0 = 1'h0;
    inst1_rg_valid_row_1 = 1'h0;
    inst1_rg_w_cntr = 8'hAA;
    inst1_rg_weightload = 1'h0;
    inst1_rg_weightload_req = 1'h0;
    inst1_rg_which_buffer = 1'h0;
    inst1_rg_wt_addr = 15'h2AAA;
    inst1_rg_wt_cntr = 8'hAA;
    inst1_rg_zero_cntr_0 = 8'hAA;
    inst1_rg_zero_cntr_1 = 8'hAA;
    inst1_systolic_intArray_0_0_rg_coord = 8'hAA;
    inst1_systolic_intArray_0_0_rg_counter = 8'hAA;
    inst1_systolic_intArray_0_0_rg_north = 8'hAA;
    inst1_systolic_intArray_0_1_rg_coord = 8'hAA;
    inst1_systolic_intArray_0_1_rg_counter = 8'hAA;
    inst1_systolic_intArray_0_1_rg_north = 8'hAA;
    inst1_systolic_intArray_1_0_rg_coord = 8'hAA;
    inst1_systolic_intArray_1_0_rg_counter = 8'hAA;
    inst1_systolic_intArray_1_0_rg_north = 8'hAA;
    inst1_systolic_intArray_1_1_rg_coord = 8'hAA;
    inst1_systolic_intArray_1_1_rg_counter = 8'hAA;
    inst1_systolic_intArray_1_1_rg_north = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_subifc_put_compute_params_put)
	begin
	  v__h9050 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_subifc_put_compute_params_put)
	$display(v__h9050,
		 "Received GEMM params",
		 subifc_put_compute_params_put[66:59],
		 subifc_put_compute_params_put[74:67],
		 subifc_put_compute_params_put_BITS_66_TO_59_89_ETC___d191[7:0]);
  end
  // synopsys translate_on
endmodule  // mkgemm_Tb

