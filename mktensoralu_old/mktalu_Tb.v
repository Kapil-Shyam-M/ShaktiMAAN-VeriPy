//
// Generated by Bluespec Compiler (build 8d454e4)
//
// On Thu Nov 12 19:19:43 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_subifc_put_alu_params_put  O     1
// mv_send_req_op                 O    17 reg
// RDY_mv_send_req_op             O     1
// RDY_ma_recv_op                 O     1 reg
// mav_put_result                 O    81
// RDY_mav_put_result             O     1
// subifc_get_alu_complete_get    O     1 const
// RDY_subifc_get_alu_complete_get  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// subifc_put_alu_params_put      I   106
// ma_recv_op_vec_data            I    64
// EN_subifc_put_alu_params_put   I     1
// EN_ma_recv_op                  I     1
// EN_mv_send_req_op              I     1
// EN_mav_put_result              I     1 unused
// EN_subifc_get_alu_complete_get  I     1
//
// Combinational paths from inputs to outputs:
//   (ma_recv_op_vec_data, EN_ma_recv_op) -> mav_put_result
//   EN_ma_recv_op -> RDY_mav_put_result
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mktalu_Tb(CLK,
		 RST_N,

		 subifc_put_alu_params_put,
		 EN_subifc_put_alu_params_put,
		 RDY_subifc_put_alu_params_put,

		 EN_mv_send_req_op,
		 mv_send_req_op,
		 RDY_mv_send_req_op,

		 ma_recv_op_vec_data,
		 EN_ma_recv_op,
		 RDY_ma_recv_op,

		 EN_mav_put_result,
		 mav_put_result,
		 RDY_mav_put_result,

		 EN_subifc_get_alu_complete_get,
		 subifc_get_alu_complete_get,
		 RDY_subifc_get_alu_complete_get);
  input  CLK;
  input  RST_N;

  // action method subifc_put_alu_params_put
  input  [105 : 0] subifc_put_alu_params_put;
  input  EN_subifc_put_alu_params_put;
  output RDY_subifc_put_alu_params_put;

  // actionvalue method mv_send_req_op
  input  EN_mv_send_req_op;
  output [16 : 0] mv_send_req_op;
  output RDY_mv_send_req_op;

  // action method ma_recv_op
  input  [63 : 0] ma_recv_op_vec_data;
  input  EN_ma_recv_op;
  output RDY_ma_recv_op;

  // actionvalue method mav_put_result
  input  EN_mav_put_result;
  output [80 : 0] mav_put_result;
  output RDY_mav_put_result;

  // actionvalue method subifc_get_alu_complete_get
  input  EN_subifc_get_alu_complete_get;
  output subifc_get_alu_complete_get;
  output RDY_subifc_get_alu_complete_get;

  // signals for module outputs
  wire [80 : 0] mav_put_result;
  wire [16 : 0] mv_send_req_op;
  wire RDY_ma_recv_op,
       RDY_mav_put_result,
       RDY_mv_send_req_op,
       RDY_subifc_get_alu_complete_get,
       RDY_subifc_put_alu_params_put,
       subifc_get_alu_complete_get;

  // inlined wires
  reg [15 : 0] inst1_wr_operand_out_0$wget,
	       inst1_wr_operand_out_1$wget,
	       inst1_wr_operand_out_2$wget,
	       inst1_wr_operand_out_3$wget;
  wire inst1_wr_operand_0$whas,
       inst1_wr_operand_1$whas,
       inst1_wr_operand_2$whas,
       inst1_wr_operand_3$whas;

  // register inst1_rg_alu_complete
  reg inst1_rg_alu_complete;
  wire inst1_rg_alu_complete$D_IN, inst1_rg_alu_complete$EN;

  // register inst1_rg_alu_packet
  reg [106 : 0] inst1_rg_alu_packet;
  wire [106 : 0] inst1_rg_alu_packet$D_IN;
  wire inst1_rg_alu_packet$EN;

  // register inst1_rg_i_var
  reg [7 : 0] inst1_rg_i_var;
  wire [7 : 0] inst1_rg_i_var$D_IN;
  wire inst1_rg_i_var$EN;

  // register inst1_rg_icol_addr
  reg [7 : 0] inst1_rg_icol_addr;
  wire [7 : 0] inst1_rg_icol_addr$D_IN;
  wire inst1_rg_icol_addr$EN;

  // register inst1_rg_irow_addr
  reg [7 : 0] inst1_rg_irow_addr;
  wire [7 : 0] inst1_rg_irow_addr$D_IN;
  wire inst1_rg_irow_addr$EN;

  // register inst1_rg_j_var
  reg [7 : 0] inst1_rg_j_var;
  wire [7 : 0] inst1_rg_j_var$D_IN;
  wire inst1_rg_j_var$EN;

  // register inst1_rg_k_out
  reg [3 : 0] inst1_rg_k_out;
  wire [3 : 0] inst1_rg_k_out$D_IN;
  wire inst1_rg_k_out$EN;

  // register inst1_rg_k_var
  reg [3 : 0] inst1_rg_k_var;
  wire [3 : 0] inst1_rg_k_var$D_IN;
  wire inst1_rg_k_var$EN;

  // register inst1_rg_l_out
  reg [3 : 0] inst1_rg_l_out;
  wire [3 : 0] inst1_rg_l_out$D_IN;
  wire inst1_rg_l_out$EN;

  // register inst1_rg_l_var
  reg [3 : 0] inst1_rg_l_var;
  wire [3 : 0] inst1_rg_l_var$D_IN;
  wire inst1_rg_l_var$EN;

  // register inst1_rg_operand_out_0
  reg [15 : 0] inst1_rg_operand_out_0;
  wire [15 : 0] inst1_rg_operand_out_0$D_IN;
  wire inst1_rg_operand_out_0$EN;

  // register inst1_rg_operand_out_1
  reg [15 : 0] inst1_rg_operand_out_1;
  wire [15 : 0] inst1_rg_operand_out_1$D_IN;
  wire inst1_rg_operand_out_1$EN;

  // register inst1_rg_operand_out_2
  reg [15 : 0] inst1_rg_operand_out_2;
  wire [15 : 0] inst1_rg_operand_out_2$D_IN;
  wire inst1_rg_operand_out_2$EN;

  // register inst1_rg_operand_out_3
  reg [15 : 0] inst1_rg_operand_out_3;
  wire [15 : 0] inst1_rg_operand_out_3$D_IN;
  wire inst1_rg_operand_out_3$EN;

  // register inst1_rg_output_addr
  reg [7 : 0] inst1_rg_output_addr;
  wire [7 : 0] inst1_rg_output_addr$D_IN;
  wire inst1_rg_output_addr$EN;

  // register inst1_rg_req_complete
  reg inst1_rg_req_complete;
  wire inst1_rg_req_complete$D_IN, inst1_rg_req_complete$EN;

  // register inst1_rg_scol_addr
  reg [7 : 0] inst1_rg_scol_addr;
  wire [7 : 0] inst1_rg_scol_addr$D_IN;
  wire inst1_rg_scol_addr$EN;

  // register inst1_rg_srow_addr
  reg [7 : 0] inst1_rg_srow_addr;
  wire [7 : 0] inst1_rg_srow_addr$D_IN;
  wire inst1_rg_srow_addr$EN;

  // register inst1_rg_which_buffer
  reg inst1_rg_which_buffer;
  wire inst1_rg_which_buffer$D_IN, inst1_rg_which_buffer$EN;

  // rule scheduling signals
  wire CAN_FIRE_mav_put_result, WILL_FIRE_RL_inst1_rl_perform_computation;

  // inputs to muxes for submodule ports
  wire [106 : 0] MUX_inst1_rg_alu_packet$write_1__VAL_2;
  wire [15 : 0] MUX_inst1_rg_operand_out_0$write_1__VAL_1,
		MUX_inst1_rg_operand_out_0$write_1__VAL_2;
  wire [7 : 0] MUX_inst1_rg_i_var$write_1__VAL_1,
	       MUX_inst1_rg_j_var$write_1__VAL_1,
	       MUX_inst1_rg_output_addr$write_1__VAL_1,
	       MUX_inst1_rg_scol_addr$write_1__VAL_2;
  wire [3 : 0] MUX_inst1_rg_k_var$write_1__VAL_1,
	       MUX_inst1_rg_l_var$write_1__VAL_1;
  wire MUX_inst1_rg_alu_complete$write_1__SEL_1,
       MUX_inst1_rg_i_var$write_1__SEL_1,
       MUX_inst1_rg_icol_addr$write_1__SEL_1,
       MUX_inst1_rg_k_var$write_1__SEL_1,
       MUX_inst1_rg_operand_out_0$write_1__SEL_1,
       MUX_inst1_rg_operand_out_0$write_1__SEL_2,
       MUX_inst1_rg_operand_out_1$write_1__SEL_2,
       MUX_inst1_rg_operand_out_2$write_1__SEL_2,
       MUX_inst1_rg_operand_out_3$write_1__SEL_2,
       MUX_inst1_rg_output_addr$write_1__SEL_1,
       MUX_inst1_rg_req_complete$write_1__SEL_1;

  // remaining internal signals
  wire [47 : 0] IF_inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_3_3_ETC___d151;
  wire [15 : 0] lv_outp___1__h2093,
		lv_outp___1__h2375,
		lv_outp___1__h2382,
		lv_outp___1__h2658,
		lv_outp___1__h2692,
		lv_outp___1__h2699,
		lv_outp___1__h2966,
		lv_outp___1__h3000,
		lv_outp___1__h3007,
		lv_outp___1__h3274,
		lv_outp___1__h3308,
		lv_outp___1__h3315,
		lv_shifted_output__h2083,
		lv_shifted_output__h2652,
		lv_shifted_output__h2960,
		lv_shifted_output__h3268;
  wire [7 : 0] addr___2__h4507,
	       addr__h4460,
	       v__h4432,
	       v__h4481,
	       v__h4530,
	       v__h4927,
	       x__h4654,
	       x__h4766;
  wire [3 : 0] x__h3509, x__h3618, x__h4845, x__h4939;
  wire inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_1___d45,
       inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_2___d59,
       inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_3___d73,
       inst1_rg_i_var_17_EQ_inst1_rg_alu_packet_BITS__ETC___d119,
       inst1_rg_j_var_10_EQ_inst1_rg_alu_packet_BITS__ETC___d112,
       inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19,
       inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106,
       inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22,
       inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102,
       inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d124,
       inst1_rg_operand_out_0_7_SLE_inst1_wr_operand__ETC___d29,
       inst1_rg_operand_out_1_8_SLE_inst1_wr_operand__ETC___d50,
       inst1_rg_operand_out_2_2_SLE_inst1_wr_operand__ETC___d64,
       inst1_rg_operand_out_3_6_SLE_inst1_wr_operand__ETC___d78;

  // action method subifc_put_alu_params_put
  assign RDY_subifc_put_alu_params_put = !inst1_rg_alu_packet[106] ;

  // actionvalue method mv_send_req_op
  assign mv_send_req_op =
	     { inst1_rg_which_buffer,
	       inst1_rg_scol_addr,
	       inst1_rg_alu_packet[39:32] } ;
  assign RDY_mv_send_req_op =
	     inst1_rg_alu_packet[106] && !inst1_rg_req_complete ;

  // action method ma_recv_op
  assign RDY_ma_recv_op = inst1_rg_alu_packet[106] ;

  // actionvalue method mav_put_result
  assign mav_put_result =
	     { inst1_rg_which_buffer,
	       inst1_rg_output_addr,
	       IF_inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_3_3_ETC___d151,
	       (inst1_rg_alu_packet[39:32] == 8'd0) ?
		 16'd0 :
		 inst1_wr_operand_out_0$wget,
	       inst1_rg_alu_packet[39:32] } ;
  assign RDY_mav_put_result =
	     CAN_FIRE_mav_put_result;
	 //    !WILL_FIRE_RL_inst1_rl_perform_computation ;
  assign CAN_FIRE_mav_put_result =
	     inst1_rg_alu_packet[106] &&
	     MUX_inst1_rg_operand_out_1$write_1__SEL_2 &&
	     MUX_inst1_rg_operand_out_2$write_1__SEL_2 &&
	     MUX_inst1_rg_operand_out_3$write_1__SEL_2 &&
	     MUX_inst1_rg_operand_out_0$write_1__SEL_2 ;

  // actionvalue method subifc_get_alu_complete_get
  assign subifc_get_alu_complete_get = 1'd1 ;
  assign RDY_subifc_get_alu_complete_get =
	     inst1_rg_alu_packet[106] && inst1_rg_alu_complete ;

  // rule RL_inst1_rl_perform_computation
  assign WILL_FIRE_RL_inst1_rl_perform_computation =
	     inst1_wr_operand_1$whas && inst1_wr_operand_2$whas &&
	     inst1_wr_operand_3$whas &&
	     inst1_wr_operand_0$whas &&
	     inst1_rg_alu_packet[106] &&
	     !inst1_rg_alu_complete ;

  // inputs to muxes for submodule ports
  assign MUX_inst1_rg_alu_complete$write_1__SEL_1 =
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 &&
	     inst1_rg_req_complete ;
  assign MUX_inst1_rg_i_var$write_1__SEL_1 =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 &&
	     inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 &&
	     inst1_rg_j_var_10_EQ_inst1_rg_alu_packet_BITS__ETC___d112 ;
  assign MUX_inst1_rg_icol_addr$write_1__SEL_1 =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 &&
	     inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 ;
  assign MUX_inst1_rg_k_var$write_1__SEL_1 =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 ;
  assign MUX_inst1_rg_operand_out_0$write_1__SEL_1 =
	     EN_subifc_put_alu_params_put && subifc_put_alu_params_put[31] ;
  assign MUX_inst1_rg_operand_out_0$write_1__SEL_2 =
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     inst1_rg_alu_packet[39:32] != 8'd0 &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;
  assign MUX_inst1_rg_operand_out_1$write_1__SEL_2 =
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     !inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_1___d45 &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;
  assign MUX_inst1_rg_operand_out_2$write_1__SEL_2 =
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     !inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_2___d59 &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;
  assign MUX_inst1_rg_operand_out_3$write_1__SEL_2 =
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     !inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_3___d73 &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;
  assign MUX_inst1_rg_output_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;
  assign MUX_inst1_rg_req_complete$write_1__SEL_1 =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d124 ;
  assign MUX_inst1_rg_alu_packet$write_1__VAL_2 =
	     { 1'd1, subifc_put_alu_params_put } ;
  assign MUX_inst1_rg_i_var$write_1__VAL_1 =
	     inst1_rg_i_var_17_EQ_inst1_rg_alu_packet_BITS__ETC___d119 ?
	       8'd1 :
	       x__h4654 ;
  assign MUX_inst1_rg_j_var$write_1__VAL_1 =
	     inst1_rg_j_var_10_EQ_inst1_rg_alu_packet_BITS__ETC___d112 ?
	       8'd1 :
	       x__h4766 ;
  assign MUX_inst1_rg_k_var$write_1__VAL_1 =
	     inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 ?
	       4'd1 :
	       x__h4845 ;
  assign MUX_inst1_rg_l_var$write_1__VAL_1 =
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 ?
	       4'd1 :
	       x__h4939 ;
  assign MUX_inst1_rg_operand_out_0$write_1__VAL_1 =
	     { 8'd0, subifc_put_alu_params_put[30:23] } ;
  assign MUX_inst1_rg_operand_out_0$write_1__VAL_2 =
	     inst1_rg_alu_packet[31] ?
	       { 8'd0, inst1_rg_alu_packet[30:23] } :
	       16'd0 ;
  assign MUX_inst1_rg_output_addr$write_1__VAL_1 =
	     inst1_rg_output_addr + 8'd1 ;
  assign MUX_inst1_rg_scol_addr$write_1__VAL_2 =
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 ?
	       v__h4432 :
	       v__h4927 ;

  // inlined wires
  assign inst1_wr_operand_0$whas =
	     EN_ma_recv_op && inst1_rg_alu_packet[39:32] != 8'd0 ;
  assign inst1_wr_operand_1$whas =
	     EN_ma_recv_op &&
	     !inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_1___d45 ;
  assign inst1_wr_operand_2$whas =
	     EN_ma_recv_op &&
	     !inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_2___d59 ;
  assign inst1_wr_operand_3$whas =
	     EN_ma_recv_op &&
	     !inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_3___d73 ;
  always@(inst1_rg_alu_packet or
	  lv_outp___1__h2093 or
	  lv_outp___1__h2375 or
	  lv_outp___1__h2382 or lv_shifted_output__h2083)
  begin
    case (inst1_rg_alu_packet[105:104])
      2'd0: inst1_wr_operand_out_0$wget = lv_outp___1__h2093;
      2'd1: inst1_wr_operand_out_0$wget = lv_outp___1__h2375;
      2'd2: inst1_wr_operand_out_0$wget = lv_outp___1__h2382;
      2'd3: inst1_wr_operand_out_0$wget = lv_shifted_output__h2083;
    endcase
  end
  always@(inst1_rg_alu_packet or
	  lv_outp___1__h2658 or
	  lv_outp___1__h2692 or
	  lv_outp___1__h2699 or lv_shifted_output__h2652)
  begin
    case (inst1_rg_alu_packet[105:104])
      2'd0: inst1_wr_operand_out_1$wget = lv_outp___1__h2658;
      2'd1: inst1_wr_operand_out_1$wget = lv_outp___1__h2692;
      2'd2: inst1_wr_operand_out_1$wget = lv_outp___1__h2699;
      2'd3: inst1_wr_operand_out_1$wget = lv_shifted_output__h2652;
    endcase
  end
  always@(inst1_rg_alu_packet or
	  lv_outp___1__h2966 or
	  lv_outp___1__h3000 or
	  lv_outp___1__h3007 or lv_shifted_output__h2960)
  begin
    case (inst1_rg_alu_packet[105:104])
      2'd0: inst1_wr_operand_out_2$wget = lv_outp___1__h2966;
      2'd1: inst1_wr_operand_out_2$wget = lv_outp___1__h3000;
      2'd2: inst1_wr_operand_out_2$wget = lv_outp___1__h3007;
      2'd3: inst1_wr_operand_out_2$wget = lv_shifted_output__h2960;
    endcase
  end
  always@(inst1_rg_alu_packet or
	  lv_outp___1__h3274 or
	  lv_outp___1__h3308 or
	  lv_outp___1__h3315 or lv_shifted_output__h3268)
  begin
    case (inst1_rg_alu_packet[105:104])
      2'd0: inst1_wr_operand_out_3$wget = lv_outp___1__h3274;
      2'd1: inst1_wr_operand_out_3$wget = lv_outp___1__h3308;
      2'd2: inst1_wr_operand_out_3$wget = lv_outp___1__h3315;
      2'd3: inst1_wr_operand_out_3$wget = lv_shifted_output__h3268;
    endcase
  end

  // register inst1_rg_alu_complete
  assign inst1_rg_alu_complete$D_IN =
	     MUX_inst1_rg_alu_complete$write_1__SEL_1 ;
  assign inst1_rg_alu_complete$EN =
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 &&
	     inst1_rg_req_complete ||
	     EN_subifc_put_alu_params_put ||
	     EN_subifc_get_alu_complete_get ;

  // register inst1_rg_alu_packet
  assign inst1_rg_alu_packet$D_IN =
	     EN_subifc_get_alu_complete_get ?
	       107'h2AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_inst1_rg_alu_packet$write_1__VAL_2 ;
  assign inst1_rg_alu_packet$EN =
	     EN_subifc_get_alu_complete_get || EN_subifc_put_alu_params_put ;

  // register inst1_rg_i_var
  assign inst1_rg_i_var$D_IN =
	     MUX_inst1_rg_i_var$write_1__SEL_1 ?
	       MUX_inst1_rg_i_var$write_1__VAL_1 :
	       8'd1 ;
  assign inst1_rg_i_var$EN =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 &&
	     inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 &&
	     inst1_rg_j_var_10_EQ_inst1_rg_alu_packet_BITS__ETC___d112 ||
	     EN_subifc_put_alu_params_put ;

  // register inst1_rg_icol_addr
  assign inst1_rg_icol_addr$D_IN =
	     MUX_inst1_rg_icol_addr$write_1__SEL_1 ?
	       v__h4481 :
	       subifc_put_alu_params_put[103:96] ;
  assign inst1_rg_icol_addr$EN =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 &&
	     inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 ||
	     EN_subifc_put_alu_params_put ;

  // register inst1_rg_irow_addr
  assign inst1_rg_irow_addr$D_IN =
	     MUX_inst1_rg_i_var$write_1__SEL_1 ?
	       v__h4530 :
	       subifc_put_alu_params_put[103:96] ;
  assign inst1_rg_irow_addr$EN =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 &&
	     inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 &&
	     inst1_rg_j_var_10_EQ_inst1_rg_alu_packet_BITS__ETC___d112 ||
	     EN_subifc_put_alu_params_put ;

  // register inst1_rg_j_var
  assign inst1_rg_j_var$D_IN =
	     MUX_inst1_rg_icol_addr$write_1__SEL_1 ?
	       MUX_inst1_rg_j_var$write_1__VAL_1 :
	       8'd1 ;
  assign inst1_rg_j_var$EN =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 &&
	     inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 ||
	     EN_subifc_put_alu_params_put ;

  // register inst1_rg_k_out
  assign inst1_rg_k_out$D_IN =
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 ?
	       4'd1 :
	       x__h3618 ;
  assign inst1_rg_k_out$EN =
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;

  // register inst1_rg_k_var
  assign inst1_rg_k_var$D_IN =
	     MUX_inst1_rg_k_var$write_1__SEL_1 ?
	       MUX_inst1_rg_k_var$write_1__VAL_1 :
	       4'd1 ;
  assign inst1_rg_k_var$EN =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 ||
	     EN_subifc_put_alu_params_put ;

  // register inst1_rg_l_out
  assign inst1_rg_l_out$D_IN =
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ?
	       4'd1 :
	       x__h3509 ;
  assign inst1_rg_l_out$EN = WILL_FIRE_RL_inst1_rl_perform_computation ;

  // register inst1_rg_l_var
  assign inst1_rg_l_var$D_IN =
	     EN_mv_send_req_op ? MUX_inst1_rg_l_var$write_1__VAL_1 : 4'd1 ;
  assign inst1_rg_l_var$EN =
	     EN_mv_send_req_op || EN_subifc_put_alu_params_put ;

  // register inst1_rg_operand_out_0
  assign inst1_rg_operand_out_0$D_IN =
	     MUX_inst1_rg_operand_out_0$write_1__SEL_1 ?
	       MUX_inst1_rg_operand_out_0$write_1__VAL_1 :
	       MUX_inst1_rg_operand_out_0$write_1__VAL_2 ;
  assign inst1_rg_operand_out_0$EN =
	     EN_subifc_put_alu_params_put && subifc_put_alu_params_put[31] ||
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     inst1_rg_alu_packet[39:32] != 8'd0 &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;

  // register inst1_rg_operand_out_1
  assign inst1_rg_operand_out_1$D_IN =
	     MUX_inst1_rg_operand_out_0$write_1__SEL_1 ?
	       MUX_inst1_rg_operand_out_0$write_1__VAL_1 :
	       MUX_inst1_rg_operand_out_0$write_1__VAL_2 ;
  assign inst1_rg_operand_out_1$EN =
	     EN_subifc_put_alu_params_put && subifc_put_alu_params_put[31] ||
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     !inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_1___d45 &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;

  // register inst1_rg_operand_out_2
  assign inst1_rg_operand_out_2$D_IN =
	     MUX_inst1_rg_operand_out_0$write_1__SEL_1 ?
	       MUX_inst1_rg_operand_out_0$write_1__VAL_1 :
	       MUX_inst1_rg_operand_out_0$write_1__VAL_2 ;
  assign inst1_rg_operand_out_2$EN =
	     EN_subifc_put_alu_params_put && subifc_put_alu_params_put[31] ||
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     !inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_2___d59 &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;

  // register inst1_rg_operand_out_3
  assign inst1_rg_operand_out_3$D_IN =
	     MUX_inst1_rg_operand_out_0$write_1__SEL_1 ?
	       MUX_inst1_rg_operand_out_0$write_1__VAL_1 :
	       MUX_inst1_rg_operand_out_0$write_1__VAL_2 ;
  assign inst1_rg_operand_out_3$EN =
	     EN_subifc_put_alu_params_put && subifc_put_alu_params_put[31] ||
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     !inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_3___d73 &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ;

  // register inst1_rg_output_addr
  assign inst1_rg_output_addr$D_IN =
	     MUX_inst1_rg_output_addr$write_1__SEL_1 ?
	       MUX_inst1_rg_output_addr$write_1__VAL_1 :
	       subifc_put_alu_params_put[95:88] ;
  assign inst1_rg_output_addr$EN =
	     WILL_FIRE_RL_inst1_rl_perform_computation &&
	     inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 &&
	     inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 ||
	     EN_subifc_put_alu_params_put ;

  // register inst1_rg_req_complete
  assign inst1_rg_req_complete$D_IN =
	     MUX_inst1_rg_req_complete$write_1__SEL_1 ;
  assign inst1_rg_req_complete$EN =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d124 ||
	     EN_subifc_put_alu_params_put ;

  // register inst1_rg_scol_addr
  assign inst1_rg_scol_addr$D_IN =
	     EN_subifc_put_alu_params_put ?
	       subifc_put_alu_params_put[103:96] :
	       MUX_inst1_rg_scol_addr$write_1__VAL_2 ;
  assign inst1_rg_scol_addr$EN =
	     EN_subifc_put_alu_params_put || EN_mv_send_req_op ;

  // register inst1_rg_srow_addr
  assign inst1_rg_srow_addr$D_IN =
	     MUX_inst1_rg_k_var$write_1__SEL_1 ?
	       v__h4432 :
	       subifc_put_alu_params_put[103:96] ;
  assign inst1_rg_srow_addr$EN =
	     EN_mv_send_req_op &&
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 ||
	     EN_subifc_put_alu_params_put ;

  // register inst1_rg_which_buffer
  assign inst1_rg_which_buffer$D_IN = 1'd1 ;
  assign inst1_rg_which_buffer$EN = EN_subifc_put_alu_params_put ;

  // remaining internal signals
  assign IF_inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_3_3_ETC___d151 =
	     { inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_3___d73 ?
		 16'd0 :
		 inst1_wr_operand_out_3$wget,
	       inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_2___d59 ?
		 16'd0 :
		 inst1_wr_operand_out_2$wget,
	       inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_1___d45 ?
		 16'd0 :
		 inst1_wr_operand_out_1$wget } ;
  assign addr___2__h4507 = inst1_rg_icol_addr + inst1_rg_alu_packet[55:48] ;
  assign addr__h4460 = inst1_rg_srow_addr + inst1_rg_alu_packet[47:40] ;
  assign inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_1___d45 =
	     inst1_rg_alu_packet[39:32] <= 8'd1 ;
  assign inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_2___d59 =
	     inst1_rg_alu_packet[39:32] <= 8'd2 ;
  assign inst1_rg_alu_packet_BITS_39_TO_32_4_ULE_3___d73 =
	     inst1_rg_alu_packet[39:32] <= 8'd3 ;
  assign inst1_rg_i_var_17_EQ_inst1_rg_alu_packet_BITS__ETC___d119 =
	     inst1_rg_i_var == inst1_rg_alu_packet[87:80] ;
  assign inst1_rg_j_var_10_EQ_inst1_rg_alu_packet_BITS__ETC___d112 =
	     inst1_rg_j_var == inst1_rg_alu_packet[79:72] ;
  assign inst1_rg_k_out_7_EQ_inst1_rg_alu_packet_BITS_7_ETC___d19 =
	     inst1_rg_k_out == inst1_rg_alu_packet[71:68] ;
  assign inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 =
	     inst1_rg_k_var == inst1_rg_alu_packet[71:68] ;
  assign inst1_rg_l_out_0_EQ_inst1_rg_alu_packet_BITS_6_ETC___d22 =
	     inst1_rg_l_out == inst1_rg_alu_packet[67:64] ;
  assign inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 =
	     inst1_rg_l_var == inst1_rg_alu_packet[67:64] ;
  assign inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d124 =
	     inst1_rg_l_var_01_EQ_inst1_rg_alu_packet_BITS__ETC___d102 &&
	     inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 &&
	     inst1_rg_j_var_10_EQ_inst1_rg_alu_packet_BITS__ETC___d112 &&
	     inst1_rg_i_var_17_EQ_inst1_rg_alu_packet_BITS__ETC___d119 ;
  assign inst1_rg_operand_out_0_7_SLE_inst1_wr_operand__ETC___d29 =
	     (inst1_rg_operand_out_0 ^ 16'h8000) <=
	     (ma_recv_op_vec_data[15:0] ^ 16'h8000) ;
  assign inst1_rg_operand_out_1_8_SLE_inst1_wr_operand__ETC___d50 =
	     (inst1_rg_operand_out_1 ^ 16'h8000) <=
	     (ma_recv_op_vec_data[31:16] ^ 16'h8000) ;
  assign inst1_rg_operand_out_2_2_SLE_inst1_wr_operand__ETC___d64 =
	     (inst1_rg_operand_out_2 ^ 16'h8000) <=
	     (ma_recv_op_vec_data[47:32] ^ 16'h8000) ;
  assign inst1_rg_operand_out_3_6_SLE_inst1_wr_operand__ETC___d78 =
	     (inst1_rg_operand_out_3 ^ 16'h8000) <=
	     (ma_recv_op_vec_data[63:48] ^ 16'h8000) ;
  assign lv_outp___1__h2093 =
	     inst1_rg_operand_out_0_7_SLE_inst1_wr_operand__ETC___d29 ?
	       ma_recv_op_vec_data[15:0] :
	       inst1_rg_operand_out_0 ;
  assign lv_outp___1__h2375 =
	     inst1_rg_operand_out_0_7_SLE_inst1_wr_operand__ETC___d29 ?
	       inst1_rg_operand_out_0 :
	       ma_recv_op_vec_data[15:0] ;
  assign lv_outp___1__h2382 =
	     inst1_rg_operand_out_0 + ma_recv_op_vec_data[15:0] ;
  assign lv_outp___1__h2658 =
	     inst1_rg_operand_out_1_8_SLE_inst1_wr_operand__ETC___d50 ?
	       ma_recv_op_vec_data[31:16] :
	       inst1_rg_operand_out_1 ;
  assign lv_outp___1__h2692 =
	     inst1_rg_operand_out_1_8_SLE_inst1_wr_operand__ETC___d50 ?
	       inst1_rg_operand_out_1 :
	       ma_recv_op_vec_data[31:16] ;
  assign lv_outp___1__h2699 =
	     inst1_rg_operand_out_1 + ma_recv_op_vec_data[31:16] ;
  assign lv_outp___1__h2966 =
	     inst1_rg_operand_out_2_2_SLE_inst1_wr_operand__ETC___d64 ?
	       ma_recv_op_vec_data[47:32] :
	       inst1_rg_operand_out_2 ;
  assign lv_outp___1__h3000 =
	     inst1_rg_operand_out_2_2_SLE_inst1_wr_operand__ETC___d64 ?
	       inst1_rg_operand_out_2 :
	       ma_recv_op_vec_data[47:32] ;
  assign lv_outp___1__h3007 =
	     inst1_rg_operand_out_2 + ma_recv_op_vec_data[47:32] ;
  assign lv_outp___1__h3274 =
	     inst1_rg_operand_out_3_6_SLE_inst1_wr_operand__ETC___d78 ?
	       ma_recv_op_vec_data[63:48] :
	       inst1_rg_operand_out_3 ;
  assign lv_outp___1__h3308 =
	     inst1_rg_operand_out_3_6_SLE_inst1_wr_operand__ETC___d78 ?
	       inst1_rg_operand_out_3 :
	       ma_recv_op_vec_data[63:48] ;
  assign lv_outp___1__h3315 =
	     inst1_rg_operand_out_3 + ma_recv_op_vec_data[63:48] ;
  assign lv_shifted_output__h2083 =
	     inst1_rg_operand_out_0 << ma_recv_op_vec_data[15:0] ;
  assign lv_shifted_output__h2652 =
	     inst1_rg_operand_out_1 << ma_recv_op_vec_data[31:16] ;
  assign lv_shifted_output__h2960 =
	     inst1_rg_operand_out_2 << ma_recv_op_vec_data[47:32] ;
  assign lv_shifted_output__h3268 =
	     inst1_rg_operand_out_3 << ma_recv_op_vec_data[63:48] ;
  assign v__h4432 =
	     inst1_rg_k_var_05_EQ_inst1_rg_alu_packet_BITS__ETC___d106 ?
	       v__h4481 :
	       addr__h4460 ;
  assign v__h4481 =
	     inst1_rg_j_var_10_EQ_inst1_rg_alu_packet_BITS__ETC___d112 ?
	       v__h4530 :
	       addr___2__h4507 ;
  assign v__h4530 = inst1_rg_irow_addr + inst1_rg_alu_packet[63:56] ;
  assign v__h4927 = inst1_rg_scol_addr + 8'd1 ;
  assign x__h3509 = inst1_rg_l_out + 4'd1 ;
  assign x__h3618 = inst1_rg_k_out + 4'd1 ;
  assign x__h4654 = inst1_rg_i_var + 8'd1 ;
  assign x__h4766 = inst1_rg_j_var + 8'd1 ;
  assign x__h4845 = inst1_rg_k_var + 4'd1 ;
  assign x__h4939 = inst1_rg_l_var + 4'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst1_rg_alu_complete <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_alu_packet <= `BSV_ASSIGNMENT_DELAY
	    107'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
	inst1_rg_i_var <= `BSV_ASSIGNMENT_DELAY 8'd1;
	inst1_rg_icol_addr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_irow_addr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_j_var <= `BSV_ASSIGNMENT_DELAY 8'd1;
	inst1_rg_k_out <= `BSV_ASSIGNMENT_DELAY 4'd1;
	inst1_rg_k_var <= `BSV_ASSIGNMENT_DELAY 4'd1;
	inst1_rg_l_out <= `BSV_ASSIGNMENT_DELAY 4'd1;
	inst1_rg_l_var <= `BSV_ASSIGNMENT_DELAY 4'd1;
	inst1_rg_operand_out_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inst1_rg_operand_out_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inst1_rg_operand_out_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inst1_rg_operand_out_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inst1_rg_output_addr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_req_complete <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst1_rg_scol_addr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_srow_addr <= `BSV_ASSIGNMENT_DELAY 8'd0;
	inst1_rg_which_buffer <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (inst1_rg_alu_complete$EN)
	  inst1_rg_alu_complete <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_alu_complete$D_IN;
	if (inst1_rg_alu_packet$EN)
	  inst1_rg_alu_packet <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_alu_packet$D_IN;
	if (inst1_rg_i_var$EN)
	  inst1_rg_i_var <= `BSV_ASSIGNMENT_DELAY inst1_rg_i_var$D_IN;
	if (inst1_rg_icol_addr$EN)
	  inst1_rg_icol_addr <= `BSV_ASSIGNMENT_DELAY inst1_rg_icol_addr$D_IN;
	if (inst1_rg_irow_addr$EN)
	  inst1_rg_irow_addr <= `BSV_ASSIGNMENT_DELAY inst1_rg_irow_addr$D_IN;
	if (inst1_rg_j_var$EN)
	  inst1_rg_j_var <= `BSV_ASSIGNMENT_DELAY inst1_rg_j_var$D_IN;
	if (inst1_rg_k_out$EN)
	  inst1_rg_k_out <= `BSV_ASSIGNMENT_DELAY inst1_rg_k_out$D_IN;
	if (inst1_rg_k_var$EN)
	  inst1_rg_k_var <= `BSV_ASSIGNMENT_DELAY inst1_rg_k_var$D_IN;
	if (inst1_rg_l_out$EN)
	  inst1_rg_l_out <= `BSV_ASSIGNMENT_DELAY inst1_rg_l_out$D_IN;
	if (inst1_rg_l_var$EN)
	  inst1_rg_l_var <= `BSV_ASSIGNMENT_DELAY inst1_rg_l_var$D_IN;
	if (inst1_rg_operand_out_0$EN)
	  inst1_rg_operand_out_0 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_operand_out_0$D_IN;
	if (inst1_rg_operand_out_1$EN)
	  inst1_rg_operand_out_1 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_operand_out_1$D_IN;
	if (inst1_rg_operand_out_2$EN)
	  inst1_rg_operand_out_2 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_operand_out_2$D_IN;
	if (inst1_rg_operand_out_3$EN)
	  inst1_rg_operand_out_3 <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_operand_out_3$D_IN;
	if (inst1_rg_output_addr$EN)
	  inst1_rg_output_addr <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_output_addr$D_IN;
	if (inst1_rg_req_complete$EN)
	  inst1_rg_req_complete <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_req_complete$D_IN;
	if (inst1_rg_scol_addr$EN)
	  inst1_rg_scol_addr <= `BSV_ASSIGNMENT_DELAY inst1_rg_scol_addr$D_IN;
	if (inst1_rg_srow_addr$EN)
	  inst1_rg_srow_addr <= `BSV_ASSIGNMENT_DELAY inst1_rg_srow_addr$D_IN;
	if (inst1_rg_which_buffer$EN)
	  inst1_rg_which_buffer <= `BSV_ASSIGNMENT_DELAY
	      inst1_rg_which_buffer$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst1_rg_alu_complete = 1'h0;
    inst1_rg_alu_packet = 107'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst1_rg_i_var = 8'hAA;
    inst1_rg_icol_addr = 8'hAA;
    inst1_rg_irow_addr = 8'hAA;
    inst1_rg_j_var = 8'hAA;
    inst1_rg_k_out = 4'hA;
    inst1_rg_k_var = 4'hA;
    inst1_rg_l_out = 4'hA;
    inst1_rg_l_var = 4'hA;
    inst1_rg_operand_out_0 = 16'hAAAA;
    inst1_rg_operand_out_1 = 16'hAAAA;
    inst1_rg_operand_out_2 = 16'hAAAA;
    inst1_rg_operand_out_3 = 16'hAAAA;
    inst1_rg_output_addr = 8'hAA;
    inst1_rg_req_complete = 1'h0;
    inst1_rg_scol_addr = 8'hAA;
    inst1_rg_srow_addr = 8'hAA;
    inst1_rg_which_buffer = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mktalu_Tb

